<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="sampling__functions_8hpp" kind="file" language="C++">
    <compoundname>sampling_functions.hpp</compoundname>
    <includes local="no">raft/core/device_span.hpp</includes>
    <includes local="no">raft/core/handle.hpp</includes>
    <includes local="no">rmm/device_uvector.hpp</includes>
    <includes local="no">optional</includes>
    <includes local="no">tuple</includes>
    <includedby refid="renumber__sampled__edgelist__sg_8cu" local="no">renumber_sampled_edgelist_sg.cu</includedby>
    <includedby refid="sampling__post__processing__impl_8cuh" local="no">sampling_post_processing_impl.cuh</includedby>
    <includedby refid="sampling__post__processing__sg_8cu" local="no">sampling_post_processing_sg.cu</includedby>
    <includedby refid="uniform__neighbor__sampling_8cpp" local="no">uniform_neighbor_sampling.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>sampling_functions.hpp</label>
        <link refid="sampling__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>optional</label>
      </node>
      <node id="2">
        <label>raft/core/device_span.hpp</label>
      </node>
      <node id="3">
        <label>raft/core/handle.hpp</label>
      </node>
      <node id="4">
        <label>rmm/device_uvector.hpp</label>
      </node>
      <node id="6">
        <label>tuple</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>sampling_functions.hpp</label>
        <link refid="sampling__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sampling_post_processing_impl.cuh</label>
        <link refid="sampling__post__processing__impl_8cuh_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacecugraph">cugraph</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020-2024,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;raft/core/device_span.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;raft/core/handle.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rmm/device_uvector.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cugraph<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>@brief<sp/>renumber<sp/>sampled<sp/>edge<sp/>list<sp/>and<sp/>compress<sp/>to<sp/>the<sp/>(D)CSR|(D)CSC<sp/>format.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>renumbers<sp/>sampling<sp/>function<sp/>(e.g.<sp/>uniform_neighbor_sample)<sp/>output<sp/>edges<sp/>fulfilling</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>requirements.<sp/>Assume<sp/>major<sp/>=<sp/>source<sp/>if<sp/>@p<sp/>src_is_major<sp/>is<sp/>true,<sp/>major<sp/>=<sp/>destination</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>if<sp/>@p<sp/>src_is_major<sp/>is<sp/>false.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>1.<sp/>If<sp/>@p<sp/>edgelist_hops<sp/>is<sp/>valid,<sp/>we<sp/>can<sp/>consider<sp/>(vertex<sp/>ID,<sp/>hop,<sp/>flag=major)<sp/>triplets<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>vertex<sp/>ID<sp/>in<sp/>edge<sp/>majors<sp/>(@p<sp/>edgelist_srcs<sp/>if<sp/>@p<sp/>src_is_major<sp/>is<sp/>true,<sp/>@p<sp/>edgelist_dsts<sp/>if<sp/>false)</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>and<sp/>(vertex<sp/>ID,<sp/>hop,<sp/>flag=minor)<sp/>triplets<sp/>for<sp/>each<sp/>vertex<sp/>ID<sp/>in<sp/>edge<sp/>minors.<sp/>From<sp/>these<sp/>triplets,</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>we<sp/>can<sp/>find<sp/>the<sp/>minimum<sp/>(hop,<sp/>flag)<sp/>pairs<sp/>for<sp/>every<sp/>unique<sp/>vertex<sp/>ID<sp/>(hop<sp/>is<sp/>the<sp/>primary<sp/>key<sp/>and</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>flag<sp/>is<sp/>the<sp/>secondary<sp/>key,<sp/>flag=major<sp/>is<sp/>considered<sp/>smaller<sp/>than<sp/>flag=minor<sp/>if<sp/>hop<sp/>numbers<sp/>are</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>same).<sp/>Vertex<sp/>IDs<sp/>with<sp/>smaller<sp/>(hop,<sp/>flag)<sp/>pairs<sp/>precede<sp/>vertex<sp/>IDs<sp/>with<sp/>larger<sp/>(hop,<sp/>flag)<sp/>pairs</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>in<sp/>renumbering.<sp/>Ordering<sp/>can<sp/>be<sp/>arbitrary<sp/>among<sp/>the<sp/>vertices<sp/>with<sp/>the<sp/>same<sp/>(hop,<sp/>flag)<sp/>pairs.<sp/>If</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>@p<sp/>seed_vertices.has_value()<sp/>is<sp/>true,<sp/>we<sp/>assume<sp/>(hop=0,<sp/>flag=major)<sp/>for<sp/>every<sp/>vertex<sp/>in<sp/>@p</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>*seed_vertices<sp/>in<sp/>renumbering<sp/>(this<sp/>is<sp/>relevant<sp/>when<sp/>there<sp/>are<sp/>seed<sp/>vertices<sp/>with<sp/>no<sp/>neighbors).</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>2.<sp/>If<sp/>@p<sp/>edgelist_hops<sp/>is<sp/>invalid,<sp/>unique<sp/>vertex<sp/>IDs<sp/>in<sp/>edge<sp/>majors<sp/>precede<sp/>vertex<sp/>IDs<sp/>that</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>appear<sp/>only<sp/>in<sp/>edge<sp/>minors.<sp/>If<sp/>@p<sp/>seed_vertices.has_value()<sp/>is<sp/>true,<sp/>vertices<sp/>in<sp/>@p</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>*seed_vertices<sp/>precede<sp/>vertex<sp/>IDs<sp/>that<sp/>appear<sp/>only<sp/>in<sp/>edge<sp/>minors<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>3.<sp/>If<sp/>edgelist_label_offsets.has_value()<sp/>is<sp/>true,<sp/>edge<sp/>lists<sp/>for<sp/>different<sp/>labels<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>renumbered<sp/>separately.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>The<sp/>renumbered<sp/>edges<sp/>are<sp/>compressed<sp/>based<sp/>on<sp/>the<sp/>following<sp/>requirements.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>1.<sp/>If<sp/>@p<sp/>compress_per_hop<sp/>is<sp/>true,<sp/>edges<sp/>are<sp/>compressed<sp/>separately<sp/>for<sp/>each<sp/>hop.<sp/>If<sp/>@p</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>compress_per_hop<sp/>is<sp/>false,<sp/>edges<sp/>with<sp/>different<sp/>hop<sp/>numbers<sp/>are<sp/>compressed<sp/>altogether.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>2.<sp/>Edges<sp/>are<sp/>compressed<sp/>independently<sp/>for<sp/>different<sp/>labels.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>3.<sp/>If<sp/>@p<sp/>doubly_compress<sp/>is<sp/>false,<sp/>edges<sp/>are<sp/>compressed<sp/>to<sp/>CSR<sp/>(if<sp/>@p<sp/>src_is_major<sp/>is<sp/>true)<sp/>or</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>CSC<sp/>(if<sp/>@p<sp/>src_is_major<sp/>is<sp/>false).<sp/>If<sp/>@p<sp/>doubly_compress<sp/>is<sp/>true,<sp/>edges<sp/>are<sp/>compressed<sp/>to<sp/>DCSR</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>(if<sp/>@p<sp/>src_is_major<sp/>is<sp/>true)<sp/>or<sp/>DCSC<sp/>(if<sp/>@p<sp/>src_is_major<sp/>is<sp/>false).<sp/>If<sp/>@p<sp/>doubly_compress<sp/>is</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>false,<sp/>the<sp/>CSR/CSC<sp/>offset<sp/>array<sp/>size<sp/>is<sp/>the<sp/>number<sp/>of<sp/>vertices<sp/>(which<sp/>is<sp/>the<sp/>maximum<sp/>vertex<sp/>ID<sp/>+</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>1)<sp/>+<sp/>1.<sp/>Here,<sp/>the<sp/>maximum<sp/>vertex<sp/>ID<sp/>is<sp/>the<sp/>maximum<sp/>major<sp/>vertex<sp/>ID<sp/>in<sp/>the<sp/>edges<sp/>to<sp/>compress<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>compress_per_hop<sp/>is<sp/>false<sp/>or<sp/>for<sp/>hop<sp/>0<sp/>(@p<sp/>seed_vertices<sp/>should<sp/>be<sp/>included<sp/>if<sp/>valid).<sp/>If<sp/>@p</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>compress_per_hop<sp/>is<sp/>true<sp/>and<sp/>hop<sp/>number<sp/>is<sp/>1<sp/>or<sp/>larger,<sp/>the<sp/>maximum<sp/>vertex<sp/>ID<sp/>is<sp/>the<sp/>larger<sp/>of</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>the<sp/>maximum<sp/>major<sp/>vertex<sp/>ID<sp/>for<sp/>this<sp/>hop<sp/>and<sp/>the<sp/>maximum<sp/>vertex<sp/>ID<sp/>for<sp/>the<sp/>edges<sp/>in<sp/>the<sp/>previous</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>hops.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>If<sp/>both<sp/>@p<sp/>compress_per_hop<sp/>is<sp/>false<sp/>and<sp/>@p<sp/>edgelist_hops.has_value()<sp/>is<sp/>true,<sp/>majors<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>non-decreasing<sp/>within<sp/>each<sp/>label<sp/>after<sp/>renumbering<sp/>and<sp/>sorting<sp/>by<sp/>(hop,<sp/>major,<sp/>minor).<sp/>Also,</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>majors<sp/>in<sp/>hop<sp/>N<sp/>should<sp/>not<sp/>appear<sp/>in<sp/>any<sp/>of<sp/>the<sp/>previous<sp/>hops.<sp/>This<sp/>condition<sp/>is<sp/>satisfied<sp/>if</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>majors<sp/>in<sp/>hop<sp/>N<sp/>+<sp/>1<sp/>does<sp/>not<sp/>have<sp/>any<sp/>vertices<sp/>from<sp/>the<sp/>previous<sp/>hops<sp/>excluding<sp/>the<sp/>minors<sp/>from</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>hop<sp/>N.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>is<sp/>single-GPU<sp/>only<sp/>(we<sp/>are<sp/>not<sp/>aware<sp/>of<sp/>any<sp/>practical<sp/>multi-GPU<sp/>use<sp/>cases).</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>vertex_t<sp/>Type<sp/>of<sp/>vertex<sp/>identifiers.<sp/>Needs<sp/>to<sp/>be<sp/>an<sp/>integral<sp/>type.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>weight_t<sp/>Type<sp/>of<sp/>edge<sp/>weight.<sp/><sp/>Needs<sp/>to<sp/>be<sp/>floating<sp/>point<sp/>type</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>edge_id_t<sp/>Type<sp/>of<sp/>edge<sp/>id.<sp/><sp/>Needs<sp/>to<sp/>be<sp/>an<sp/>integral<sp/>type</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>edge_type_t<sp/>Type<sp/>of<sp/>edge<sp/>type.<sp/><sp/>Needs<sp/>to<sp/>be<sp/>an<sp/>integral<sp/>type,<sp/>currently<sp/>only<sp/>int32_t<sp/>is</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>supported</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/>handle<sp/>RAFT<sp/>handle<sp/>object<sp/>to<sp/>encapsulate<sp/>resources<sp/>(e.g.<sp/>CUDA<sp/>stream,<sp/>communicator,<sp/>and</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>handles<sp/>to<sp/>various<sp/>CUDA<sp/>libraries)<sp/>to<sp/>run<sp/>graph<sp/>algorithms.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_srcs<sp/>A<sp/>vector<sp/>storing<sp/>edgelist<sp/>source<sp/>vertices.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_dsts<sp/>A<sp/>vector<sp/>storing<sp/>edgelist<sp/>destination<sp/>vertices<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()).</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_weights<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edgelist<sp/>weights<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_edge_ids<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edgelist<sp/>edge<sp/>IDs<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_edge_types<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edgelist<sp/>edge<sp/>types<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_hops<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edge<sp/>list<sp/>hop<sp/>numbers<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).<sp/>@p<sp/>edgelist_hops<sp/>should<sp/>be<sp/>valid<sp/>if<sp/>@p<sp/>num_hops<sp/>&gt;=<sp/>2.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>@param<sp/>seed_vertices<sp/>An<sp/>optional<sp/>pointer<sp/>to<sp/>the<sp/>array<sp/>storing<sp/>seed<sp/>vertices<sp/>in<sp/>hop<sp/>0.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>@param<sp/>seed_vertex_label_offsets<sp/>An<sp/>optional<sp/>pointer<sp/>to<sp/>the<sp/>array<sp/>storing<sp/>label<sp/>offsets<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>seed<sp/>vertices<sp/>(size<sp/>=<sp/>@p<sp/>num_labels<sp/>+<sp/>1).<sp/>@p<sp/>seed_vertex_label_offsets<sp/>should<sp/>be<sp/>valid<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>num_labels<sp/>&gt;=<sp/>2<sp/>and<sp/>@p<sp/>seed_vertices<sp/>is<sp/>valid<sp/>and<sp/>invalid<sp/>otherwise.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_label_offsets<sp/>An<sp/>optional<sp/>pointer<sp/>to<sp/>the<sp/>array<sp/>storing<sp/>label<sp/>offsets<sp/>to<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>edges<sp/>(size<sp/>=<sp/>@p<sp/>num_labels<sp/>+<sp/>1).<sp/>@p<sp/>edgelist_label_offsets<sp/>should<sp/>be<sp/>valid<sp/>if<sp/>@p<sp/>num_labels</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>&gt;=<sp/>2.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>@param<sp/>num_labels<sp/>Number<sp/>of<sp/>labels.<sp/>Labels<sp/>are<sp/>considered<sp/>if<sp/>@p<sp/>num_labels<sp/>&gt;=2<sp/>and<sp/>ignored<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>num_labels<sp/>=<sp/>1.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>@param<sp/>num_hops<sp/>Number<sp/>of<sp/>hops.<sp/>Hop<sp/>numbers<sp/>are<sp/>considered<sp/>if<sp/>@p<sp/>num_hops<sp/>&gt;=2<sp/>and<sp/>ignored<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>num_hops<sp/>=<sp/>1.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>@param<sp/>src_is_major<sp/>A<sp/>flag<sp/>to<sp/>determine<sp/>whether<sp/>to<sp/>use<sp/>the<sp/>source<sp/>or<sp/>destination<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>major<sp/>key<sp/>in<sp/>renumbering<sp/>and<sp/>compression.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>@param<sp/>compress_per_hop<sp/>A<sp/>flag<sp/>to<sp/>determine<sp/>whether<sp/>to<sp/>compress<sp/>edges<sp/>with<sp/>different<sp/>hop<sp/>numbers</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>separately<sp/>(if<sp/>true)<sp/>or<sp/>altogether<sp/>(if<sp/>false).<sp/>If<sp/>@p<sp/>compress_per_hop<sp/>is<sp/>true,<sp/>@p</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>edgelist_hops.has_value()<sp/>should<sp/>be<sp/>true<sp/>and<sp/>@p<sp/>doubly_compress<sp/>should<sp/>be<sp/>false.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@param<sp/>doubly_compress<sp/>A<sp/>flag<sp/>to<sp/>determine<sp/>whether<sp/>to<sp/>compress<sp/>to<sp/>the<sp/>CSR/CSC<sp/>format<sp/>(if<sp/>false)</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>or<sp/>the<sp/>DCSR/DCSC<sp/>format<sp/>(if<sp/>true).</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@param<sp/>do_expensive_check<sp/>A<sp/>flag<sp/>to<sp/>run<sp/>expensive<sp/>checks<sp/>for<sp/>input<sp/>arguments<sp/>(if<sp/>set<sp/>to<sp/>`true`).</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>@return<sp/>Tuple<sp/>of<sp/>vectors<sp/>storing<sp/>optional<sp/>DCSR/DCSC<sp/>major<sp/>vertex<sp/>IDs<sp/>with<sp/>one<sp/>or<sp/>more<sp/>neighbors,</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>(D)CSR|(D)CSC<sp/>offset<sp/>values,<sp/>edge<sp/>minor<sp/>vertex<sp/>IDs,<sp/>optional<sp/>edge<sp/>weights<sp/>(valid<sp/>only<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>edgelist_weights.has_value()<sp/>is<sp/>true),<sp/>optional<sp/>edge<sp/>IDs<sp/>(valid<sp/>only<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>edgelist_edge_ids.has_value()<sp/>is<sp/>true),<sp/>optional<sp/>edge<sp/>types<sp/>(valid<sp/>only<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>edgelist_edge_types.has_value()<sp/>is<sp/>true),<sp/>optional<sp/>(label,<sp/>hop)<sp/>offset<sp/>values<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>(D)CSR|(D)CSC<sp/>offset<sp/>array<sp/>(size<sp/>=<sp/>@p<sp/>num_labels<sp/>*<sp/>@p<sp/>num_hops<sp/>+<sp/>1,<sp/>valid<sp/>only<sp/>when<sp/>@p</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>edgelist_hops.has_value()<sp/>or<sp/>@p<sp/>edgelist_label_offsets.has_value()<sp/>is<sp/>true),<sp/>renumber_map<sp/>to</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>query<sp/>original<sp/>vertices<sp/>(size<sp/>=<sp/>#<sp/>unique<sp/>or<sp/>aggregate<sp/>#<sp/>unique_vertices<sp/>for<sp/>each<sp/>label),<sp/>and</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>label<sp/>offsets<sp/>to<sp/>the<sp/>renumber_map<sp/>(size<sp/>=<sp/>num_labels<sp/>+<sp/>1,<sp/>valid<sp/>only<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>edgelist_label_offsets.has_value()<sp/>is<sp/>true).</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>vertex_t,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>weight_t,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>edge_id_t,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>edge_type_t&gt;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">std::tuple&lt;std::optional&lt;rmm::device_uvector&lt;vertex_t&gt;&gt;,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dcsr/dcsc<sp/>major<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::device_uvector&lt;size_t&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(d)csr/(d)csc<sp/>offset<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minor<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;weight_t&gt;&gt;,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_id_t&gt;&gt;,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>edge<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_type_t&gt;&gt;,<sp/><sp/></highlight><highlight class="comment">//<sp/>edge<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;size_t&gt;&gt;,<sp/><sp/></highlight><highlight class="comment">//<sp/>(label,<sp/>hop)<sp/>offsets<sp/>to<sp/>the<sp/>(d)csr/(d)csc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>renumber<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;size_t&gt;&gt;&gt;<sp/><sp/></highlight><highlight class="comment">//<sp/>label<sp/>offsets<sp/>to<sp/>the<sp/>renumber<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">renumber_and_compress_sampled_edgelist(</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>raft::handle_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>handle,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;&amp;&amp;<sp/>edgelist_srcs,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;&amp;&amp;<sp/>edgelist_dsts,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;weight_t&gt;&gt;&amp;&amp;<sp/>edgelist_weights,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_id_t&gt;&gt;&amp;&amp;<sp/>edgelist_edge_ids,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_type_t&gt;&gt;&amp;&amp;<sp/>edgelist_edge_types,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;int32_t&gt;&gt;&amp;&amp;<sp/>edgelist_hops,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>std::optional&lt;raft::device_span&lt;vertex_t<sp/>const&gt;&gt;<sp/>seed_vertices,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>std::optional&lt;raft::device_span&lt;size_t<sp/>const&gt;&gt;<sp/>seed_vertex_label_offsets,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>std::optional&lt;raft::device_span&lt;size_t<sp/>const&gt;&gt;<sp/>edgelist_label_offsets,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_labels,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_hops,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>src_is_major<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compress_per_hop<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doubly_compress<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_expensive_check<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@brief<sp/>renumber<sp/>sampled<sp/>edge<sp/>list<sp/>and<sp/>sort<sp/>the<sp/>renumbered<sp/>edges.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>renumbers<sp/>sampling<sp/>function<sp/>(e.g.<sp/>uniform_neighbor_sample)<sp/>output<sp/>edges<sp/>fulfilling</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>requirements.<sp/>Assume<sp/>major<sp/>=<sp/>source<sp/>if<sp/>@p<sp/>src_is_major<sp/>is<sp/>true,<sp/>major<sp/>=<sp/>destination</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>if<sp/>@p<sp/>src_is_major<sp/>is<sp/>false.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>1.<sp/>If<sp/>@p<sp/>edgelist_hops<sp/>is<sp/>valid,<sp/>we<sp/>can<sp/>consider<sp/>(vertex<sp/>ID,<sp/>hop,<sp/>flag=major)<sp/>triplets<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>vertex<sp/>ID<sp/>in<sp/>edge<sp/>majors<sp/>(@p<sp/>edgelist_srcs<sp/>if<sp/>@p<sp/>src_is_major<sp/>is<sp/>true,<sp/>@p<sp/>edgelist_dsts<sp/>if<sp/>false)</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>and<sp/>(vertex<sp/>ID,<sp/>hop,<sp/>flag=minor)<sp/>triplets<sp/>for<sp/>each<sp/>vertex<sp/>ID<sp/>in<sp/>edge<sp/>minors.<sp/>From<sp/>these<sp/>triplets,</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>we<sp/>can<sp/>find<sp/>the<sp/>minimum<sp/>(hop,<sp/>flag)<sp/>pairs<sp/>for<sp/>every<sp/>unique<sp/>vertex<sp/>ID<sp/>(hop<sp/>is<sp/>the<sp/>primary<sp/>key<sp/>and</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>flag<sp/>is<sp/>the<sp/>secondary<sp/>key,<sp/>flag=major<sp/>is<sp/>considered<sp/>smaller<sp/>than<sp/>flag=minor<sp/>if<sp/>hop<sp/>numbers<sp/>are</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>same).<sp/>Vertex<sp/>IDs<sp/>with<sp/>smaller<sp/>(hop,<sp/>flag)<sp/>pairs<sp/>precede<sp/>vertex<sp/>IDs<sp/>with<sp/>larger<sp/>(hop,<sp/>flag)<sp/>pairs</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>in<sp/>renumbering.<sp/>Ordering<sp/>can<sp/>be<sp/>arbitrary<sp/>among<sp/>the<sp/>vertices<sp/>with<sp/>the<sp/>same<sp/>(hop,<sp/>flag)<sp/>pairs.<sp/>If</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@p<sp/>seed_vertices.has-value()<sp/>is<sp/>true,<sp/>we<sp/>assume<sp/>(hop=0,<sp/>flag=major)<sp/>for<sp/>every<sp/>vertex<sp/>in<sp/>@p</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>*seed_vertices<sp/>in<sp/>renumbering<sp/>(this<sp/>is<sp/>relevant<sp/>when<sp/>there<sp/>are<sp/>seed<sp/>vertices<sp/>with<sp/>no<sp/>neighbors).</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>2.<sp/>If<sp/>@p<sp/>edgelist_hops<sp/>is<sp/>invalid,<sp/>unique<sp/>vertex<sp/>IDs<sp/>in<sp/>edge<sp/>majors<sp/>precede<sp/>vertex<sp/>IDs<sp/>that</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>appear<sp/>only<sp/>in<sp/>edge<sp/>minors.<sp/>If<sp/>@p<sp/>seed_vertices.has_value()<sp/>is<sp/>true,<sp/>vertices<sp/>in<sp/>@p</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>*seed_vertices<sp/>precede<sp/>vertex<sp/>IDs<sp/>that<sp/>appear<sp/>only<sp/>in<sp/>edge<sp/>minors<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>3.<sp/>If<sp/>edgelist_label_offsets.has_value()<sp/>is<sp/>true,<sp/>edge<sp/>lists<sp/>for<sp/>different<sp/>labels<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>renumbered<sp/>separately.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>The<sp/>renumbered<sp/>edges<sp/>are<sp/>sorted<sp/>based<sp/>on<sp/>the<sp/>following<sp/>rules.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>1.<sp/>If<sp/>@p<sp/>src_is_major<sp/>is<sp/>true,<sp/>use<sp/>((hop),<sp/>src,<sp/>dst)<sp/>as<sp/>the<sp/>key<sp/>in<sp/>sorting.<sp/>If<sp/>@p<sp/>src_is_major<sp/>is</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>false,<sp/>use<sp/>((hop),<sp/>dst,<sp/>src)<sp/>instead.<sp/>hop<sp/>is<sp/>used<sp/>only<sp/>if<sp/>@p<sp/>edgelist_hops.has_value()<sp/>is<sp/>true.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>2.<sp/>Edges<sp/>in<sp/>each<sp/>label<sp/>are<sp/>sorted<sp/>independently<sp/>if<sp/>@p<sp/>edgelist_label_offsets.has_value()<sp/>is<sp/>true.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>is<sp/>single-GPU<sp/>only<sp/>(we<sp/>are<sp/>not<sp/>aware<sp/>of<sp/>any<sp/>practical<sp/>multi-GPU<sp/>use<sp/>cases).</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>vertex_t<sp/>Type<sp/>of<sp/>vertex<sp/>identifiers.<sp/>Needs<sp/>to<sp/>be<sp/>an<sp/>integral<sp/>type.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>weight_t<sp/>Type<sp/>of<sp/>edge<sp/>weight.<sp/><sp/>Needs<sp/>to<sp/>be<sp/>floating<sp/>point<sp/>type</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>edge_id_t<sp/>Type<sp/>of<sp/>edge<sp/>id.<sp/><sp/>Needs<sp/>to<sp/>be<sp/>an<sp/>integral<sp/>type</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>edge_type_t<sp/>Type<sp/>of<sp/>edge<sp/>type.<sp/><sp/>Needs<sp/>to<sp/>be<sp/>an<sp/>integral<sp/>type,<sp/>currently<sp/>only<sp/>int32_t<sp/>is</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>supported</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/>handle<sp/>RAFT<sp/>handle<sp/>object<sp/>to<sp/>encapsulate<sp/>resources<sp/>(e.g.<sp/>CUDA<sp/>stream,<sp/>communicator,<sp/>and</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>handles<sp/>to<sp/>various<sp/>CUDA<sp/>libraries)<sp/>to<sp/>run<sp/>graph<sp/>algorithms.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_srcs<sp/>A<sp/>vector<sp/>storing<sp/>edgelist<sp/>source<sp/>vertices.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_dsts<sp/>A<sp/>vector<sp/>storing<sp/>edgelist<sp/>destination<sp/>vertices<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()).</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_weights<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edgelist<sp/>weights<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_edge_ids<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edgelist<sp/>edge<sp/>IDs<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_edge_types<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edgelist<sp/>edge<sp/>types<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_hops<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edge<sp/>list<sp/>hop<sp/>numbers<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).<sp/>@p<sp/>edgelist_hops<sp/>should<sp/>be<sp/>valid<sp/>if<sp/>@p<sp/>num_hops<sp/>&gt;=<sp/>2.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@param<sp/>seed_vertices<sp/>An<sp/>optional<sp/>pointer<sp/>to<sp/>the<sp/>array<sp/>storing<sp/>seed<sp/>vertices<sp/>in<sp/>hop<sp/>0.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>@param<sp/>seed_vertex_label_offsets<sp/>An<sp/>optional<sp/>pointer<sp/>to<sp/>the<sp/>array<sp/>storing<sp/>label<sp/>offsets<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>seed<sp/>vertices<sp/>(size<sp/>=<sp/>@p<sp/>num_labels<sp/>+<sp/>1).<sp/>@p<sp/>seed_vertex_label_offsets<sp/>should<sp/>be<sp/>valid<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>num_labels<sp/>&gt;=<sp/>2<sp/>and<sp/>@p<sp/>seed_vertices<sp/>is<sp/>valid<sp/>and<sp/>invalid<sp/>otherwise.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_label_offsets<sp/>An<sp/>optional<sp/>pointer<sp/>to<sp/>the<sp/>array<sp/>storing<sp/>label<sp/>offsets<sp/>to<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>edges<sp/>(size<sp/>=<sp/>@p<sp/>num_labels<sp/>+<sp/>1).<sp/>@p<sp/>edgelist_label_offsets<sp/>should<sp/>be<sp/>valid<sp/>if<sp/>@p<sp/>num_labels</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>&gt;=<sp/>2.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@param<sp/>num_labels<sp/>Number<sp/>of<sp/>labels.<sp/>Labels<sp/>are<sp/>considered<sp/>if<sp/>@p<sp/>num_labels<sp/>&gt;=2<sp/>and<sp/>ignored<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>num_labels<sp/>=<sp/>1.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@param<sp/>num_hops<sp/>Number<sp/>of<sp/>hops.<sp/>Hop<sp/>numbers<sp/>are<sp/>considered<sp/>if<sp/>@p<sp/>num_hops<sp/>&gt;=2<sp/>and<sp/>ignored<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>num_hops<sp/>=<sp/>1.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@param<sp/>src_is_major<sp/>A<sp/>flag<sp/>to<sp/>determine<sp/>whether<sp/>to<sp/>use<sp/>the<sp/>source<sp/>or<sp/>destination<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>major<sp/>key<sp/>in<sp/>renumbering<sp/>and<sp/>sorting.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>@param<sp/>do_expensive_check<sp/>A<sp/>flag<sp/>to<sp/>run<sp/>expensive<sp/>checks<sp/>for<sp/>input<sp/>arguments<sp/>(if<sp/>set<sp/>to<sp/>`true`).</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@return<sp/>Tuple<sp/>of<sp/>vectors<sp/>storing<sp/>edge<sp/>sources,<sp/>edge<sp/>destinations,<sp/>optional<sp/>edge<sp/>weights<sp/>(valid</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>only<sp/>if<sp/>@p<sp/>edgelist_weights.has_value()<sp/>is<sp/>true),<sp/>optional<sp/>edge<sp/>IDs<sp/>(valid<sp/>only<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>edgelist_edge_ids.has_value()<sp/>is<sp/>true),<sp/>optional<sp/>edge<sp/>types<sp/>(valid<sp/>only<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>edgelist_edge_types.has_value()<sp/>is<sp/>true),<sp/>optional<sp/>(label,<sp/>hop)<sp/>offset<sp/>values<sp/>to<sp/>the<sp/>renumbered</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>and<sp/>sorted<sp/>edges<sp/>(size<sp/>=<sp/>@p<sp/>num_labels<sp/>*<sp/>@p<sp/>num_hops<sp/>+<sp/>1,<sp/>valid<sp/>only<sp/>when<sp/>@p</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>edgelist_hops.has_value()<sp/>or<sp/>@p<sp/>edgelist_label_offsetes.has_value()<sp/>is<sp/>true),<sp/>renumber_map<sp/>to</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>query<sp/>original<sp/>vertices<sp/>(size<sp/>=<sp/>#<sp/>unique<sp/>or<sp/>aggregate<sp/>#<sp/>unique<sp/>vertices<sp/>for<sp/>each<sp/>label),<sp/>and</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>label<sp/>offsets<sp/>to<sp/>the<sp/>renumber<sp/>map<sp/>(size<sp/>=<sp/>@p<sp/>num_labels<sp/>+<sp/>1,<sp/>valid<sp/>only<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>edgelist_label_offsets.has_value()<sp/>is<sp/>true).</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>vertex_t,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>weight_t,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>edge_id_t,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>edge_type_t&gt;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>srcs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dsts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;weight_t&gt;&gt;,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_id_t&gt;&gt;,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>edge<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_type_t&gt;&gt;,<sp/><sp/></highlight><highlight class="comment">//<sp/>edge<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;size_t&gt;&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(label,<sp/>hop)<sp/>offsets<sp/>to<sp/>the<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>renumber<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;size_t&gt;&gt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>label<sp/>offsets<sp/>to<sp/>the<sp/>renumber<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">renumber_and_sort_sampled_edgelist(</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>raft::handle_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>handle,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;&amp;&amp;<sp/>edgelist_srcs,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;&amp;&amp;<sp/>edgelist_dsts,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;weight_t&gt;&gt;&amp;&amp;<sp/>edgelist_weights,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_id_t&gt;&gt;&amp;&amp;<sp/>edgelist_edge_ids,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_type_t&gt;&gt;&amp;&amp;<sp/>edgelist_edge_types,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;int32_t&gt;&gt;&amp;&amp;<sp/>edgelist_hops,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>std::optional&lt;raft::device_span&lt;vertex_t<sp/>const&gt;&gt;<sp/>seed_vertices,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>std::optional&lt;raft::device_span&lt;size_t<sp/>const&gt;&gt;<sp/>seed_vertex_label_offsets,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>std::optional&lt;raft::device_span&lt;size_t<sp/>const&gt;&gt;<sp/>edgelist_label_offsets,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_labels,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_hops,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>src_is_major<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_expensive_check<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@brief<sp/>sort<sp/>sampled<sp/>edge<sp/>list.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>Sampled<sp/>edges<sp/>are<sp/>sorted<sp/>based<sp/>on<sp/>the<sp/>following<sp/>rules.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>1.<sp/>If<sp/>@p<sp/>src_is_major<sp/>is<sp/>true,<sp/>use<sp/>((hop),<sp/>src,<sp/>dst)<sp/>as<sp/>the<sp/>key<sp/>in<sp/>sorting.<sp/>If<sp/>@p<sp/>src_is_major<sp/>is</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>false,<sp/>use<sp/>((hop),<sp/>dst,<sp/>src)<sp/>instead.<sp/>hop<sp/>is<sp/>used<sp/>only<sp/>if<sp/>@p<sp/>edgelist_hops.has_value()<sp/>is<sp/>true.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>2.<sp/>Edges<sp/>in<sp/>each<sp/>label<sp/>are<sp/>sorted<sp/>independently<sp/>if<sp/>@p<sp/>edgelist_label_offsets.has_value()<sp/>is<sp/>true.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>is<sp/>single-GPU<sp/>only<sp/>(we<sp/>are<sp/>not<sp/>aware<sp/>of<sp/>any<sp/>practical<sp/>multi-GPU<sp/>use<sp/>cases).</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>vertex_t<sp/>Type<sp/>of<sp/>vertex<sp/>identifiers.<sp/>Needs<sp/>to<sp/>be<sp/>an<sp/>integral<sp/>type.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>weight_t<sp/>Type<sp/>of<sp/>edge<sp/>weight.<sp/><sp/>Needs<sp/>to<sp/>be<sp/>floating<sp/>point<sp/>type</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>edge_id_t<sp/>Type<sp/>of<sp/>edge<sp/>id.<sp/><sp/>Needs<sp/>to<sp/>be<sp/>an<sp/>integral<sp/>type</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>edge_type_t<sp/>Type<sp/>of<sp/>edge<sp/>type.<sp/><sp/>Needs<sp/>to<sp/>be<sp/>an<sp/>integral<sp/>type,<sp/>currently<sp/>only<sp/>int32_t<sp/>is</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>supported</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/>handle<sp/>RAFT<sp/>handle<sp/>object<sp/>to<sp/>encapsulate<sp/>resources<sp/>(e.g.<sp/>CUDA<sp/>stream,<sp/>communicator,<sp/>and</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>handles<sp/>to<sp/>various<sp/>CUDA<sp/>libraries)<sp/>to<sp/>run<sp/>graph<sp/>algorithms.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_srcs<sp/>A<sp/>vector<sp/>storing<sp/>edgelist<sp/>source<sp/>vertices.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_dsts<sp/>A<sp/>vector<sp/>storing<sp/>edgelist<sp/>destination<sp/>vertices<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()).</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_weights<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edgelist<sp/>weights<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_edge_ids<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edgelist<sp/>edge<sp/>IDs<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_edge_types<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edgelist<sp/>edge<sp/>types<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_hops<sp/>An<sp/>optional<sp/>vector<sp/>storing<sp/>edge<sp/>list<sp/>hop<sp/>numbers<sp/>(size<sp/>=<sp/>@p</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>edgelist_srcs.size()<sp/>if<sp/>valid).<sp/>@p<sp/>edgelist_hops<sp/>must<sp/>be<sp/>valid<sp/>if<sp/>@p<sp/>num_hops<sp/>&gt;=<sp/>2.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>@param<sp/>edgelist_label_offsets<sp/>An<sp/>optional<sp/>pointer<sp/>to<sp/>the<sp/>array<sp/>storing<sp/>label<sp/>offsets<sp/>to<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>edges<sp/>(size<sp/>=<sp/>@p<sp/>num_labels<sp/>+<sp/>1).<sp/>@p<sp/>edgelist_label_offsets<sp/>must<sp/>be<sp/>valid<sp/>if<sp/>@p<sp/>num_labels<sp/>&gt;=<sp/>2.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/>@param<sp/>num_labels<sp/>Number<sp/>of<sp/>labels.<sp/>Labels<sp/>are<sp/>considered<sp/>if<sp/>@p<sp/>num_labels<sp/>&gt;=2<sp/>and<sp/>ignored<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>num_labels<sp/>=<sp/>1.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>@param<sp/>num_hops<sp/>Number<sp/>of<sp/>hops.<sp/>Hop<sp/>numbers<sp/>are<sp/>considered<sp/>if<sp/>@p<sp/>num_hops<sp/>&gt;=2<sp/>and<sp/>ignored<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>num_hops<sp/>=<sp/>1.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@param<sp/>src_is_major<sp/>A<sp/>flag<sp/>to<sp/>determine<sp/>whether<sp/>to<sp/>use<sp/>the<sp/>source<sp/>or<sp/>destination<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>major<sp/>key<sp/>in<sp/>renumbering<sp/>and<sp/>sorting.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@param<sp/>do_expensive_check<sp/>A<sp/>flag<sp/>to<sp/>run<sp/>expensive<sp/>checks<sp/>for<sp/>input<sp/>arguments<sp/>(if<sp/>set<sp/>to<sp/>`true`).</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>@return<sp/>Tuple<sp/>of<sp/>vectors<sp/>storing<sp/>edge<sp/>sources,<sp/>edge<sp/>destinations,<sp/>optional<sp/>edge<sp/>weights<sp/>(valid</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>only<sp/>if<sp/>@p<sp/>edgelist_weights.has_value()<sp/>is<sp/>true),<sp/>optional<sp/>edge<sp/>IDs<sp/>(valid<sp/>only<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>edgelist_edge_ids.has_value()<sp/>is<sp/>true),<sp/>optional<sp/>edge<sp/>types<sp/>(valid<sp/>only<sp/>if<sp/>@p</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>edgelist_edge_types.has_value()<sp/>is<sp/>true),<sp/>and<sp/>optional<sp/>(label,<sp/>hop)<sp/>offset<sp/>values<sp/>to<sp/>the<sp/>sorted</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>edges<sp/>(size<sp/>=<sp/>@p<sp/>num_labels<sp/>*<sp/>@p<sp/>num_hops<sp/>+<sp/>1,<sp/>valid<sp/>only<sp/>when<sp/>@p<sp/>edgelist_hops.has_value()<sp/>or<sp/>@p</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>edgelist_label_offsets.has_value()<sp/>is<sp/>true).</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>vertex_t,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>weight_t,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>edge_id_t,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>edge_type_t&gt;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>srcs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dsts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;weight_t&gt;&gt;,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_id_t&gt;&gt;,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>edge<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_type_t&gt;&gt;,<sp/><sp/></highlight><highlight class="comment">//<sp/>edge<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;size_t&gt;&gt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(label,<sp/>hop)<sp/>offsets<sp/>to<sp/>the<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">sort_sampled_edgelist(raft::handle_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>handle,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;&amp;&amp;<sp/>edgelist_srcs,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::device_uvector&lt;vertex_t&gt;&amp;&amp;<sp/>edgelist_dsts,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;weight_t&gt;&gt;&amp;&amp;<sp/>edgelist_weights,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_id_t&gt;&gt;&amp;&amp;<sp/>edgelist_edge_ids,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;edge_type_t&gt;&gt;&amp;&amp;<sp/>edgelist_edge_types,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rmm::device_uvector&lt;int32_t&gt;&gt;&amp;&amp;<sp/>edgelist_hops,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;raft::device_span&lt;size_t<sp/>const&gt;&gt;<sp/>edgelist_label_offsets,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_labels,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_hops,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>src_is_major<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_expensive_check<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cugraph</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/sampling_functions.hpp"/>
  </compounddef>
</doxygen>
