<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="graph__utils_8cuh" kind="file" language="C++">
    <compoundname>graph_utils.cuh</compoundname>
    <includes refid="include_2cugraph_2utilities_2error_8hpp" local="no">cugraph/utilities/error.hpp</includes>
    <includes local="no">raft/util/cudart_utils.hpp</includes>
    <includes local="no">raft/util/device_atomics.cuh</includes>
    <includes local="no">rmm/device_uvector.hpp</includes>
    <includes local="no">rmm/exec_policy.hpp</includes>
    <includes local="no">thrust/copy.h</includes>
    <includes local="no">thrust/device_ptr.h</includes>
    <includes local="no">thrust/execution_policy.h</includes>
    <includes local="no">thrust/extrema.h</includes>
    <includes local="no">thrust/fill.h</includes>
    <includes local="no">thrust/functional.h</includes>
    <includes local="no">thrust/inner_product.h</includes>
    <includes local="no">thrust/iterator/constant_iterator.h</includes>
    <includes local="no">thrust/iterator/zip_iterator.h</includes>
    <includes local="no">thrust/reduce.h</includes>
    <includes local="no">thrust/scatter.h</includes>
    <includes local="no">thrust/sequence.h</includes>
    <includes local="no">thrust/sort.h</includes>
    <includes local="no">thrust/transform.h</includes>
    <includes local="no">thrust/transform_reduce.h</includes>
    <includes local="no">cuda.h</includes>
    <includes local="no">cuda_runtime.h</includes>
    <includes refid="eidecl__graph__utils_8hpp" local="yes">eidecl_graph_utils.hpp</includes>
    <includedby refid="barnes__hut_8cuh" local="yes">barnes_hut.cuh</includedby>
    <includedby refid="connectivity_8cu" local="yes">connectivity.cu</includedby>
    <includedby refid="ecg_8cu" local="yes">ecg.cu</includedby>
    <includedby refid="egonet__impl_8cuh" local="yes">egonet_impl.cuh</includedby>
    <includedby refid="extract__bfs__paths__impl_8cuh" local="yes">extract_bfs_paths_impl.cuh</includedby>
    <includedby refid="fa2__kernels_8cuh" local="yes">fa2_kernels.cuh</includedby>
    <includedby refid="graph_8cu" local="yes">graph.cu</includedby>
    <includedby refid="louvain_8cuh" local="yes">louvain.cuh</includedby>
    <includedby refid="random__walks_8cuh" local="yes">random_walks.cuh</includedby>
    <includedby refid="rw__traversals_8hpp" local="yes">rw_traversals.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>cugraph/utilities/error.hpp</label>
        <link refid="include_2cugraph_2utilities_2error_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>eidecl_graph_utils.hpp</label>
        <link refid="eidecl__graph__utils_8hpp_source"/>
      </node>
      <node id="1">
        <label>graph_utils.cuh</label>
        <link refid="graph__utils_8cuh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>cuda.h</label>
      </node>
      <node id="24">
        <label>cuda_runtime.h</label>
      </node>
      <node id="3">
        <label>raft/core/error.hpp</label>
      </node>
      <node id="4">
        <label>raft/util/cudart_utils.hpp</label>
      </node>
      <node id="5">
        <label>raft/util/device_atomics.cuh</label>
      </node>
      <node id="6">
        <label>rmm/device_uvector.hpp</label>
      </node>
      <node id="7">
        <label>rmm/exec_policy.hpp</label>
      </node>
      <node id="8">
        <label>thrust/copy.h</label>
      </node>
      <node id="9">
        <label>thrust/device_ptr.h</label>
      </node>
      <node id="10">
        <label>thrust/execution_policy.h</label>
      </node>
      <node id="11">
        <label>thrust/extrema.h</label>
      </node>
      <node id="12">
        <label>thrust/fill.h</label>
      </node>
      <node id="13">
        <label>thrust/functional.h</label>
      </node>
      <node id="14">
        <label>thrust/inner_product.h</label>
      </node>
      <node id="15">
        <label>thrust/iterator/constant_iterator.h</label>
      </node>
      <node id="16">
        <label>thrust/iterator/zip_iterator.h</label>
      </node>
      <node id="17">
        <label>thrust/reduce.h</label>
      </node>
      <node id="18">
        <label>thrust/scatter.h</label>
      </node>
      <node id="19">
        <label>thrust/sequence.h</label>
      </node>
      <node id="20">
        <label>thrust/sort.h</label>
      </node>
      <node id="21">
        <label>thrust/transform.h</label>
      </node>
      <node id="22">
        <label>thrust/transform_reduce.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>egonet_impl.cuh</label>
        <link refid="egonet__impl_8cuh_source"/>
      </node>
      <node id="7">
        <label>louvain.cuh</label>
        <link refid="louvain_8cuh_source"/>
      </node>
      <node id="2">
        <label>barnes_hut.cuh</label>
        <link refid="barnes__hut_8cuh_source"/>
      </node>
      <node id="6">
        <label>exact_fa2.cuh</label>
        <link refid="exact__fa2_8cuh_source"/>
      </node>
      <node id="5">
        <label>fa2_kernels.cuh</label>
        <link refid="fa2__kernels_8cuh_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>random_walks.cuh</label>
        <link refid="random__walks_8cuh_source"/>
      </node>
      <node id="9">
        <label>rw_traversals.hpp</label>
        <link refid="rw__traversals_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>extract_bfs_paths_impl.cuh</label>
        <link refid="extract__bfs__paths__impl_8cuh_source"/>
      </node>
      <node id="1">
        <label>graph_utils.cuh</label>
        <link refid="graph__utils_8cuh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcugraph_1_1detail_1_1axpy__functor" prot="public">cugraph::detail::axpy_functor</innerclass>
    <innerclass refid="structcugraph_1_1detail_1_1square" prot="public">cugraph::detail::square</innerclass>
    <innerclass refid="structcugraph_1_1detail_1_1is__zero" prot="public">cugraph::detail::is_zero</innerclass>
    <innerclass refid="structcugraph_1_1detail_1_1dangling__functor" prot="public">cugraph::detail::dangling_functor</innerclass>
    <innernamespace refid="namespacecugraph">cugraph</innernamespace>
    <innernamespace refid="namespacecugraph_1_1detail">cugraph::detail</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="graph__utils_8cuh_1ad30146d2c63c74bd971ed8ae5f2957ff" prot="public" static="no">
        <name>CUDA_MAX_BLOCKS</name>
        <initializer>65535</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/graph_utils.cuh" line="47" column="9" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/graph_utils.cuh" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graph__utils_8cuh_1a0c0f03dcb5e8f4b11c81e6d42908609c" prot="public" static="no">
        <name>CUDA_MAX_KERNEL_THREADS</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/graph_utils.cuh" line="48" column="9" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/graph_utils.cuh" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graph__utils_8cuh_1a89f9bd364d17d48182d34357c3508d05" prot="public" static="no">
        <name>US</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/graph_utils.cuh" line="49" column="9" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/graph_utils.cuh" bodystart="49" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018-2024,<sp/>NVIDIA<sp/>CORPORATION.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>NVIDIA<sp/>CORPORATION<sp/>and<sp/>its<sp/>licensors<sp/>retain<sp/>all<sp/>intellectual<sp/>property</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>and<sp/>proprietary<sp/>rights<sp/>in<sp/>and<sp/>to<sp/>this<sp/>software,<sp/>related<sp/>documentation</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>and<sp/>any<sp/>modifications<sp/>thereto.<sp/><sp/>Any<sp/>use,<sp/>reproduction,<sp/>disclosure<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>distribution<sp/>of<sp/>this<sp/>software<sp/>and<sp/>related<sp/>documentation<sp/>without<sp/>an<sp/>express</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>license<sp/>agreement<sp/>from<sp/>NVIDIA<sp/>CORPORATION<sp/>is<sp/>strictly<sp/>prohibited.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Interanl<sp/>helper<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>Alex<sp/>Fender<sp/>afender@nvidia.com</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cugraph/utilities/error.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;raft/util/cudart_utils.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;raft/util/device_atomics.cuh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rmm/device_uvector.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rmm/exec_policy.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/copy.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/device_ptr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/execution_policy.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/extrema.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/fill.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/functional.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/inner_product.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/iterator/constant_iterator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/iterator/zip_iterator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/reduce.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/scatter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/sequence.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/sort.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/transform.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/transform_reduce.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cuda.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cuda_runtime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cugraph<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>DEBUG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUDA_MAX_BLOCKS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>65535</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUDA_MAX_KERNEL_THREADS<sp/>256<sp/><sp/></highlight><highlight class="comment">//<sp/>kernel<sp/>will<sp/>launch<sp/>at<sp/>most<sp/>256<sp/>threads<sp/>per<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>US</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>count_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>index_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>value_t&gt;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">__inline__<sp/>__device__<sp/>value_t<sp/>parallel_prefix_sum(count_t<sp/>n,<sp/>index_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>ind,<sp/>value_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>w)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>count_t<sp/>i,<sp/>j,<sp/>mn;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>value_t<sp/>v,<sp/>last;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>value_t<sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parallel<sp/>prefix<sp/>sum<sp/>(using<sp/>__shfl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>mn<sp/>=<sp/>(((n<sp/>+<sp/>blockDim.x<sp/>-<sp/>1)<sp/>/<sp/>blockDim.x)<sp/>*<sp/>blockDim.x);<sp/><sp/></highlight><highlight class="comment">//<sp/>n<sp/>in<sp/>multiple<sp/>of<sp/>blockDim.x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>threadIdx.x;<sp/>i<sp/>&lt;<sp/>mn;<sp/>i<sp/>+=<sp/>blockDim.x)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>threads<sp/>(especially<sp/>the<sp/>last<sp/>one)<sp/>must<sp/>always<sp/>participate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>shfl<sp/>instruction,<sp/>otherwise<sp/>their<sp/>sum<sp/>will<sp/>be<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So,<sp/>the<sp/>loop<sp/>stopping<sp/>condition<sp/>is<sp/>based<sp/>on<sp/>multiple<sp/>of<sp/>n<sp/>in<sp/>loop<sp/>increments,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>all<sp/>threads<sp/>enter<sp/>into<sp/>the<sp/>loop<sp/>and<sp/>inside<sp/>we<sp/>make<sp/>sure<sp/>we<sp/>do<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>out<sp/>of<sp/>bounds<sp/>memory<sp/>checking<sp/>for<sp/>the<sp/>actual<sp/>size<sp/>n.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>thread<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>i<sp/>&lt;<sp/>n;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notice<sp/>that<sp/>the<sp/>last<sp/>thread<sp/>is<sp/>used<sp/>to<sp/>propagate<sp/>the<sp/>prefix<sp/>sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>all<sp/>the<sp/>threads,<sp/>in<sp/>the<sp/>first<sp/>iteration<sp/>the<sp/>last<sp/>is<sp/>0,<sp/>in<sp/>the<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterations<sp/>it<sp/>is<sp/>the<sp/>value<sp/>at<sp/>the<sp/>last<sp/>thread<sp/>of<sp/>the<sp/>previous<sp/>iterations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>value<sp/>of<sp/>the<sp/>last<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>last<sp/>=<sp/>__shfl_sync(raft::warp_full_mask(),<sp/>sum,<sp/>blockDim.x<sp/>-<sp/>1,<sp/>blockDim.x);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>you<sp/>are<sp/>valid<sp/>read<sp/>the<sp/>value<sp/>from<sp/>memory,<sp/>otherwise<sp/>set<sp/>your<sp/>value<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(valid)<sp/>?<sp/>w[ind[i]]<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>prefix<sp/>sum<sp/>(of<sp/>size<sp/>warpSize=blockDim.x<sp/>=&lt;<sp/>32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>blockDim.x;<sp/>j<sp/>*=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>__shfl_up_sync(raft::warp_full_mask(),<sp/>sum,<sp/>j,<sp/>blockDim.x);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(threadIdx.x<sp/>&gt;=<sp/>j)<sp/>sum<sp/>+=<sp/>v;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shift<sp/>by<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>last;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>notice<sp/>that<sp/>no<sp/>__threadfence<sp/>or<sp/>__syncthreads<sp/>are<sp/>needed<sp/>in<sp/>this<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>value<sp/>of<sp/>the<sp/>last<sp/>thread<sp/>(to<sp/>all<sp/>threads)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>last<sp/>=<sp/>__shfl_sync(raft::warp_full_mask(),<sp/>sum,<sp/>blockDim.x<sp/>-<sp/>1,<sp/>blockDim.x);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>axpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="98" refid="structcugraph_1_1detail_1_1axpy__functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcugraph_1_1detail_1_1axpy__functor" kindref="compound">axpy_functor</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>thrust::binary_function&lt;T,<sp/>T,<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>a;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="structcugraph_1_1detail_1_1axpy__functor" kindref="compound">axpy_functor</ref>(T<sp/>_a)<sp/>:<sp/>a(_a)<sp/>{}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>__host__<sp/>__device__<sp/>T<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>*<sp/>x<sp/>+<sp/>y;<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>axpy(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>T<sp/>a,<sp/>T*<sp/>x,<sp/>T*<sp/>y)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>thrust::transform(rmm::exec_policy(stream_view),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x),</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x<sp/>+<sp/>n),</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(y),</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(y),</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcugraph_1_1detail_1_1axpy__functor" kindref="compound">axpy_functor&lt;T&gt;</ref>(a));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="119" refid="structcugraph_1_1detail_1_1square" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcugraph_1_1detail_1_1square" kindref="compound">square</ref><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>__host__<sp/>__device__<sp/>T<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">T<sp/>nrm2(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>T*<sp/>x)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>T<sp/>init<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>T<sp/>result<sp/>=<sp/>std::sqrt(thrust::transform_reduce(rmm::exec_policy(stream_view),</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x<sp/>+<sp/>n),</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcugraph_1_1detail_1_1square" kindref="compound">square&lt;T&gt;</ref>(),</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::plus&lt;T&gt;()));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">T<sp/>nrm1(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>T*<sp/>x)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>T<sp/>result<sp/>=<sp/>thrust::reduce(rmm::exec_policy(stream_view),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x<sp/>+<sp/>n));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scal(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>T<sp/>val,<sp/>T*<sp/>x)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>thrust::transform(rmm::exec_policy(stream_view),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x),</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x<sp/>+<sp/>n),</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::make_constant_iterator(val),</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x),</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::multiplies&lt;T&gt;());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addv(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>T<sp/>val,<sp/>T*<sp/>x)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>thrust::transform(rmm::exec_policy(stream_view),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x<sp/>+<sp/>n),</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::make_constant_iterator(val),</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::plus&lt;T&gt;());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>T*<sp/>x,<sp/>T<sp/>value)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>thrust::fill(rmm::exec_policy(stream_view),</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x),</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(x<sp/>+<sp/>n),</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scatter(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>T*<sp/>src,<sp/>T*<sp/>dst,<sp/>M*<sp/>map)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>thrust::scatter(rmm::exec_policy(stream_view),</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(src),</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(src<sp/>+<sp/>n),</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(map),</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(dst));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printv(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>T*<sp/>vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>thrust::device_ptr&lt;T&gt;<sp/>dev_ptr(vec);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>std::cout.precision(15);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;sample<sp/>size<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>offset<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>offset<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>thrust::copy(</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>dev_ptr<sp/>+<sp/>offset,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>dev_ptr<sp/>+<sp/>offset<sp/>+<sp/>n,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;T&gt;(</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>no<sp/>RMM<sp/>dependency;<sp/>TODO:<sp/>check<sp/>/<sp/>test<sp/>(potential<sp/>BUG<sp/>!!!!!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>T*<sp/>x,<sp/>T*<sp/>res)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>thrust::device_ptr&lt;T&gt;<sp/>dev_ptr(x);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>thrust::device_ptr&lt;T&gt;<sp/>res_ptr(res);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>thrust::copy_n(rmm::exec_policy(stream_view),<sp/>dev_ptr,<sp/>n,<sp/>res_ptr);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="224" refid="structcugraph_1_1detail_1_1is__zero" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcugraph_1_1detail_1_1is__zero" kindref="compound">is_zero</ref><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>__host__<sp/>__device__<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="229" refid="structcugraph_1_1detail_1_1dangling__functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcugraph_1_1detail_1_1dangling__functor" kindref="compound">dangling_functor</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>thrust::unary_function&lt;T,<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><ref refid="structcugraph_1_1detail_1_1dangling__functor" kindref="compound">dangling_functor</ref>(T<sp/>_val)<sp/>:<sp/>val(_val)<sp/>{}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>__host__<sp/>__device__<sp/>T<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>+<sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal">};</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_dangling_nodes(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>T*<sp/>dangling_nodes,<sp/>T<sp/>damping_factor)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>thrust::transform_if(rmm::exec_policy(stream_view),</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(dangling_nodes),</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(dangling_nodes<sp/>+<sp/>n),</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(dangling_nodes),</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcugraph_1_1detail_1_1dangling__functor" kindref="compound">dangling_functor&lt;T&gt;</ref>(1.0<sp/>-<sp/>damping_factor),</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcugraph_1_1detail_1_1is__zero" kindref="compound">is_zero&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>google<sp/>matrix<sp/>kernels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IndexType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">__global__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>degree_coo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>n,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>e,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType*<sp/>ind,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueType*<sp/>degree)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>threadIdx.x<sp/>+<sp/>blockIdx.x<sp/>*<sp/>blockDim.x;<sp/>i<sp/>&lt;<sp/>e;<sp/>i<sp/>+=<sp/>gridDim.x<sp/>*<sp/>blockDim.x)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>atomicAdd(&amp;degree[ind[i]],<sp/>(ValueType)1.0);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IndexType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">__global__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flag_leafs_kernel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType*<sp/>degree,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueType*<sp/>bookmark)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>threadIdx.x<sp/>+<sp/>blockIdx.x<sp/>*<sp/>blockDim.x;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>gridDim.x<sp/>*<sp/>blockDim.x)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(degree[i]<sp/>==<sp/>0)<sp/>bookmark[i]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IndexType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">__global__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>degree_offsets(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>n,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>e,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType*<sp/>ind,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueType*<sp/>degree)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>threadIdx.x<sp/>+<sp/>blockIdx.x<sp/>*<sp/>blockDim.x;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>gridDim.x<sp/>*<sp/>blockDim.x)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>degree[i]<sp/>+=<sp/>ind[i<sp/>+<sp/>1]<sp/>-<sp/>ind[i];</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FromType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ToType&gt;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">__global__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>type_convert(FromType*<sp/>array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>threadIdx.x<sp/>+<sp/>blockIdx.x<sp/>*<sp/>blockDim.x;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>gridDim.x<sp/>*<sp/>blockDim.x)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ToType<sp/>val<sp/><sp/><sp/>=<sp/>array[i];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>ToType*<sp/>vals<sp/>=<sp/>(ToType*)array;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>vals[i]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IndexType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">__global__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>equi_prob3(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>n,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>e,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType*<sp/>csrPtr,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType*<sp/>csrInd,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueType*<sp/>val,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexType*<sp/>degree)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/>row,<sp/>col;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>threadIdx.z<sp/>+<sp/>blockIdx.z<sp/>*<sp/>blockDim.z;<sp/>row<sp/>&lt;<sp/>n;<sp/>row<sp/>+=<sp/>gridDim.z<sp/>*<sp/>blockDim.z)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>csrPtr[row]<sp/>+<sp/>threadIdx.y<sp/>+<sp/>blockIdx.y<sp/>*<sp/>blockDim.y;<sp/>j<sp/>&lt;<sp/>csrPtr[row<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>gridDim.y<sp/>*<sp/>blockDim.y)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/>=<sp/>csrInd[j];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val[j]<sp/>=<sp/>1.0<sp/>/<sp/>degree[col];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>val[j]<sp/>=<sp/>999;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IndexType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">__global__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>equi_prob2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>n,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>e,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType*<sp/>csrPtr,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType*<sp/>csrInd,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueType*<sp/>val,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexType*<sp/>degree)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>blockIdx.x<sp/>*<sp/>blockDim.x<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_begin<sp/>=<sp/>csrPtr[row];</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_end<sp/><sp/><sp/>=<sp/>csrPtr[row<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>row_begin;<sp/>i<sp/>&lt;<sp/>row_end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/>=<sp/>csrInd[i];</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val[i]<sp/>=<sp/>1.0<sp/>/<sp/>degree[col];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>H^T<sp/>values<sp/>for<sp/>an<sp/>already<sp/>transposed<sp/>adjacency<sp/>matrix,<sp/>leveraging<sp/>coo<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IndexType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HT_matrix_csc_coo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>n,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>e,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType*<sp/>csrPtr,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType*<sp/>csrInd,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueType*<sp/>val,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueType*<sp/>bookmark)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>rmm::device_uvector&lt;IndexType&gt;<sp/>degree(n,<sp/>stream_view);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>dim3<sp/>nthreads,<sp/>nblocks;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>nthreads.x<sp/>=<sp/>min(e,<sp/>CUDA_MAX_KERNEL_THREADS);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>nthreads.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>nthreads.z<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>nblocks.x<sp/><sp/>=<sp/>min((e<sp/>+<sp/>nthreads.x<sp/>-<sp/>1)<sp/>/<sp/>nthreads.x,<sp/>CUDA_MAX_BLOCKS);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>nblocks.y<sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>nblocks.z<sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>degree_coo&lt;IndexType,<sp/>IndexType&gt;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;&lt;nblocks,<sp/>nthreads,<sp/>0,<sp/>stream_view.value()&gt;&gt;&gt;(n,<sp/>e,<sp/>csrInd,<sp/>degree.data());</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>nthreads.x<sp/>=<sp/>32<sp/>/<sp/>y;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>nthreads.y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>nthreads.z<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>nblocks.x<sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>nblocks.y<sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>nblocks.z<sp/><sp/>=<sp/>min((n<sp/>+<sp/>nthreads.z<sp/>-<sp/>1)<sp/>/<sp/>nthreads.z,<sp/>CUDA_MAX_BLOCKS);<sp/><sp/></highlight><highlight class="comment">//<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>equi_prob3&lt;IndexType,<sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;&lt;nblocks,<sp/>nthreads,<sp/>0,<sp/>stream_view.value()&gt;&gt;&gt;(n,<sp/>e,<sp/>csrPtr,<sp/>csrInd,<sp/>val,<sp/>degree.data());</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>ValueType<sp/>a<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>fill(n,<sp/>bookmark,<sp/>a);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>nthreads.x<sp/>=<sp/>min(n,<sp/>CUDA_MAX_KERNEL_THREADS);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>nthreads.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>nthreads.z<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>nblocks.x<sp/><sp/>=<sp/>min((n<sp/>+<sp/>nthreads.x<sp/>-<sp/>1)<sp/>/<sp/>nthreads.x,<sp/>CUDA_MAX_BLOCKS);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>nblocks.y<sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>nblocks.z<sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>flag_leafs_kernel&lt;IndexType,<sp/>ValueType&gt;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;&lt;nblocks,<sp/>nthreads,<sp/>0,<sp/>stream_view.value()&gt;&gt;&gt;(n,<sp/>degree.data(),<sp/>bookmark);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>offsets_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>index_t&gt;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">__attribute__((visibility(</highlight><highlight class="stringliteral">&quot;hidden&quot;</highlight><highlight class="normal">)))<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>offsets_to_indices_kernel(</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>const<sp/>offsets_t*<sp/>offsets,<sp/>index_t<sp/>v,<sp/>index_t*<sp/>indices)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tid{threadIdx.x};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctaStart{blockIdx.x};</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(index_t<sp/>j<sp/>=<sp/>ctaStart;<sp/>j<sp/>&lt;<sp/>v;<sp/>j<sp/>+=<sp/>gridDim.x)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_t<sp/>colStart<sp/>=<sp/>offsets[j];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_t<sp/>colEnd<sp/><sp/><sp/>=<sp/>offsets[j<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_t<sp/>rowNnz<sp/><sp/><sp/>=<sp/>colEnd<sp/>-<sp/>colStart;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(offsets_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rowNnz;<sp/>i<sp/>+=<sp/>blockDim.x)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((colStart<sp/>+<sp/>tid<sp/>+<sp/>i)<sp/>&lt;<sp/>colEnd)<sp/>{<sp/>indices[colStart<sp/>+<sp/>tid<sp/>+<sp/>i]<sp/>=<sp/>j;<sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>offsets_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>index_t&gt;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>offsets_to_indices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offsets_t*<sp/>offsets,<sp/>index_t<sp/>v,<sp/>index_t*<sp/>indices)</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>cudaStream_t<sp/>stream{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>index_t<sp/>nthreads<sp/>=<sp/>min(v,<sp/>(index_t)CUDA_MAX_KERNEL_THREADS);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>index_t<sp/>nblocks<sp/><sp/>=<sp/>min((v<sp/>+<sp/>nthreads<sp/>-<sp/>1)<sp/>/<sp/>nthreads,<sp/>(index_t)CUDA_MAX_BLOCKS);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>offsets_to_indices_kernel&lt;&lt;&lt;nblocks,<sp/>nthreads,<sp/>0,<sp/>stream&gt;&gt;&gt;(offsets,<sp/>v,<sp/>indices);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IndexType&gt;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sequence(IndexType<sp/>n,<sp/>IndexType*<sp/>vec,<sp/>IndexType<sp/>init<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>thrust::sequence(</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>thrust::device,<sp/>thrust::device_pointer_cast(vec),<sp/>thrust::device_pointer_cast(vec<sp/>+<sp/>n),<sp/>init);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DistType&gt;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_negative_val(DistType*<sp/>arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>custom<sp/>kernel<sp/>with<sp/>boolean<sp/>bitwise<sp/>reduce<sp/>may<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>faster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>rmm::cuda_stream_view<sp/>stream_view;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>DistType<sp/>result<sp/>=<sp/>*thrust::min_element(rmm::exec_policy(stream_view),</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(arr),</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::device_pointer_cast(arr<sp/>+<sp/>n));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>RAFT_CHECK_CUDA(stream_view.value());</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cugraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;eidecl_graph_utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/graph_utils.cuh"/>
  </compounddef>
</doxygen>
