<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespacecugraph" kind="namespace" language="C++">
    <compoundname>cugraph</compoundname>
    <innerclass refid="structcugraph_1_1cast__edge__op__bool__to__integer" prot="public">cugraph::cast_edge_op_bool_to_integer</innerclass>
    <innerclass refid="structcugraph_1_1centrality__algorithm__metadata__t" prot="public">cugraph::centrality_algorithm_metadata_t</innerclass>
    <innerclass refid="structcugraph_1_1compute__thrust__tuple__element__sizes" prot="public">cugraph::compute_thrust_tuple_element_sizes</innerclass>
    <innerclass refid="structcugraph_1_1dataframe__element" prot="public">cugraph::dataframe_element</innerclass>
    <innerclass refid="structcugraph_1_1dataframe__element_3_01rmm_1_1device__uvector_3_01T_01_4_01_4" prot="public">cugraph::dataframe_element&lt; rmm::device_uvector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1dataframe__element_3_01std_1_1tuple_3_01rmm_1_1device__uvector_3_01Ts_01_4_8_8_8_01_4_01_4" prot="public">cugraph::dataframe_element&lt; std::tuple&lt; rmm::device_uvector&lt; Ts &gt;... &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1Dendrogram" prot="public">cugraph::Dendrogram</innerclass>
    <innerclass refid="classcugraph_1_1edge__bucket__t" prot="public">cugraph::edge_bucket_t</innerclass>
    <innerclass refid="classcugraph_1_1edge__dst__dummy__property__t" prot="public">cugraph::edge_dst_dummy_property_t</innerclass>
    <innerclass refid="classcugraph_1_1edge__dst__property__t" prot="public">cugraph::edge_dst_property_t</innerclass>
    <innerclass refid="classcugraph_1_1edge__dummy__property__t" prot="public">cugraph::edge_dummy_property_t</innerclass>
    <innerclass refid="classcugraph_1_1edge__dummy__property__view__t" prot="public">cugraph::edge_dummy_property_view_t</innerclass>
    <innerclass refid="classcugraph_1_1edge__partition__device__view__t" prot="public">cugraph::edge_partition_device_view_t</innerclass>
    <innerclass refid="classcugraph_1_1edge__partition__device__view__t_3_01vertex__t_00_01edge__t_00_01multi__gpu_00_0450e55100a673b8636dc6f89e458ac60" prot="public">cugraph::edge_partition_device_view_t&lt; vertex_t, edge_t, multi_gpu, std::enable_if_t&lt; multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1edge__partition__device__view__t_3_01vertex__t_00_01edge__t_00_01multi__gpu_00_0cfa43e09a0397045baa42dbf7b50054c" prot="public">cugraph::edge_partition_device_view_t&lt; vertex_t, edge_t, multi_gpu, std::enable_if_t&lt;!multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1edge__partition__view__t" prot="public">cugraph::edge_partition_view_t</innerclass>
    <innerclass refid="classcugraph_1_1edge__partition__view__t_3_01vertex__t_00_01edge__t_00_01multi__gpu_00_01std_1_12ebcd9b4121a8101d17863857963225f" prot="public">cugraph::edge_partition_view_t&lt; vertex_t, edge_t, multi_gpu, std::enable_if_t&lt; multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1edge__partition__view__t_3_01vertex__t_00_01edge__t_00_01multi__gpu_00_01std_1_156a7bae56533332ebb42343fe1e6b0fc" prot="public">cugraph::edge_partition_view_t&lt; vertex_t, edge_t, multi_gpu, std::enable_if_t&lt;!multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1edge__property__t" prot="public">cugraph::edge_property_t</innerclass>
    <innerclass refid="classcugraph_1_1edge__property__view__t" prot="public">cugraph::edge_property_view_t</innerclass>
    <innerclass refid="classcugraph_1_1edge__src__dummy__property__t" prot="public">cugraph::edge_src_dummy_property_t</innerclass>
    <innerclass refid="classcugraph_1_1edge__src__property__t" prot="public">cugraph::edge_src_property_t</innerclass>
    <innerclass refid="structcugraph_1_1graph__meta__t" prot="public">cugraph::graph_meta_t</innerclass>
    <innerclass refid="structcugraph_1_1graph__meta__t_3_01vertex__t_00_01edge__t_00_01multi__gpu_00_01std_1_1enable__if__t_3_01multi__gpu_01_4_01_4" prot="public">cugraph::graph_meta_t&lt; vertex_t, edge_t, multi_gpu, std::enable_if_t&lt; multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1graph__meta__t_3_01vertex__t_00_01edge__t_00_01multi__gpu_00_01std_1_1enable__if__t_3_9multi__gpu_01_4_01_4" prot="public">cugraph::graph_meta_t&lt; vertex_t, edge_t, multi_gpu, std::enable_if_t&lt;!multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1graph__properties__t" prot="public">cugraph::graph_properties_t</innerclass>
    <innerclass refid="classcugraph_1_1graph__t" prot="public">cugraph::graph_t</innerclass>
    <innerclass refid="classcugraph_1_1graph__t_3_01vertex__t_00_01edge__t_00_01store__transposed_00_01multi__gpu_00_01dfcccecd903bfc95ca46b39a2cae56d4" prot="public">cugraph::graph_t&lt; vertex_t, edge_t, store_transposed, multi_gpu, std::enable_if_t&lt; multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1graph__t_3_01vertex__t_00_01edge__t_00_01store__transposed_00_01multi__gpu_00_0150e3c03972cda3a7f949fffeb23f2006" prot="public">cugraph::graph_t&lt; vertex_t, edge_t, store_transposed, multi_gpu, std::enable_if_t&lt;!multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1graph__view__meta__t" prot="public">cugraph::graph_view_meta_t</innerclass>
    <innerclass refid="structcugraph_1_1graph__view__meta__t_3_01vertex__t_00_01edge__t_00_01store__transposed_00_01mulbcb9f417f601254828e4dfb2b2d4dc74" prot="public">cugraph::graph_view_meta_t&lt; vertex_t, edge_t, store_transposed, multi_gpu, std::enable_if_t&lt; multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1graph__view__meta__t_3_01vertex__t_00_01edge__t_00_01store__transposed_00_01mule0ee595308765bc256a9f0224934bacb" prot="public">cugraph::graph_view_meta_t&lt; vertex_t, edge_t, store_transposed, multi_gpu, std::enable_if_t&lt;!multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1graph__view__t" prot="public">cugraph::graph_view_t</innerclass>
    <innerclass refid="classcugraph_1_1graph__view__t_3_01vertex__t_00_01edge__t_00_01store__transposed_00_01multi__gpubcf51fd386741a72ce55b1eda8d834da" prot="public">cugraph::graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu, std::enable_if_t&lt; multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1graph__view__t_3_01vertex__t_00_01edge__t_00_01store__transposed_00_01multi__gpu6ac2f1b308fca2a1d32dd5cb6251b6c7" prot="public">cugraph::graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu, std::enable_if_t&lt;!multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1invalid__component__id" prot="public">cugraph::invalid_component_id</innerclass>
    <innerclass refid="structcugraph_1_1invalid__edge__id" prot="public">cugraph::invalid_edge_id</innerclass>
    <innerclass refid="structcugraph_1_1invalid__idx" prot="public">cugraph::invalid_idx</innerclass>
    <innerclass refid="structcugraph_1_1invalid__idx_3_01T_00_01typename_01std_1_1enable__if__t_3_01std_1_1is__integrala86ae2d93d44d918b9efbc21d0fbe771" prot="public">cugraph::invalid_idx&lt; T, typename std::enable_if_t&lt; std::is_integral&lt; T &gt;::value &amp;&amp;std::is_signed&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1invalid__idx_3_01T_00_01typename_01std_1_1enable__if__t_3_01std_1_1is__integral45babf51909e2de1c13670b29d67cf51" prot="public">cugraph::invalid_idx&lt; T, typename std::enable_if_t&lt; std::is_integral&lt; T &gt;::value &amp;&amp;std::is_unsigned&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1invalid__vertex__id" prot="public">cugraph::invalid_vertex_id</innerclass>
    <innerclass refid="structcugraph_1_1is__arithmetic__or__thrust__tuple__of__arithmetic" prot="public">cugraph::is_arithmetic_or_thrust_tuple_of_arithmetic</innerclass>
    <innerclass refid="structcugraph_1_1is__arithmetic__or__thrust__tuple__of__arithmetic_3_01thrust_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">cugraph::is_arithmetic_or_thrust_tuple_of_arithmetic&lt; thrust::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1is__arithmetic__vector" prot="public">cugraph::is_arithmetic_vector</innerclass>
    <innerclass refid="structcugraph_1_1is__arithmetic__vector_3_01Vector_3_01T_01_4_00_01Vector_01_4" prot="public">cugraph::is_arithmetic_vector&lt; Vector&lt; T &gt;, Vector &gt;</innerclass>
    <innerclass refid="structcugraph_1_1is__candidate" prot="public">cugraph::is_candidate</innerclass>
    <innerclass refid="structcugraph_1_1is__candidate__legacy" prot="public">cugraph::is_candidate_legacy</innerclass>
    <innerclass refid="structcugraph_1_1is__one__of" prot="public">cugraph::is_one_of</innerclass>
    <innerclass refid="structcugraph_1_1is__one__of_3_01Src_01_4" prot="public">cugraph::is_one_of&lt; Src &gt;</innerclass>
    <innerclass refid="structcugraph_1_1is__one__of_3_01Src_00_01Head_00_01Tail_8_8_8_01_4" prot="public">cugraph::is_one_of&lt; Src, Head, Tail... &gt;</innerclass>
    <innerclass refid="structcugraph_1_1is__std__tuple" prot="public">cugraph::is_std_tuple</innerclass>
    <innerclass refid="structcugraph_1_1is__std__tuple_3_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">cugraph::is_std_tuple&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1is__std__tuple__of__arithmetic__vectors" prot="public">cugraph::is_std_tuple_of_arithmetic_vectors</innerclass>
    <innerclass refid="structcugraph_1_1is__std__tuple__of__arithmetic__vectors_3_01std_1_1tuple_3_01rmm_1_1device__uve20b2014a37bbf606a94d1d72033a0394" prot="public">cugraph::is_std_tuple_of_arithmetic_vectors&lt; std::tuple&lt; rmm::device_uvector&lt; Ts &gt;... &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1is__thrust__tuple" prot="public">cugraph::is_thrust_tuple</innerclass>
    <innerclass refid="structcugraph_1_1is__thrust__tuple_3_01thrust_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">cugraph::is_thrust_tuple&lt; thrust::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" prot="public">cugraph::is_thrust_tuple_of_arithmetic</innerclass>
    <innerclass refid="structcugraph_1_1is__thrust__tuple__of__arithmetic_3_01thrust_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">cugraph::is_thrust_tuple_of_arithmetic&lt; thrust::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1is__vertex__edge__combo" prot="public">cugraph::is_vertex_edge_combo</innerclass>
    <innerclass refid="structcugraph_1_1is__vertex__edge__combo__legacy" prot="public">cugraph::is_vertex_edge_combo_legacy</innerclass>
    <innerclass refid="classcugraph_1_1key__bucket__t" prot="public">cugraph::key_bucket_t</innerclass>
    <innerclass refid="classcugraph_1_1key__store__t" prot="public">cugraph::key_store_t</innerclass>
    <innerclass refid="classcugraph_1_1kv__store__t" prot="public">cugraph::kv_store_t</innerclass>
    <innerclass refid="structcugraph_1_1logic__error" prot="public">cugraph::logic_error</innerclass>
    <innerclass refid="classcugraph_1_1partition__manager" prot="public">cugraph::partition_manager</innerclass>
    <innerclass refid="classcugraph_1_1partition__t" prot="public">cugraph::partition_t</innerclass>
    <innerclass refid="structcugraph_1_1property__op" prot="public">cugraph::property_op</innerclass>
    <innerclass refid="structcugraph_1_1property__op_3_01thrust_1_1tuple_3_01Args_8_8_8_01_4_00_01Op_01_4" prot="public">cugraph::property_op&lt; thrust::tuple&lt; Args... &gt;, Op &gt;</innerclass>
    <innerclass refid="structcugraph_1_1renumber__meta__t" prot="public">cugraph::renumber_meta_t</innerclass>
    <innerclass refid="structcugraph_1_1renumber__meta__t_3_01vertex__t_00_01edge__t_00_01multi__gpu_00_01std_1_1enable80e2fb438bdc1a365ff3181665439243" prot="public">cugraph::renumber_meta_t&lt; vertex_t, edge_t, multi_gpu, std::enable_if_t&lt; multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1renumber__meta__t_3_01vertex__t_00_01edge__t_00_01multi__gpu_00_01std_1_1enable__if__t_3_9multi__gpu_01_4_01_4" prot="public">cugraph::renumber_meta_t&lt; vertex_t, edge_t, multi_gpu, std::enable_if_t&lt;!multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1sampling__params__t" prot="public">cugraph::sampling_params_t</innerclass>
    <innerclass refid="structcugraph_1_1thrust__tuple__get" prot="public">cugraph::thrust_tuple_get</innerclass>
    <innerclass refid="structcugraph_1_1thrust__tuple__size__or__one" prot="public">cugraph::thrust_tuple_size_or_one</innerclass>
    <innerclass refid="structcugraph_1_1thrust__tuple__size__or__one_3_01thrust_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">cugraph::thrust_tuple_size_or_one&lt; thrust::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structcugraph_1_1unroll__edge" prot="public">cugraph::unroll_edge</innerclass>
    <innerclass refid="classcugraph_1_1vertex__frontier__t" prot="public">cugraph::vertex_frontier_t</innerclass>
    <innerclass refid="classcugraph_1_1vertex__partition__device__view__t" prot="public">cugraph::vertex_partition_device_view_t</innerclass>
    <innerclass refid="classcugraph_1_1vertex__partition__device__view__t_3_01vertex__t_00_01multi__gpu_00_01std_1_1ena852dd6e9071ecf96345ff549a9b20238" prot="public">cugraph::vertex_partition_device_view_t&lt; vertex_t, multi_gpu, std::enable_if_t&lt; multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1vertex__partition__device__view__t_3_01vertex__t_00_01multi__gpu_00_01std_1_1enaafe258083c73f09613bba6173b275a13" prot="public">cugraph::vertex_partition_device_view_t&lt; vertex_t, multi_gpu, std::enable_if_t&lt;!multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1vertex__partition__view__t" prot="public">cugraph::vertex_partition_view_t</innerclass>
    <innerclass refid="classcugraph_1_1vertex__partition__view__t_3_01vertex__t_00_01multi__gpu_00_01std_1_1enable__if__t_3_01multi__gpu_01_4_01_4" prot="public">cugraph::vertex_partition_view_t&lt; vertex_t, multi_gpu, std::enable_if_t&lt; multi_gpu &gt; &gt;</innerclass>
    <innerclass refid="classcugraph_1_1vertex__partition__view__t_3_01vertex__t_00_01multi__gpu_00_01std_1_1enable__if__t_3_9multi__gpu_01_4_01_4" prot="public">cugraph::vertex_partition_view_t&lt; vertex_t, multi_gpu, std::enable_if_t&lt;!multi_gpu &gt; &gt;</innerclass>
    <innernamespace refid="namespacecugraph_1_1c__api">cugraph::c_api</innernamespace>
    <innernamespace refid="namespacecugraph_1_1dense">cugraph::dense</innernamespace>
    <innernamespace refid="namespacecugraph_1_1detail">cugraph::detail</innernamespace>
    <innernamespace refid="namespacecugraph_1_1ext__raft">cugraph::ext_raft</innernamespace>
    <innernamespace refid="namespacecugraph_1_1internals">cugraph::internals</innernamespace>
    <innernamespace refid="namespacecugraph_1_1legacy">cugraph::legacy</innernamespace>
    <innernamespace refid="namespacecugraph_1_1mtmg">cugraph::mtmg</innernamespace>
    <innernamespace refid="namespacecugraph_1_1reduce__op">cugraph::reduce_op</innernamespace>
    <innernamespace refid="namespacecugraph_1_1subgraph">cugraph::subgraph</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="algorithms_8hpp_1a365647c6c8b681e9af24661537ee6e27" prot="public" static="no" strong="yes">
        <type></type>
        <name>cugraph_cc_t</name>
        <qualifiedname>cugraph::cugraph_cc_t</qualifiedname>
        <enumvalue id="algorithms_8hpp_1a365647c6c8b681e9af24661537ee6e27a5882369885616cc6ba190202b140ee02" prot="public">
          <name>CUGRAPH_STRONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="algorithms_8hpp_1a365647c6c8b681e9af24661537ee6e27a436bdad1238dd6b8309bdbd0150c0e65" prot="public">
          <name>NUM_CONNECTIVITY_TYPES</name>
          <briefdescription>
<para><blockquote><para><zwj/>Strongly Connected Components </para>
</blockquote></para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" line="393" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" bodystart="393" bodyend="396"/>
      </memberdef>
      <memberdef kind="enum" id="algorithms_8hpp_1a879a8e6f854a6879c9c5846517e78c1f" prot="public" static="no" strong="yes">
        <type></type>
        <name>k_core_degree_type_t</name>
        <qualifiedname>cugraph::k_core_degree_type_t</qualifiedname>
        <enumvalue id="algorithms_8hpp_1a879a8e6f854a6879c9c5846517e78c1fac86ee0d9d7ed3e7b4fdbf486fa6c0ebb" prot="public">
          <name>IN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="algorithms_8hpp_1a879a8e6f854a6879c9c5846517e78c1faef373774188a51f80463f37b6bd9e83a" prot="public">
          <name>OUT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="algorithms_8hpp_1a879a8e6f854a6879c9c5846517e78c1fa0c93f5d83bbb636236e9610d01e4f3cd" prot="public">
          <name>INOUT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Identify whether the core number computation should be based off incoming edges, outgoing edges or both. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" line="1809" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" bodystart="1809" bodyend="1809"/>
      </memberdef>
      <memberdef kind="enum" id="algorithms_8hpp_1ab2ddd6a510dc29a8e80afaf526adb1d4" prot="public" static="no" strong="yes">
        <type></type>
        <name>prior_sources_behavior_t</name>
        <qualifiedname>cugraph::prior_sources_behavior_t</qualifiedname>
        <enumvalue id="algorithms_8hpp_1ab2ddd6a510dc29a8e80afaf526adb1d4a5b39c8b553c821e7cddc6da64b5bd2ee" prot="public">
          <name>DEFAULT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="algorithms_8hpp_1ab2ddd6a510dc29a8e80afaf526adb1d4a2f5894c742e8a38cdde978b9df5517ea" prot="public">
          <name>CARRY_OVER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="algorithms_8hpp_1ab2ddd6a510dc29a8e80afaf526adb1d4a4f34e973c167c2296f66c7986cb558f8" prot="public">
          <name>EXCLUDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Controls how we treat prior sources in sampling. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DEFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>Add vertices encounted while sampling to the new frontier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CARRY_OVER</parametername>
</parameternamelist>
<parameterdescription>
<para>In addition to newly encountered vertices, include vertices used as sources in any previous frontier in the new frontier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EXCLUDE</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter the new frontier to exclude any vertex that was used as a source in a previous frontier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" line="1884" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" bodystart="1884" bodyend="1884"/>
      </memberdef>
      <memberdef kind="enum" id="api__helpers_8hpp_1ab77986c1ff94f6dbdaa477da4a8151b0" prot="public" static="no" strong="yes">
        <type>int</type>
        <name>sampling_strategy_t</name>
        <qualifiedname>cugraph::sampling_strategy_t</qualifiedname>
        <enumvalue id="api__helpers_8hpp_1ab77986c1ff94f6dbdaa477da4a8151b0a891f35a29c3d51d02ffd42dd6dcc69b2" prot="public">
          <name>UNIFORM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="api__helpers_8hpp_1ab77986c1ff94f6dbdaa477da4a8151b0aed26ce46123c73c565ae3c78f3048b00" prot="public">
          <name>BIASED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="api__helpers_8hpp_1ab77986c1ff94f6dbdaa477da4a8151b0a25ac51e72b5779ac0efd19a7548b32b2" prot="public">
          <name>NODE2VEC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/api_helpers.hpp" line="26" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/api_helpers.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="graph__generators_8hpp_1a1ac5777ac96f1f7ecef0c3c2aee6d711" prot="public" static="no" strong="yes">
        <type></type>
        <name>generator_distribution_t</name>
        <qualifiedname>cugraph::generator_distribution_t</qualifiedname>
        <enumvalue id="graph__generators_8hpp_1a1ac5777ac96f1f7ecef0c3c2aee6d711a047763e4ed19657483afaa80a373c124" prot="public">
          <name>POWER_LAW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="graph__generators_8hpp_1a1ac5777ac96f1f7ecef0c3c2aee6d711a891f35a29c3d51d02ffd42dd6dcc69b2" prot="public">
          <name>UNIFORM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" line="177" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" bodystart="177" bodyend="177"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dataframe__buffer_8hpp_1a4ac71a8d9b71021c2b635459d092a667" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename DataframeType</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structcugraph_1_1dataframe__element" kindref="compound">dataframe_element</ref>&lt; DataframeType &gt;::type</type>
        <definition>using cugraph::dataframe_element_t =  typename dataframe_element&lt;DataframeType&gt;::type</definition>
        <argsstring></argsstring>
        <name>dataframe_element_t</name>
        <qualifiedname>cugraph::dataframe_element_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" line="87" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="betweenness__centrality__impl_8cuh_1ae2f7df5862e1cfb131d1660d28c92346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; weight_t &gt;</type>
        <definition>rmm::device_uvector&lt; weight_t &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; vertex_t const  &gt; &gt; vertices, bool const normalized=true, bool const include_endpoints=false, bool const do_expensive_check=false)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute betweenness centrality for a graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Betweenness centrality for a vertex is the sum of the fraction of all pairs shortest paths that pass through the vertex.</para>
<para>The current implementation does not support a weighted graph.</para>
<para><computeroutput>vertices</computeroutput> is optional. If it is not specified the algorithm will compute exact betweenness (compute betweenness using a traversal from all vertices).</para>
<para>If <computeroutput>vertices</computeroutput> is specified as a device_span, it will compute approximate betweenness using the provided <computeroutput>vertices</computeroutput> as the seeds of the traversals.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. Currently, edge_weight_view.has_value() should be false as we don&apos;t support weighted graphs, yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional, if specified this provides a device_span identifying a list of pre-selected vertices to use as seeds for the traversals for approximating betweenness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalized</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag indicating results should be normalized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>include_endpoints</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag indicating whether endpoints of a path should be counted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>device vector containing the centralities. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_impl.cuh" line="691" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_impl.cuh" bodystart="691" bodyend="720" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="343" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__impl_8cuh_1a83ba7adaca6ef859faa673a31e5a5b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt;, weight_t &gt;</type>
        <definition>edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt;, weight_t &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; vertex_t const  &gt; &gt; vertices, bool normalized=true, bool do_expensive_check=false)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalized</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute edge betweenness centrality for a graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Betweenness centrality of an edge is the sum of the fraction of all-pairs shortest paths that pass through this edge. The weight parameter is currenlty not supported</para>
<para><computeroutput>vertices</computeroutput> is optional. If it is not specified the algorithm will compute exact betweenness (compute betweenness using a traversal from all vertices).</para>
<para>If <computeroutput>vertices</computeroutput> is specified as a device_span, it will compute approximate betweenness using the provided <computeroutput>vertices</computeroutput> as the seeds of the traversals.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. Currently, edge_weight_view.has_value() should be false as we don&apos;t support weighted graphs, yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional, if specified this provides a device_span identifying a list of pre-selected vertices to use as seeds for the traversals for approximating betweenness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalized</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag indicating whether or not to normalize the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref> containing the centralities. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_impl.cuh" line="724" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_impl.cuh" bodystart="724" bodyend="750" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="385" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1accc83ba44c21045259132f7a5af79511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="22" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="22" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1a25bc94efada7e35e75e5e4a91bced323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="31" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="31" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1a6ef9a3ab5567d919c1d8d75cc9930e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="40" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="40" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1a3b1de2963f9573889d70b67fa0c35461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="49" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="49" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1ac293dca1f40ce2a78223185387d68d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="58" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="58" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1a18fa386f303203ab9c3242ca53f99812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="67" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="67" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1aa915eb67c7f0204f2854af8c9906a224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, float &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, float &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="77" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="77" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1a223c129ce688c4053dc13356b53fe4cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, float &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, float &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="86" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1a98ca72f958eb14ae832ccdb6d07ee4e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, float &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, float &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="95" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1ad6119e922a2ef096df84d5a8f3a52b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, double &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, double &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="104" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="104" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1a9afded49c5dbb2845894c82d555d5b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, double &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, double &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="113" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="113" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__mg_8cu_1a62ad449eadfa36df36beb0dc694492a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, double &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, double &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" line="122" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_mg.cu" declline="122" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1a35e7b0c204fa5d87ad96f6560ab64a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="22" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="22" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1a1f4066544b7b70e1f4d79eff3bea8934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="31" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="31" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1a0b9112d81253a096e3a34b6d8b99334d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="40" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="40" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1a38f13d43b88f8753f51972f1f28961bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="49" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="49" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1a4fe6bda9c9e76d4c77d61643b1019449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="58" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="58" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1ad61c92fe2987c531930e607cc426486d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::betweenness_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, bool const normalized, bool const include_endpoints, bool do_expensive_check)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>include_endpoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="67" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="67" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1a1dcb012fd85b69487127b6a6684c53ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, float &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, float &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="77" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="77" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1aec268e83e1f7badff1faf2ee2e247a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, float &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, float &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="86" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1a87ca5b3f47f56d652f39a2e52e8aa5c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, float &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, float &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="95" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1a0436583d6cb49947ba07923f3e203a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, double &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, double &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="104" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="104" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1a96db45b3b82dc5d1fd1ce5fa22c00662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, double &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, double &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="113" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="113" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="betweenness__centrality__sg_8cu_1aadcc74f9c35bdda7859d38021236b69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, double &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, double &gt; cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, bool const normalized, bool const do_expensive_check)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" line="122" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/betweenness_centrality_sg.cu" declline="122" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__impl_8cuh_1a9a9b63170629c24f624987aec778bebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; weight_t &gt;</type>
        <definition>rmm::device_uvector&lt; weight_t &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, true, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; weight_t const  &gt; &gt; initial_centralities, weight_t epsilon, size_t max_iterations=500, bool do_expensive_check=false)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, true, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; weight_t const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>weight_t</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
          <defval>500</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute Eigenvector Centrality scores. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes eigenvector centrality scores using the power method.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on erroneous input arguments or if fails to converge before <computeroutput>max_iterations</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == false, edge weights are assumed to be 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_centralities</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional device span containing initial values for the eigenvector centralities </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Error tolerance to check convergence. Convergence is assumed if the sum of the differences in eigenvector centrality values between two consecutive iterations is less than the number of vertices in the graph multiplied by <computeroutput>epsilon</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of power iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>device vector containing the centralities. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_impl.cuh" line="170" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_impl.cuh" bodystart="170" bodyend="197" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1371" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__mg_8cu_1ae288b41d977b4b13888624375cfdcb7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_centralities, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" line="22" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" declline="22" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__mg_8cu_1a99f7b81ba808df8b0e3bf8aba3687935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_centralities, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" line="31" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" declline="31" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__mg_8cu_1a25c467af0feb24d1623a4c255bbc95b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_centralities, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" line="40" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" declline="40" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__mg_8cu_1a547847463eec3010b488f11bc2beb3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_centralities, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" line="49" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" declline="49" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__mg_8cu_1ad41ae817be5b981c9557e3761a8255c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_centralities, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" line="58" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" declline="58" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__mg_8cu_1a6e5c6d98ea4c249c0890fc24995f7ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_centralities, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" line="67" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_mg.cu" declline="67" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__sg_8cu_1ab7abf2a3a14f81587dd1af51300680a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_centralities, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" line="22" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" declline="22" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__sg_8cu_1aa824b5880d216ca870d350e2f0507412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_centralities, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" line="31" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" declline="31" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__sg_8cu_1a41ab4953553b1a76122948631e54cbaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_centralities, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" line="40" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" declline="40" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__sg_8cu_1a2d6ad452ed28caef7036e3346807b3ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_centralities, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" line="49" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" declline="49" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__sg_8cu_1a15b8ccaced54bd403e01cda434b6b6e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_centralities, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" line="58" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" declline="58" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="eigenvector__centrality__sg_8cu_1a2b2ffc3c05ad1c5f7f53417d5e3ee20b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::eigenvector_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_centralities, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>eigenvector_centrality</name>
        <qualifiedname>cugraph::eigenvector_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" line="67" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/eigenvector_centrality_sg.cu" declline="67" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__impl_8cuh_1a30db199d991ff9cba4bb53101588af12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename result_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, true, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, result_t const  *betas, result_t *katz_centralities, result_t alpha, result_t beta, result_t epsilon, size_t max_iterations=500, bool has_initial_guess=false, bool normalize=false, bool do_expensive_check=false)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, true, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>result_t const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>result_t *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>result_t</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>result_t</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>result_t</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
          <defval>500</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute Katz Centrality scores. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes Katz Centrality scores.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on erroneous input arguments or if fails to converge before <computeroutput>max_iterations</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of Katz Centrality scores. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == false, edge weights are assumed to be 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>betas</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array holding the values to be added to each vertex&apos;s new Katz Centrality score in every iteration or <computeroutput>nullptr</computeroutput>. If set to <computeroutput>nullptr</computeroutput>, constant <computeroutput>beta</computeroutput> is used instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>katz_centralities</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output Katz Centrality score array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Katz Centrality attenuation factor. This should be smaller than the inverse of the maximum eigenvalue of the adjacency matrix of <computeroutput>graph</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant value to be added to each vertex&apos;s new Katz Centrality score in every iteration. Relevant only when <computeroutput>betas</computeroutput> is <computeroutput>nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Error tolerance to check convergence. Convergence is assumed if the sum of the differences in Katz Centrality values between two consecutive iterations is less than the number of vertices in the graph multiplied by <computeroutput>epsilon</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of Katz Centrality iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>has_initial_guess</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to <computeroutput>true</computeroutput>, values in the Katz Centrality output array (pointed by <computeroutput>katz_centralities</computeroutput>) is used as initial Katz Centrality values. If false, zeros are used as initial Katz Centrality values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to <computeroutput>true</computeroutput>, final Katz Centrality scores are normalized (the L2-norm of the returned Katz Centrality score array is 1.0) before returning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_impl.cuh" line="197" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_impl.cuh" bodystart="197" bodyend="222" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1458" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__mg_8cu_1a7146bc446da36e6d220c8ff67b135ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, float const *betas, float *katz_centralities, float alpha, float beta, float epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" line="22" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" declline="22" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__mg_8cu_1ab6319715699cb9a0eb0fa53cdb55f455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, double const *betas, double *katz_centralities, double alpha, double beta, double epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" line="36" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" declline="36" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__mg_8cu_1ae52fc1085802d6c60c0907dccab58205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, float const *betas, float *katz_centralities, float alpha, float beta, float epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" line="50" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" declline="50" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__mg_8cu_1a43dada07d8830d2b4fd40033d65b246f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, double const *betas, double *katz_centralities, double alpha, double beta, double epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" line="64" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" declline="64" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__mg_8cu_1a2f8d13bd9a9fe1eb1dcea389c3cc69d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, float const *betas, float *katz_centralities, float alpha, float beta, float epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" line="78" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" declline="78" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__mg_8cu_1a4ff82b9a677439f59b7c644c0505359f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, double const *betas, double *katz_centralities, double alpha, double beta, double epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" line="92" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_mg.cu" declline="92" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__sg_8cu_1ace0a5d19750d4cd16f56cc80ccfb3a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, float const *betas, float *katz_centralities, float alpha, float beta, float epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" line="22" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" declline="22" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__sg_8cu_1afe1c585ca2d4e29ab9d46c911e5da702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, double const *betas, double *katz_centralities, double alpha, double beta, double epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" line="36" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" declline="36" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__sg_8cu_1ac661dd4be9662bbba22019c7f3d16e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, float const *betas, float *katz_centralities, float alpha, float beta, float epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" line="50" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" declline="50" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__sg_8cu_1ac9fd0f0cf92accc1f55711fa005bdfd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, double const *betas, double *katz_centralities, double alpha, double beta, double epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" line="64" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" declline="64" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__sg_8cu_1aa5bd23dffee913722835eafd26960600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, float const *betas, float *katz_centralities, float alpha, float beta, float epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" line="78" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" declline="78" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="katz__centrality__sg_8cu_1a6906e2a12e3e653011d0564eab8aab98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::katz_centrality</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, double const *betas, double *katz_centralities, double alpha, double beta, double epsilon, size_t max_iterations, bool has_initial_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>katz_centrality</name>
        <qualifiedname>cugraph::katz_centrality</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double const *</type>
          <declname>betas</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>katz_centralities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" line="92" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/centrality/katz_centrality_sg.cu" declline="92" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__impl_8cuh_1a5ef26198ef2967bb0c8673e77155ff3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, weight_t &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, weight_t &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view, edge_property_view_t&lt; edge_t, weight_t const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_impl.cuh" line="384" column="12" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_impl.cuh" bodystart="384" bodyend="390" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2411" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__mg_8cu_1a55525ac696dee8381c1ee723d6303967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, float &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" line="20" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" declline="20" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__mg_8cu_1a8371441fb95dda6034208b2e201203d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, double &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" line="25" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" declline="25" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__mg_8cu_1ae7253818b90a62a2fa991b45216b93e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, float &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" line="30" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" declline="30" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__mg_8cu_1a568552572b7f36727c237103e86b1812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, float &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" line="35" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" declline="35" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__mg_8cu_1a56b97ae3a51d4c9c7d023e50d739dac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, double &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" line="40" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" declline="40" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__mg_8cu_1a3f03b7ab80df0fdc152ede192ef23321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, double &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" line="45" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_mg.cu" declline="45" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__sg_8cu_1a16643bb4ef99102810fef2d7615abb18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, float &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" line="20" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" declline="20" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__sg_8cu_1ae2c5c6df002d60880672134023344d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, double &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" line="25" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" declline="25" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__sg_8cu_1ac6b43e9ce86783456cda37e843a94877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, float &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" line="30" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" declline="30" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__sg_8cu_1aae6fe43359ec172267657d8a13eab805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, float &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" line="35" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" declline="35" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__sg_8cu_1ae7eba3b9d93a3d490ed540092fcb14e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, double &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" line="40" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" declline="40" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="approx__weighted__matching__sg_8cu_1ad142c581565674f29253068306786907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, double &gt; cugraph::approximate_weighted_matching</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>approximate_weighted_matching</name>
        <qualifiedname>cugraph::approximate_weighted_matching</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" line="45" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/approx_weighted_matching_sg.cu" declline="45" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__impl_8cuh_1aa44311cfe3308d43b094cbb94b70d497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, size_t, weight_t &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, size_t, weight_t &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const  &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, weight_t min_weight, size_t ensemble_size, size_t max_level=100, weight_t threshold=weight_t{1e-7}, weight_t resolution=weight_t{1})</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>weight_t</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>weight_t</type>
          <declname>threshold</declname>
          <defval>weight_t{1e-7}</defval>
        </param>
        <param>
          <type>weight_t</type>
          <declname>resolution</declname>
          <defval>weight_t{1}</defval>
        </param>
        <briefdescription>
<para>Computes the ecg clustering of the given graph. </para>
        </briefdescription>
        <detaileddescription>
<para>ECG runs truncated Louvain on an ensemble of permutations of the input graph, then uses the ensemble partitions to determine weights for the input graph. The final result is found by running full Louvain on the input graph using the determined weights. See <ulink url="https://arxiv.org/abs/1809.05578">https://arxiv.org/abs/1809.05578</ulink> for further information.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The RngState instance holding pseudo-random number generator state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Input graph view object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>View object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">min_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum edge weight to use in the final call of the clustering algorithm if an edge does not appear in any of the ensemble runs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ensemble_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The ensemble size parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_level</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) maximum number of levels to run (default 100) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) threshold for convergence at each level (default 1e-7) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The value of the resolution parameter to use. Called gamma in the modularity formula, this changes the size of the communities. Higher resolutions lead to more smaller communities, lower resolutions lead to fewer larger communities. (default 1)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a tuple containing: 1) Device vector containing clustering result 2) number of levels of the returned clustering 3) modularity of the returned clustering </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_impl.cuh" line="155" column="12" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_impl.cuh" bodystart="155" bodyend="175" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="800" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ecg__mg_8cu_1ae3c24bc79d55f635b1cffdf82edb61db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, float &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, float min_weight, size_t ensemble_size, size_t max_level, float threshold, float resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" line="20" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" declline="20" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__mg_8cu_1a0d660bcfda3c4d35082765a895f07c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, float &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, float min_weight, size_t ensemble_size, size_t max_level, float threshold, float resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" line="32" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" declline="32" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__mg_8cu_1a9b3961944c29bb4e9d3bd412886ecbf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, size_t, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, size_t, float &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, float min_weight, size_t ensemble_size, size_t max_level, float threshold, float resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" line="44" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" declline="44" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__mg_8cu_1a8254dc22d7af9df35ea2ed19df9bcf2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, double &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, double min_weight, size_t ensemble_size, size_t max_level, double threshold, double resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" line="56" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" declline="56" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__mg_8cu_1ac37d7c83c0404044c5d923c46aab1dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, double &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, double min_weight, size_t ensemble_size, size_t max_level, double threshold, double resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" line="68" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" declline="68" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__mg_8cu_1ad329ae8837c352397983c38fc0cec8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, size_t, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, size_t, double &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, double min_weight, size_t ensemble_size, size_t max_level, double threshold, double resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" line="80" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_mg.cu" declline="80" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__sg_8cu_1a5461e48e0b008ffbfe097692bacff397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, float &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, float min_weight, size_t ensemble_size, size_t max_level, float threshold, float resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" line="20" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" declline="20" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__sg_8cu_1ad74a0009914ccf4da567025b4f1ecbc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, float &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, float min_weight, size_t ensemble_size, size_t max_level, float threshold, float resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" line="32" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" declline="32" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__sg_8cu_1a5ca6a3468a38172e885fa3f3f81a74bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, size_t, float &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, size_t, float &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, float min_weight, size_t ensemble_size, size_t max_level, float threshold, float resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" line="44" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" declline="44" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__sg_8cu_1afc18015dd8090be488dc546eda140574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, double &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, double min_weight, size_t ensemble_size, size_t max_level, double threshold, double resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" line="56" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" declline="56" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__sg_8cu_1a09da7e1f2f2f04855826aaa94683ca42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, size_t, double &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, double min_weight, size_t ensemble_size, size_t max_level, double threshold, double resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" line="68" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" declline="68" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ecg__sg_8cu_1a82a72c6c0655b780dec64b60b69522a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, size_t, double &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, size_t, double &gt; cugraph::ecg</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, double min_weight, size_t ensemble_size, size_t max_level, double threshold, double resolution)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" line="80" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/ecg_sg.cu" declline="80" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="edge__triangle__count__impl_8cuh_1a0df416ec26d6ab59a224ce9a1385fc7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt;, edge_t &gt;</type>
        <definition>edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt;, edge_t &gt; cugraph::edge_triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view)</argsstring>
        <name>edge_triangle_count</name>
        <qualifiedname>cugraph::edge_triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_impl.cuh" line="367" column="17" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_impl.cuh" bodystart="367" bodyend="371" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2025" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="edge__triangle__count__mg_8cu_1a03ab94013968726b06a644f735eb4505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, int32_t &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, int32_t &gt; cugraph::edge_triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, cugraph::graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view)</argsstring>
        <name>edge_triangle_count</name>
        <qualifiedname>cugraph::edge_triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_mg.cu" line="21" column="26" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_mg.cu" declline="21" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="edge__triangle__count__mg_8cu_1a13d14415dd564b985d36b15b9d6cdb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, int64_t &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, int64_t &gt; cugraph::edge_triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, cugraph::graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view)</argsstring>
        <name>edge_triangle_count</name>
        <qualifiedname>cugraph::edge_triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_mg.cu" line="25" column="26" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_mg.cu" declline="25" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="edge__triangle__count__mg_8cu_1aaddce3ca9ad15cb812a6c31107c19536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, int64_t &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, int64_t &gt; cugraph::edge_triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, cugraph::graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view)</argsstring>
        <name>edge_triangle_count</name>
        <qualifiedname>cugraph::edge_triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_mg.cu" line="29" column="26" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_mg.cu" declline="29" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="edge__triangle__count__sg_8cu_1a7406ad828abd28c16db031ef2f30c5c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, int32_t &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, int32_t &gt; cugraph::edge_triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, cugraph::graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view)</argsstring>
        <name>edge_triangle_count</name>
        <qualifiedname>cugraph::edge_triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_sg.cu" line="21" column="26" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_sg.cu" declline="21" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="edge__triangle__count__sg_8cu_1acc3468c911d90d0bbf3aa5cc2516c3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, int64_t &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, int64_t &gt; cugraph::edge_triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, cugraph::graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view)</argsstring>
        <name>edge_triangle_count</name>
        <qualifiedname>cugraph::edge_triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_sg.cu" line="25" column="26" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_sg.cu" declline="25" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="edge__triangle__count__sg_8cu_1a7e3df2900666b6f84b6cfc967b5db853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, int64_t &gt;</type>
        <definition>template edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, int64_t &gt; cugraph::edge_triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, cugraph::graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view)</argsstring>
        <name>edge_triangle_count</name>
        <qualifiedname>cugraph::edge_triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_sg.cu" line="29" column="26" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/edge_triangle_count_sg.cu" declline="29" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="egonet__impl_8cuh_1ade2504d1dba94e0d95c7b87d2d0a23d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, vertex_t *source_vertex, vertex_t n_subgraphs, vertex_t radius)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>n_subgraphs</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>returns induced EgoNet subgraph(s) of neighbors centered at nodes in source_vertex within a given radius. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This algorithm will be deprecated to replaced by the new version that uses the raft::device_span.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. Must have at least one worker stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object of, we extract induced egonet subgraphs from <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to egonet center vertices (size == <computeroutput>n_subgraphs</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_subgraphs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of induced EgoNet subgraphs to extract (ie. number of elements in <computeroutput>source_vertex</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Include all neighbors of distance &lt;= radius from <computeroutput>source_vertex</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Quadraplet of edge source vertices, edge destination vertices, edge weights (if <computeroutput>edge_weight_view.has_value()</computeroutput> == true), and edge offsets for each induced EgoNet subgraph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_impl.cuh" line="224" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_impl.cuh" bodystart="224" bodyend="246" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1499" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__impl_8cuh_1a5ca65110ddfce2e3fa58a51afedda9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, raft::device_span&lt; vertex_t const  &gt; source_vertices, vertex_t radius, bool do_expensive_check=false)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>source_vertices</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>returns induced EgoNet subgraph(s) of neighbors centered at nodes in source_vertex within a given radius. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. Must have at least one worker stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object of, we extract induced egonet subgraphs from <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to egonet center vertices (size == <computeroutput>n_subgraphs</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_subgraphs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of induced EgoNet subgraphs to extract (ie. number of elements in <computeroutput>source_vertex</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Include all neighbors of distance &lt;= radius from <computeroutput>source_vertex</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;weight_t&gt;, rmm::device_uvector&lt;size_t&gt;&gt; Quadraplet of edge source vertices, edge destination vertices, edge weights, and edge offsets for each induced EgoNet subgraph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_impl.cuh" line="253" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_impl.cuh" bodystart="253" bodyend="266" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1532" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1a95bca4c81692a33cee29d57bd2414b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt;, int32_t *, int32_t, int32_t)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1a8d86f8c7a9ff70d2a5f31a37b1683823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int32_t *, int32_t, int32_t)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="38" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1ab918c6b91a19051031032bdba59286f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int64_t *, int64_t, int64_t)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="49" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1afbf73ff2ed77a917e6183f301088a1b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt;, raft::device_span&lt; int32_t const &gt; source_vertex, int32_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="60" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="60" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1a9cec45d00283817c68e37b13576e447e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, raft::device_span&lt; int32_t const &gt; source_vertex, int32_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="71" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="71" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1ab43e9712dc369d672da10ed9fbb2273d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, raft::device_span&lt; int64_t const &gt; source_vertex, int64_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="82" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="82" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1a509fd9943e864c6b47c7e618fb2dee4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt;, int32_t *, int32_t, int32_t)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="95" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1a1a85d4cfa320c8968ee5b8b3492ceb79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int32_t *, int32_t, int32_t)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="106" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="106" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1ae048956fee022fd283b626482d17009b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int64_t *, int64_t, int64_t)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="117" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="117" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1aa9e9c38e78a7ceac35ea4a46402ec5cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt;, raft::device_span&lt; int32_t const &gt; source_vertex, int32_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="128" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="128" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1a7f5b989013fa3bfc0ea3b9a59b46e0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, raft::device_span&lt; int32_t const &gt; source_vertex, int32_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="139" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="139" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__mg_8cu_1a69e5aeddd7aeece1ee643036dd8b3039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, raft::device_span&lt; int64_t const &gt; source_vertex, int64_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" line="150" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_mg.cu" declline="150" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1a1a675419ac3a6e4f9cd615609e1443ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt;, int32_t *source_vertex, int32_t n_subgraphs, int32_t radius)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>n_subgraphs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1affd4051e7b60c1e0dff253b87a8609fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int32_t *source_vertex, int32_t n_subgraphs, int32_t radius)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>n_subgraphs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="37" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1a4fe4196f7ae254c1e6f77c4329fc4b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int64_t *source_vertex, int64_t n_subgraphs, int64_t radius)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>n_subgraphs</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="48" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1aac6af77af463f54c2a26648ea6f476a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt;, raft::device_span&lt; int32_t const &gt; source_vertex, int32_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="59" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1a09ed48c4a14b62620dfc4ac1c529324b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, raft::device_span&lt; int32_t const &gt; source_vertex, int32_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="70" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1a0b9dce11f42e2fbf41d11017fa7c5b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, raft::device_span&lt; int64_t const &gt; source_vertex, int64_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="81" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1a0a942d4dc03c16362992d628b46dea8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt;, int32_t *source_vertex, int32_t n_subgraphs, int32_t radius)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>n_subgraphs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="94" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="94" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1a458bce486c3284b6579f66ccb0bc4325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int32_t *source_vertex, int32_t n_subgraphs, int32_t radius)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>n_subgraphs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="105" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="105" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1a35a0527e1ce52381aa64d02353b7a1d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int64_t *source_vertex, int64_t n_subgraphs, int64_t radius)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>n_subgraphs</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="116" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="116" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1a0523f621c1a786cfb59aeacf35589e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt;, raft::device_span&lt; int32_t const &gt; source_vertex, int32_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="127" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="127" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1af84aca3c898282265e13e5b3fa0dce00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, raft::device_span&lt; int32_t const &gt; source_vertex, int32_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="138" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="138" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="egonet__sg_8cu_1aaf92a83c18d3cb0b5bf275a075ad6207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_ego</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, raft::device_span&lt; int64_t const &gt; source_vertex, int64_t radius, bool do_expensive_check)</argsstring>
        <name>extract_ego</name>
        <qualifiedname>cugraph::extract_ego</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" line="149" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/egonet_sg.cu" declline="149" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="flatten__dendrogram_8hpp_1a8055199c8d2f78e6c757e671a1b2f568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::partition_at_level</definition>
        <argsstring>(raft::handle_t const &amp;handle, Dendrogram&lt; vertex_t &gt; const &amp;dendrogram, vertex_t const *d_vertex_ids, vertex_t *d_partition, size_t level)</argsstring>
        <name>partition_at_level</name>
        <qualifiedname>cugraph::partition_at_level</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; vertex_t &gt; const &amp;</type>
          <declname>dendrogram</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>d_vertex_ids</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>d_partition</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/flatten_dendrogram.hpp" line="31" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/flatten_dendrogram.hpp" bodystart="31" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="k__truss__impl_8cuh_1afc21cf4711d97b2f872cad07456e40eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; vertex_t &gt;</type>
        <definition>rmm::device_uvector&lt; vertex_t &gt; cugraph::compute_prefix_sum</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::device_span&lt; vertex_t const &gt; sorted_vertices, raft::device_span&lt; vertex_t const &gt; query_vertices)</argsstring>
        <name>compute_prefix_sum</name>
        <qualifiedname>cugraph::compute_prefix_sum</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>sorted_vertices</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>query_vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_impl.cuh" line="81" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_impl.cuh" bodystart="81" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="k__truss__impl_8cuh_1a8d0f5bb6141513c3fa26dc7603569493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename EdgeIterator</type>
          </param>
        </templateparamlist>
        <type>edge_t</type>
        <definition>edge_t cugraph::remove_overcompensating_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, size_t buffer_size, EdgeIterator potential_closing_or_incoming_edges, EdgeIterator incoming_or_potential_closing_edges, raft::device_span&lt; vertex_t const &gt; invalid_edgelist_srcs, raft::device_span&lt; vertex_t const &gt; invalid_edgelist_dsts)</argsstring>
        <name>remove_overcompensating_edges</name>
        <qualifiedname>cugraph::remove_overcompensating_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type>EdgeIterator</type>
          <declname>potential_closing_or_incoming_edges</declname>
        </param>
        <param>
          <type>EdgeIterator</type>
          <declname>incoming_or_potential_closing_edges</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>invalid_edgelist_srcs</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>invalid_edgelist_dsts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_impl.cuh" line="112" column="8" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_impl.cuh" bodystart="112" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="k__truss__impl_8cuh_1a629468326cd91ddc32646d11dc3abb6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>is_q_r_edge</declname>
            <defname>is_q_r_edge</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::unroll_p_r_or_q_r_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, false &gt; &amp;graph_view, size_t num_invalid_edges, size_t num_valid_edges, raft::device_span&lt; vertex_t const &gt; edgelist_srcs, raft::device_span&lt; vertex_t const &gt; edgelist_dsts, raft::device_span&lt; edge_t &gt; num_triangles)</argsstring>
        <name>unroll_p_r_or_q_r_edges</name>
        <qualifiedname>cugraph::unroll_p_r_or_q_r_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, false &gt; &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_invalid_edges</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_valid_edges</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>raft::device_span&lt; edge_t &gt;</type>
          <declname>num_triangles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_impl.cuh" line="148" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_impl.cuh" bodystart="148" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="k__truss__impl_8cuh_1a914ba1d5675a7ee5a24b61721e4d8ba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt; cugraph::k_truss</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const * &gt; &gt; edge_weight_view, edge_t k, bool do_expensive_check)</argsstring>
        <name>k_truss</name>
        <qualifiedname>cugraph::k_truss</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>edge_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_impl.cuh" line="465" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_impl.cuh" bodystart="465" bodyend="936" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2048" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__truss__sg_8cu_1a11d12a8f6926d7e59c2eded8fd5d6fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::k_truss</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, int32_t k, bool do_expensive_check)</argsstring>
        <name>k_truss</name>
        <qualifiedname>cugraph::k_truss</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__truss__sg_8cu_1ae0d7653a7a0383242fc7c1fd790b0ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::k_truss</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, int32_t k, bool do_expensive_check)</argsstring>
        <name>k_truss</name>
        <qualifiedname>cugraph::k_truss</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" line="35" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" declline="35" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__truss__sg_8cu_1ac03b76f6e4fcd9a3e5b09e4f38c34556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::k_truss</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int64_t k, bool do_expensive_check)</argsstring>
        <name>k_truss</name>
        <qualifiedname>cugraph::k_truss</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" line="44" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__truss__sg_8cu_1a0923f5c116a105fb0eb17a935d0aee9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::k_truss</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int64_t k, bool do_expensive_check)</argsstring>
        <name>k_truss</name>
        <qualifiedname>cugraph::k_truss</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" line="53" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__truss__sg_8cu_1a9165eae48dff8a3df4af9810824c574e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::k_truss</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int64_t k, bool do_expensive_check)</argsstring>
        <name>k_truss</name>
        <qualifiedname>cugraph::k_truss</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" line="62" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__truss__sg_8cu_1a2d4fa8017b5cd32316b6790b1882ec3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::k_truss</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int64_t k, bool do_expensive_check)</argsstring>
        <name>k_truss</name>
        <qualifiedname>cugraph::k_truss</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" line="71" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/k_truss_sg.cu" declline="71" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ecg_8cu_1aa3062d0437821f23a9b1a5b37814bfb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::ecg</definition>
        <argsstring>(raft::handle_t const  &amp;handle, legacy::GraphCSRView&lt; vertex_t, edge_t, weight_t &gt; const  &amp;graph, weight_t min_weight, vertex_t ensemble_size, vertex_t *clustering)</argsstring>
        <name>ecg</name>
        <qualifiedname>cugraph::ecg</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; vertex_t, edge_t, weight_t &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>weight_t</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>clustering</declname>
        </param>
        <briefdescription>
<para>Computes the ecg clustering of the given graph. </para>
        </briefdescription>
        <detaileddescription>
<para>ECG runs truncated Louvain on an ensemble of permutations of the input graph, then uses the ensemble partitions to determine weights for the input graph. The final result is found by running full Louvain on the input graph using the determined weights. See <ulink url="https://arxiv.org/abs/1809.05578">https://arxiv.org/abs/1809.05578</ulink> for further information.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported values : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph_coo</parametername>
</parameternamelist>
<parameterdescription>
<para>input graph object (COO) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph_csr</parametername>
</parameternamelist>
<parameterdescription>
<para>input graph object (CSR) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">min_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum weight parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ensemble_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The ensemble size parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">clustering</parametername>
</parameternamelist>
<parameterdescription>
<para>A device pointer to array where the partitioning should be written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/ecg.cu" line="140" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/ecg.cu" bodystart="140" bodyend="205" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="756" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ecg_8cu_1ac47741a9abecb3af36478494699166d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::ecg&lt; int32_t, int32_t, float &gt;</definition>
        <argsstring>(raft::handle_t const &amp;, legacy::GraphCSRView&lt; int32_t, int32_t, float &gt; const &amp;graph, float min_weight, int32_t ensemble_size, int32_t *clustering)</argsstring>
        <name>ecg&lt; int32_t, int32_t, float &gt;</name>
        <qualifiedname>cugraph::ecg&lt; int32_t, int32_t, float &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int32_t, int32_t, float &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>clustering</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/ecg.cu" line="208" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/ecg.cu" declline="208" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ecg_8cu_1a5863c0f16392d46971139c83924df668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::ecg&lt; int32_t, int32_t, double &gt;</definition>
        <argsstring>(raft::handle_t const &amp;, legacy::GraphCSRView&lt; int32_t, int32_t, double &gt; const &amp;graph, double min_weight, int32_t ensemble_size, int32_t *clustering)</argsstring>
        <name>ecg&lt; int32_t, int32_t, double &gt;</name>
        <qualifiedname>cugraph::ecg&lt; int32_t, int32_t, double &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int32_t, int32_t, double &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_weight</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>ensemble_size</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>clustering</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/ecg.cu" line="214" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/ecg.cu" declline="214" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="louvain_8cu_1a610d89dd083a3935dee4a9a4a26f62d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; size_t, weight_t &gt;</type>
        <definition>std::pair&lt; size_t, weight_t &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;handle, legacy::GraphCSRView&lt; vertex_t, edge_t, weight_t &gt; const &amp;graph_view, vertex_t *clustering, size_t max_level, weight_t resolution)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; vertex_t, edge_t, weight_t &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>clustering</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>weight_t</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/louvain.cu" line="71" column="11" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/louvain.cu" bodystart="71" bodyend="89" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="548" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="louvain_8cu_1a261fbbbd458dffb8a0d7d992f5b90779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, legacy::GraphCSRView&lt; int32_t, int32_t, float &gt; const &amp;, int32_t *, size_t, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int32_t, int32_t, float &gt; const &amp;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/louvain.cu" line="92" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/louvain.cu" declline="92" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain_8cu_1a5421c4a36507701f68c6382a10a8f84f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, legacy::GraphCSRView&lt; int32_t, int32_t, double &gt; const &amp;, int32_t *, size_t, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int32_t, int32_t, double &gt; const &amp;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/louvain.cu" line="97" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/legacy/louvain.cu" declline="97" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__impl_8cuh_1a03379c2d2e8ec426e98cd4b35403b475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; vertex_t &gt; &gt;, weight_t &gt;</type>
        <definition>std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; vertex_t &gt; &gt;, weight_t &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const  &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, size_t max_level=100, weight_t resolution=weight_t{1}, weight_t theta=weight_t{1})</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>weight_t</type>
          <declname>resolution</declname>
          <defval>weight_t{1}</defval>
        </param>
        <param>
          <type>weight_t</type>
          <declname>theta</declname>
          <defval>weight_t{1}</defval>
        </param>
        <briefdescription>
<para>Leiden implementation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute a clustering of the graph by maximizing modularity using the Leiden improvements to the Louvain method.</para>
<para>Computed using the Leiden method described in:</para>
<para>Traag, V. A., Waltman, L., &amp; van Eck, N. J. (2019). From Louvain to Leiden: guaranteeing well-connected communities. Scientific reports, 9(1), 5233. doi: 10.1038/s41598-019-41695-z</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported values : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The RngState instance holding pseudo-random number generator state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == false, edge weights are assumed to be 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_level</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) maximum number of levels to run (default 100) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The value of the resolution parameter to use. Called gamma in the modularity formula, this changes the size of the communities. Higher resolutions lead to more smaller communities, lower resolutions lead to fewer larger communities. (default 1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">theta</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The value of the parameter to scale modularity gain in Leiden refinement phase. It is used to compute the probability of joining a random leiden community. Called theta in the Leiden algorithm.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair containing: 1) unique pointer to dendrogram 2) modularity of the returned clustering </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_impl.cuh" line="655" column="11" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_impl.cuh" bodystart="655" bodyend="668" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="668" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="leiden__impl_8cuh_1a5af74e65c7a4d22df0fdc17aef298956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::flatten_leiden_dendrogram</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view, Dendrogram&lt; vertex_t &gt; const &amp;dendrogram, vertex_t *clustering)</argsstring>
        <name>flatten_leiden_dendrogram</name>
        <qualifiedname>cugraph::flatten_leiden_dendrogram</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; vertex_t &gt; const &amp;</type>
          <declname>dendrogram</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>clustering</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_impl.cuh" line="671" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_impl.cuh" bodystart="671" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="leiden__impl_8cuh_1a17c7b709aac850b1413d8f32b2e37992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; size_t, weight_t &gt;</type>
        <definition>std::pair&lt; size_t, weight_t &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const  &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, vertex_t *clustering, size_t max_level=100, weight_t resolution=weight_t{1}, weight_t theta=weight_t{1})</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>clustering</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>weight_t</type>
          <declname>resolution</declname>
          <defval>weight_t{1}</defval>
        </param>
        <param>
          <type>weight_t</type>
          <declname>theta</declname>
          <defval>weight_t{1}</defval>
        </param>
        <briefdescription>
<para>Leiden implementation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute a clustering of the graph by maximizing modularity using the Leiden improvements to the Louvain method.</para>
<para>Computed using the Leiden method described in:</para>
<para>Traag, V. A., Waltman, L., &amp; van Eck, N. J. (2019). From Louvain to Leiden: guaranteeing well-connected communities. Scientific reports, 9(1), 5233. doi: 10.1038/s41598-019-41695-z</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported values : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The RngState instance holding pseudo-random number generator state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == false, edge weights are assumed to be 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_level</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) maximum number of levels to run (default 100) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The value of the resolution parameter to use. Called gamma in the modularity formula, this changes the size of the communities. Higher resolutions lead to more smaller communities, lower resolutions lead to fewer larger communities. (default 1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">theta</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The value of the parameter to scale modularity gain in Leiden refinement phase. It is used to compute the probability of joining a random leiden community. Called theta in the Leiden algorithm. communities. (default 1)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair containing: 1) number of levels of the returned clustering 2) modularity of the returned clustering </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_impl.cuh" line="682" column="11" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_impl.cuh" bodystart="682" bodyend="706" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="720" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1af2db3efefca35965704ceb25c0276f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, size_t max_level, float resolution, float theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="23" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="23" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1a673f64197822713e3966e1841fabe5dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, size_t max_level, float resolution, float theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="32" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="32" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1a18b8a2d6c5b02e393169d30881a5b321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int64_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int64_t &gt; &gt;, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, size_t max_level, float resolution, float theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="41" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="41" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1a4ab99b0a6fbe62136ac4becf0f1a6cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, size_t max_level, double resolution, double theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="50" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="50" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1a65a547a1ce37ba2d89b4ee979a157211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, size_t max_level, double resolution, double theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="59" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="59" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1a1a85a2a317e638e17628bc55d49dfc4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int64_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int64_t &gt; &gt;, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, size_t max_level, double resolution, double theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="68" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="68" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1ac5e1aa46dd120a21d666b31850fe15f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt;, int32_t *, size_t, float, float)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="77" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="77" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1aee5e3321a47f4cbcf5102dd19f0d3a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt;, int32_t *, size_t, double, double)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="85" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="85" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1a7498cff50cf08f6a6a3d8139d54db992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int32_t *, size_t, float, float)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="94" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="94" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1a15076c8ea6470f6ab8f6f3872e69503e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int32_t *, size_t, double, double)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="102" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="102" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1a62086ee99e0b6c1f286d22941796c270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int64_t *, size_t, float, float)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="111" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="111" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__mg_8cu_1a3436689658a2f0029ddcea2ffea8804b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int64_t *, size_t, double, double)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" line="119" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_mg.cu" declline="119" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1a2a630bdc9284b164ab2e22634af0f348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, size_t max_level, float resolution, float theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="23" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="23" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1a8b8246a6f1a618ec33b05c7fc36bb291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, size_t max_level, float resolution, float theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="32" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="32" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1ac30d2b0d246a05193b08d551dd33631b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int64_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int64_t &gt; &gt;, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, size_t max_level, float resolution, float theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>float</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="41" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="41" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1a06331baf1cc32ba1979e6e71f18ec2db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, size_t max_level, double resolution, double theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="50" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="50" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1a300da9b2108c9de658130e7256f30648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, size_t max_level, double resolution, double theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="59" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="59" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1abebd42bc2c421bc3e9ab9c171dd4b5a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int64_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int64_t &gt; &gt;, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, size_t max_level, double resolution, double theta)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="68" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="68" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1a7344d954101ec3009fabf72a1a3d2678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt;, int32_t *, size_t, float, float)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="77" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="77" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1a71e92cc85e3190a3fa3fc448d7ad155c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt;, int32_t *, size_t, double, double)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="85" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="85" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1ae79cb58856717f53aca26b1c0b9044bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int32_t *, size_t, float, float)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="94" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="94" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1ab6f585cb00fbc1da8b6805e35365ca23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int32_t *, size_t, double, double)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="102" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="102" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1a4b8127988bd5cb278189f21b5392369f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int64_t *, size_t, float, float)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="111" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="111" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="leiden__sg_8cu_1a8a34424ed42a2f10b301ffd3eda973d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::leiden</definition>
        <argsstring>(raft::handle_t const &amp;, raft::random::RngState &amp;, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int64_t *, size_t, double, double)</argsstring>
        <name>leiden</name>
        <qualifiedname>cugraph::leiden</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" line="119" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/leiden_sg.cu" declline="119" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__impl_8cuh_1ab89c1ee92d41b767d7a254c9a43b2d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; vertex_t &gt; &gt;, weight_t &gt;</type>
        <definition>std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; vertex_t &gt; &gt;, weight_t &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt; rng_state, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, size_t max_level=100, weight_t threshold=weight_t{1e-7}, weight_t resolution=weight_t{1})</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>weight_t</type>
          <declname>threshold</declname>
          <defval>weight_t{1e-7}</defval>
        </param>
        <param>
          <type>weight_t</type>
          <declname>resolution</declname>
          <defval>weight_t{1}</defval>
        </param>
        <briefdescription>
<para>Louvain implementation, returning dendrogram. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute a clustering of the graph by maximizing modularity</para>
<para>Computed using the Louvain method described in:</para>
<para>VD Blondel, J-L Guillaume, R Lambiotte and E Lefebvre: Fast unfolding of community hierarchies in large networks, J Stat Mech P10008 (2008), <ulink url="http://arxiv.org/abs/0803.0476">http://arxiv.org/abs/0803.0476</ulink></para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The RngState instance holding pseudo-random number generator state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Input graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If @pedge_weight_view.has_value() == false, edge weights are assumed to be 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_level</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) maximum number of levels to run (default 100) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) threshold for convergence at each level (default 1e-7) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The value of the resolution parameter to use. Called gamma in the modularity formula, this changes the size of the communities. Higher resolutions lead to more smaller communities, lower resolutions lead to fewer larger communities. (default 1) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair containing: 1) unique pointer to dendrogram 2) modularity of the returned clustering </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_impl.cuh" line="309" column="11" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_impl.cuh" bodystart="309" bodyend="324" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="592" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="louvain__impl_8cuh_1a1ebb412e2e0e4fe1c8660e57aa6722e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::flatten_dendrogram</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view, Dendrogram&lt; vertex_t &gt; const &amp;dendrogram, vertex_t *clustering)</argsstring>
        <name>flatten_dendrogram</name>
        <qualifiedname>cugraph::flatten_dendrogram</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; vertex_t &gt; const &amp;</type>
          <declname>dendrogram</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>clustering</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_impl.cuh" line="327" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_impl.cuh" bodystart="327" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="louvain__impl_8cuh_1ad246f89c8987bd1f935793e1248add07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; size_t, weight_t &gt;</type>
        <definition>std::pair&lt; size_t, weight_t &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt; rng_state, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, vertex_t *clustering, size_t max_level=100, weight_t threshold=weight_t{1e-7}, weight_t resolution=weight_t{1})</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>clustering</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_level</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>weight_t</type>
          <declname>threshold</declname>
          <defval>weight_t{1e-7}</defval>
        </param>
        <param>
          <type>weight_t</type>
          <declname>resolution</declname>
          <defval>weight_t{1}</defval>
        </param>
        <briefdescription>
<para>Louvain implementation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute a clustering of the graph by maximizing modularity</para>
<para>Computed using the Louvain method described in:</para>
<para>VD Blondel, J-L Guillaume, R Lambiotte and E Lefebvre: Fast unfolding of community hierarchies in large networks, J Stat Mech P10008 (2008), <ulink url="http://arxiv.org/abs/0803.0476">http://arxiv.org/abs/0803.0476</ulink></para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The RngState instance holding pseudo-random number generator state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Input graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If @pedge_weight_view.has_value() == false, edge weights are assumed to be 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">clustering</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device array where the clustering should be stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_level</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) maximum number of levels to run (default 100) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) threshold for convergence at each level (default 1e-7) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The value of the resolution parameter to use. Called gamma in the modularity formula, this changes the size of the communities. Higher resolutions lead to more smaller communities, lower resolutions lead to fewer larger communities. (default 1)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair containing: 1) number of levels of the returned clustering 2) modularity of the returned clustering </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_impl.cuh" line="338" column="11" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_impl.cuh" bodystart="338" bodyend="362" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="537" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a6c48e8386edfe0c6cfbbc3f26a625200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt;, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="23" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="23" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a8e3c4f0a926cc5018fb6a5c69c39dabc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="31" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="31" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1ad89b78bf6875729473c3f49f82d9e645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int64_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int64_t &gt; &gt;, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="39" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="39" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a79f6bdec85ed1bf492da219a4960b812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt;, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="47" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="47" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a6ac25a0050a737f5b4d66193ee7e4cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="55" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="55" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a075fc79b2c69e4d9e67e0e8a30c969be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int64_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int64_t &gt; &gt;, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="63" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="63" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a3e72d7065bb4846d1f4c957144cbe1f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt;, int32_t *, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="72" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="72" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a214fa772f0fe5ded5e7a393a91817eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt;, int32_t *, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="81" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="81" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a17a071b2b48c0d9982f549c9555c68b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int32_t *, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="90" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="90" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a0a184f4d5017fb46efdec956b00a00ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int32_t *, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="99" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="99" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a430a1770de0330fc82ec2a445df24fbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int64_t *, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="108" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="108" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__mg_8cu_1a1d63edb11c584c61afdc4aa0dc921ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int64_t *, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" line="117" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_mg.cu" declline="117" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1a989653be2428b142d5d1c114727de682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt;, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="23" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="23" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1a264d20a38e9c1ff9482d60d8da0af757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="31" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="31" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1ac7a164313717e083fa7fae58da32b677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int64_t &gt; &gt;, float &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int64_t &gt; &gt;, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="39" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="39" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1ab74af632ff0175bd4a1365a3c7a35ebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt;, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="47" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="47" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1a77078ca978d34b218bf855c69cb46b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int32_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int32_t &gt; &gt;, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="55" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="55" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1a24922b22186ac3878c91675e8cb57ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::unique_ptr&lt; <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; int64_t &gt; &gt;, double &gt;</type>
        <definition>template std::pair&lt; std::unique_ptr&lt; Dendrogram&lt; int64_t &gt; &gt;, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="63" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="63" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1a82642ace6da712ea262ffe71ff006259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt;, int32_t *, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="72" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="72" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1ad8232d83494b87e587536e9ae80cb875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt;, int32_t *, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="81" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="81" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1ab4fab2c1abb3ef23362d8055781e31b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int32_t *, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="90" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="90" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1a25a438cdbf57c32a1f0f1bb19bfe3d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int32_t *, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="99" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="99" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1a1ecd93cef40c989034599ba0587fe7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, float &gt;</type>
        <definition>template std::pair&lt; size_t, float &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt;, int64_t *, size_t, float, float)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="108" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="108" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="louvain__sg_8cu_1a587c454e6326c77246a0cba96685a613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; size_t, double &gt;</type>
        <definition>template std::pair&lt; size_t, double &gt; cugraph::louvain</definition>
        <argsstring>(raft::handle_t const &amp;, std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt;, int64_t *, size_t, double, double)</argsstring>
        <name>louvain</name>
        <qualifiedname>cugraph::louvain</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; raft::random::RngState &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" line="117" column="20" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/louvain_sg.cu" declline="117" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="triangle__count__impl_8cuh_1a0f8431154072b4155cc4066fdb5c961f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt; vertices, raft::device_span&lt; edge_t &gt; counts, bool do_expensive_check)</argsstring>
        <name>triangle_count</name>
        <qualifiedname>cugraph::triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>raft::device_span&lt; edge_t &gt;</type>
          <declname>counts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_impl.cuh" line="129" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_impl.cuh" bodystart="129" bodyend="533" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2004" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="triangle__count__mg_8cu_1ae4bf1bbaa1d458896a9534eb298ea22e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, raft::device_span&lt; int32_t &gt; counts, bool do_expensive_check)</argsstring>
        <name>triangle_count</name>
        <qualifiedname>cugraph::triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t &gt;</type>
          <declname>counts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_mg.cu" line="21" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_mg.cu" declline="21" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="triangle__count__mg_8cu_1abb4925cc7282e7738befac858dfc17de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, raft::device_span&lt; int64_t &gt; counts, bool do_expensive_check)</argsstring>
        <name>triangle_count</name>
        <qualifiedname>cugraph::triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t &gt;</type>
          <declname>counts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_mg.cu" line="27" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_mg.cu" declline="27" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="triangle__count__mg_8cu_1a6825656d7854b4ae1e99efbff9cad2f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, raft::device_span&lt; int64_t &gt; counts, bool do_expensive_check)</argsstring>
        <name>triangle_count</name>
        <qualifiedname>cugraph::triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t &gt;</type>
          <declname>counts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_mg.cu" line="33" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_mg.cu" declline="33" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="triangle__count__sg_8cu_1a003faf5c6996c8901b2eca809ff007f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, raft::device_span&lt; int32_t &gt; counts, bool do_expensive_check)</argsstring>
        <name>triangle_count</name>
        <qualifiedname>cugraph::triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t &gt;</type>
          <declname>counts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_sg.cu" line="21" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_sg.cu" declline="21" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="triangle__count__sg_8cu_1a906102e582f38c2f94b2977e89ecc6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, raft::device_span&lt; int64_t &gt; counts, bool do_expensive_check)</argsstring>
        <name>triangle_count</name>
        <qualifiedname>cugraph::triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t &gt;</type>
          <declname>counts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_sg.cu" line="27" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_sg.cu" declline="27" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="triangle__count__sg_8cu_1a5fcaca376ec23cda1df4e04835610d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::triangle_count</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, raft::device_span&lt; int64_t &gt; counts, bool do_expensive_check)</argsstring>
        <name>triangle_count</name>
        <qualifiedname>cugraph::triangle_count</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t &gt;</type>
          <declname>counts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_sg.cu" line="33" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/community/triangle_count_sg.cu" declline="33" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="connectivity_8cu_1a5d2693f86441fd77a28bacadc7687a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VT</type>
          </param>
          <param>
            <type>typename ET</type>
          </param>
          <param>
            <type>typename WT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::connected_components</definition>
        <argsstring>(legacy::GraphCSRView&lt; VT, ET, WT &gt; const  &amp;graph, cugraph_cc_t connectivity_type, VT *labels)</argsstring>
        <name>connected_components</name>
        <qualifiedname>cugraph::connected_components</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; VT, ET, WT &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>cugraph_cc_t</type>
          <declname>connectivity_type</declname>
        </param>
        <param>
          <type>VT *</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
<para>Compute connected components. </para>
        </briefdescription>
        <detaileddescription>
<para>The weak version (for undirected graphs, only) was imported from cuML. This implementation comes from [1] and solves component labeling problem in parallel on CSR-indexes based upon the vertex degree and adjacency graph.</para>
<para>[1] Hawick, K.A et al, 2010. &quot;Parallel graph component labelling with GPUs and CUDA&quot;</para>
<para>The strong version (for directed or undirected graphs) is based on: [2] Gilbert, J. et al, 2011. &quot;Graph Algorithms in the Language of Linear Algebra&quot;</para>
<para>C = I | A | A^2 |...| A^k where matrix multiplication is via semi-ring: (combine, reduce) == (&amp;, |) (bitwise ops) Then: X = C &amp; transpose(C); and finally, apply get_labels(X);</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ET</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported values : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>cuGraph graph descriptor, should contain the connectivity information as a CSR </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connectivity_type</parametername>
</parameternamelist>
<parameterdescription>
<para>STRONG or WEAK </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Device array of component labels (labels[i] indicates the label associated with vertex id i. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/connectivity.cu" line="73" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/connectivity.cu" bodystart="73" bodyend="82" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="428" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="connectivity_8cu_1a08d9a948d2b63879bd9cc5f3cb6e8466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::connected_components&lt; int32_t, int32_t, float &gt;</definition>
        <argsstring>(legacy::GraphCSRView&lt; int32_t, int32_t, float &gt; const &amp;, cugraph_cc_t, int32_t *)</argsstring>
        <name>connected_components&lt; int32_t, int32_t, float &gt;</name>
        <qualifiedname>cugraph::connected_components&lt; int32_t, int32_t, float &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int32_t, int32_t, float &gt; const &amp;</type>
        </param>
        <param>
          <type>cugraph_cc_t</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/connectivity.cu" line="84" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/connectivity.cu" declline="84" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="connectivity_8cu_1a2e81d6a36ddaa149b0b6bdc59e0414ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::connected_components&lt; int64_t, int64_t, float &gt;</definition>
        <argsstring>(legacy::GraphCSRView&lt; int64_t, int64_t, float &gt; const &amp;, cugraph_cc_t, int64_t *)</argsstring>
        <name>connected_components&lt; int64_t, int64_t, float &gt;</name>
        <qualifiedname>cugraph::connected_components&lt; int64_t, int64_t, float &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int64_t, int64_t, float &gt; const &amp;</type>
        </param>
        <param>
          <type>cugraph_cc_t</type>
        </param>
        <param>
          <type>int64_t *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/connectivity.cu" line="86" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/connectivity.cu" declline="86" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="mis__impl_8cuh_1ad69950a3b1f75601af441d2b4b90fedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; vertex_t &gt;</type>
        <definition>rmm::device_uvector&lt; vertex_t &gt; cugraph::maximal_independent_set</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>maximal_independent_set</name>
        <qualifiedname>cugraph::maximal_independent_set</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_impl.cuh" line="325" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_impl.cuh" bodystart="325" bodyend="331" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2357" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="mis__mg_8cu_1a59b72b87aa4d9f31493c39530108a9c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::maximal_independent_set</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>maximal_independent_set</name>
        <qualifiedname>cugraph::maximal_independent_set</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_mg.cu" line="19" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_mg.cu" declline="19" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="mis__mg_8cu_1a0e92acf8ae4117cd4f578d0dd3c0e408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::maximal_independent_set</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>maximal_independent_set</name>
        <qualifiedname>cugraph::maximal_independent_set</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_mg.cu" line="24" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_mg.cu" declline="24" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="mis__mg_8cu_1a5046c4a672b7a0cf4aee07a9ee68eb64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int64_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int64_t &gt; cugraph::maximal_independent_set</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>maximal_independent_set</name>
        <qualifiedname>cugraph::maximal_independent_set</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_mg.cu" line="29" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_mg.cu" declline="29" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="mis__sg_8cu_1a154bac1a0ebca808e380b38e8dfbb996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::maximal_independent_set</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>maximal_independent_set</name>
        <qualifiedname>cugraph::maximal_independent_set</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_sg.cu" line="20" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_sg.cu" declline="20" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="mis__sg_8cu_1a37f8f7d7a396547de87987b1cf8a31c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::maximal_independent_set</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>maximal_independent_set</name>
        <qualifiedname>cugraph::maximal_independent_set</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_sg.cu" line="25" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_sg.cu" declline="25" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="mis__sg_8cu_1a8fafcc0959e0415f61e7a4f600b8a832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int64_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int64_t &gt; cugraph::maximal_independent_set</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>maximal_independent_set</name>
        <qualifiedname>cugraph::maximal_independent_set</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_sg.cu" line="30" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/mis_sg.cu" declline="30" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="vertex__coloring__impl_8cuh_1af5746f9be528aca4cd68079c40c9b889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; vertex_t &gt;</type>
        <definition>rmm::device_uvector&lt; vertex_t &gt; cugraph::vertex_coloring</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>vertex_coloring</name>
        <qualifiedname>cugraph::vertex_coloring</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_impl.cuh" line="157" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_impl.cuh" bodystart="157" bodyend="163" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2384" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="vertex__coloring__mg_8cu_1afea84f8b06baa9d50f8406e664843efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::vertex_coloring</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>vertex_coloring</name>
        <qualifiedname>cugraph::vertex_coloring</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_mg.cu" line="20" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_mg.cu" declline="20" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="vertex__coloring__mg_8cu_1a92fdf9594d29d2b10b8e57af9f656954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::vertex_coloring</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>vertex_coloring</name>
        <qualifiedname>cugraph::vertex_coloring</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_mg.cu" line="25" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_mg.cu" declline="25" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="vertex__coloring__mg_8cu_1aa5fe5b14f6328dcc98b0a20f750452b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int64_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int64_t &gt; cugraph::vertex_coloring</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>vertex_coloring</name>
        <qualifiedname>cugraph::vertex_coloring</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_mg.cu" line="30" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_mg.cu" declline="30" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="vertex__coloring__sg_8cu_1a12e4bacdb9012215652e3640a88a81e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::vertex_coloring</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>vertex_coloring</name>
        <qualifiedname>cugraph::vertex_coloring</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_sg.cu" line="20" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_sg.cu" declline="20" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="vertex__coloring__sg_8cu_1a07c024ef60edf6d0a48288f05394776e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::vertex_coloring</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>vertex_coloring</name>
        <qualifiedname>cugraph::vertex_coloring</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_sg.cu" line="25" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_sg.cu" declline="25" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="vertex__coloring__sg_8cu_1ac20971f28746f706c413ee8d37947542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int64_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int64_t &gt; cugraph::vertex_coloring</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, raft::random::RngState &amp;rng_state)</argsstring>
        <name>vertex_coloring</name>
        <qualifiedname>cugraph::vertex_coloring</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_sg.cu" line="30" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/vertex_coloring_sg.cu" declline="30" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="weakly__connected__components__impl_8cuh_1a0d6d1ec361b63b97f2fd08992356db23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::weakly_connected_components</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, vertex_t *components, bool do_expensive_check=false)</argsstring>
        <name>weakly_connected_components</name>
        <qualifiedname>cugraph::weakly_connected_components</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>components</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Finds (weakly-connected-)component IDs of each vertices in the input graph. </para>
        </briefdescription>
        <detaileddescription>
<para>The input graph must be symmetric. Component IDs can be arbitrary integers (they can be non-consecutive and are not ordered by component size or any other criterion).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>components</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output component ID array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_impl.cuh" line="761" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_impl.cuh" bodystart="761" bodyend="769" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1800" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="weakly__connected__components__mg_8cu_1a0c2a019e681178ec3ab0858792f3710d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::weakly_connected_components</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, int32_t *components, bool do_expensive_check)</argsstring>
        <name>weakly_connected_components</name>
        <qualifiedname>cugraph::weakly_connected_components</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>components</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_mg.cu" line="23" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_mg.cu" declline="23" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="weakly__connected__components__mg_8cu_1a9977b8775f3625a9535449c8e2da1cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::weakly_connected_components</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, int32_t *components, bool do_expensive_check)</argsstring>
        <name>weakly_connected_components</name>
        <qualifiedname>cugraph::weakly_connected_components</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>components</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_mg.cu" line="29" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_mg.cu" declline="29" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="weakly__connected__components__mg_8cu_1a134fe5b7c9cef2901c9eef975cee6401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::weakly_connected_components</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, int64_t *components, bool do_expensive_check)</argsstring>
        <name>weakly_connected_components</name>
        <qualifiedname>cugraph::weakly_connected_components</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>components</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_mg.cu" line="35" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_mg.cu" declline="35" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="weakly__connected__components__sg_8cu_1a570e5e85822e861b08cf8a20248867a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::weakly_connected_components</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, int32_t *components, bool do_expensive_check)</argsstring>
        <name>weakly_connected_components</name>
        <qualifiedname>cugraph::weakly_connected_components</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>components</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_sg.cu" line="23" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_sg.cu" declline="23" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="weakly__connected__components__sg_8cu_1a8d71cf02b122d8e87e0df50843891830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::weakly_connected_components</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, int32_t *components, bool do_expensive_check)</argsstring>
        <name>weakly_connected_components</name>
        <qualifiedname>cugraph::weakly_connected_components</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>components</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_sg.cu" line="29" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_sg.cu" declline="29" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="weakly__connected__components__sg_8cu_1a13db9af7b63639bd93c91a3a2a621235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::weakly_connected_components</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, int64_t *components, bool do_expensive_check)</argsstring>
        <name>weakly_connected_components</name>
        <qualifiedname>cugraph::weakly_connected_components</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>components</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_sg.cu" line="35" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/components/weakly_connected_components_sg.cu" declline="35" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1a7f9f1fc17775d201a9b96f6a987621d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::unique_ptr&lt; <ref refid="classcugraph_1_1legacy_1_1GraphCSR" kindref="compound">legacy::GraphCSR</ref>&lt; uint32_t, uint32_t, float &gt; &gt;</type>
        <definition>template std::unique_ptr&lt; legacy::GraphCSR&lt; uint32_t, uint32_t, float &gt; &gt; cugraph::coo_to_csr&lt; uint32_t, uint32_t, float &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; uint32_t, uint32_t, float &gt; const &amp;graph, rmm::device_async_resource_ref)</argsstring>
        <name>coo_to_csr&lt; uint32_t, uint32_t, float &gt;</name>
        <qualifiedname>cugraph::coo_to_csr&lt; uint32_t, uint32_t, float &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; uint32_t, uint32_t, float &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>rmm::device_async_resource_ref</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="24" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1a3141a842634e6559e7a8ace6ed3afe28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::unique_ptr&lt; <ref refid="classcugraph_1_1legacy_1_1GraphCSR" kindref="compound">legacy::GraphCSR</ref>&lt; uint32_t, uint32_t, double &gt; &gt;</type>
        <definition>template std::unique_ptr&lt; legacy::GraphCSR&lt; uint32_t, uint32_t, double &gt; &gt; cugraph::coo_to_csr&lt; uint32_t, uint32_t, double &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; uint32_t, uint32_t, double &gt; const &amp;graph, rmm::device_async_resource_ref)</argsstring>
        <name>coo_to_csr&lt; uint32_t, uint32_t, double &gt;</name>
        <qualifiedname>cugraph::coo_to_csr&lt; uint32_t, uint32_t, double &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; uint32_t, uint32_t, double &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>rmm::device_async_resource_ref</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="29" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1ae1dd4f62841cb5afc8d674b9470944ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::unique_ptr&lt; <ref refid="classcugraph_1_1legacy_1_1GraphCSR" kindref="compound">legacy::GraphCSR</ref>&lt; int32_t, int32_t, float &gt; &gt;</type>
        <definition>template std::unique_ptr&lt; legacy::GraphCSR&lt; int32_t, int32_t, float &gt; &gt; cugraph::coo_to_csr&lt; int32_t, int32_t, float &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; int32_t, int32_t, float &gt; const &amp;graph, rmm::device_async_resource_ref)</argsstring>
        <name>coo_to_csr&lt; int32_t, int32_t, float &gt;</name>
        <qualifiedname>cugraph::coo_to_csr&lt; int32_t, int32_t, float &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int32_t, int32_t, float &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>rmm::device_async_resource_ref</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="34" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1a07664ed72259554bdff1e7e39988e0a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::unique_ptr&lt; <ref refid="classcugraph_1_1legacy_1_1GraphCSR" kindref="compound">legacy::GraphCSR</ref>&lt; int32_t, int32_t, double &gt; &gt;</type>
        <definition>template std::unique_ptr&lt; legacy::GraphCSR&lt; int32_t, int32_t, double &gt; &gt; cugraph::coo_to_csr&lt; int32_t, int32_t, double &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; int32_t, int32_t, double &gt; const &amp;graph, rmm::device_async_resource_ref)</argsstring>
        <name>coo_to_csr&lt; int32_t, int32_t, double &gt;</name>
        <qualifiedname>cugraph::coo_to_csr&lt; int32_t, int32_t, double &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int32_t, int32_t, double &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>rmm::device_async_resource_ref</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="39" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="39" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1a8bc3ad6e89b830b99a631d3fed46d6cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::unique_ptr&lt; <ref refid="classcugraph_1_1legacy_1_1GraphCSR" kindref="compound">legacy::GraphCSR</ref>&lt; int64_t, int64_t, float &gt; &gt;</type>
        <definition>template std::unique_ptr&lt; legacy::GraphCSR&lt; int64_t, int64_t, float &gt; &gt; cugraph::coo_to_csr&lt; int64_t, int64_t, float &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; int64_t, int64_t, float &gt; const &amp;graph, rmm::device_async_resource_ref)</argsstring>
        <name>coo_to_csr&lt; int64_t, int64_t, float &gt;</name>
        <qualifiedname>cugraph::coo_to_csr&lt; int64_t, int64_t, float &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int64_t, int64_t, float &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>rmm::device_async_resource_ref</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="44" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1ac28448e01e1b40458d442606b20475ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::unique_ptr&lt; <ref refid="classcugraph_1_1legacy_1_1GraphCSR" kindref="compound">legacy::GraphCSR</ref>&lt; int64_t, int64_t, double &gt; &gt;</type>
        <definition>template std::unique_ptr&lt; legacy::GraphCSR&lt; int64_t, int64_t, double &gt; &gt; cugraph::coo_to_csr&lt; int64_t, int64_t, double &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; int64_t, int64_t, double &gt; const &amp;graph, rmm::device_async_resource_ref)</argsstring>
        <name>coo_to_csr&lt; int64_t, int64_t, double &gt;</name>
        <qualifiedname>cugraph::coo_to_csr&lt; int64_t, int64_t, double &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int64_t, int64_t, double &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>rmm::device_async_resource_ref</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="49" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1abf0660786f942ccc258e726e0cf3ece5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::coo_to_csr_inplace&lt; uint32_t, uint32_t, float &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; uint32_t, uint32_t, float &gt; &amp;graph, legacy::GraphCSRView&lt; uint32_t, uint32_t, float &gt; &amp;result)</argsstring>
        <name>coo_to_csr_inplace&lt; uint32_t, uint32_t, float &gt;</name>
        <qualifiedname>cugraph::coo_to_csr_inplace&lt; uint32_t, uint32_t, float &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; uint32_t, uint32_t, float &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; uint32_t, uint32_t, float &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="56" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="56" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1ae9f780efc337b126a7f0a70d29150377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::coo_to_csr_inplace&lt; uint32_t, uint32_t, double &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; uint32_t, uint32_t, double &gt; &amp;graph, legacy::GraphCSRView&lt; uint32_t, uint32_t, double &gt; &amp;result)</argsstring>
        <name>coo_to_csr_inplace&lt; uint32_t, uint32_t, double &gt;</name>
        <qualifiedname>cugraph::coo_to_csr_inplace&lt; uint32_t, uint32_t, double &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; uint32_t, uint32_t, double &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; uint32_t, uint32_t, double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="61" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="61" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1a54f5940777af071e9437e8ac4aa5294e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::coo_to_csr_inplace&lt; int32_t, int32_t, float &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; int32_t, int32_t, float &gt; &amp;graph, legacy::GraphCSRView&lt; int32_t, int32_t, float &gt; &amp;result)</argsstring>
        <name>coo_to_csr_inplace&lt; int32_t, int32_t, float &gt;</name>
        <qualifiedname>cugraph::coo_to_csr_inplace&lt; int32_t, int32_t, float &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int32_t, int32_t, float &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int32_t, int32_t, float &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="66" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="66" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1ae167c2c9ac26ed4cb61897998db84f2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::coo_to_csr_inplace&lt; int32_t, int32_t, double &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; int32_t, int32_t, double &gt; &amp;graph, legacy::GraphCSRView&lt; int32_t, int32_t, double &gt; &amp;result)</argsstring>
        <name>coo_to_csr_inplace&lt; int32_t, int32_t, double &gt;</name>
        <qualifiedname>cugraph::coo_to_csr_inplace&lt; int32_t, int32_t, double &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int32_t, int32_t, double &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int32_t, int32_t, double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="71" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="71" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1a1134fcb304c90e53307a9f26c6969195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::coo_to_csr_inplace&lt; int64_t, int64_t, float &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; int64_t, int64_t, float &gt; &amp;graph, legacy::GraphCSRView&lt; int64_t, int64_t, float &gt; &amp;result)</argsstring>
        <name>coo_to_csr_inplace&lt; int64_t, int64_t, float &gt;</name>
        <qualifiedname>cugraph::coo_to_csr_inplace&lt; int64_t, int64_t, float &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int64_t, int64_t, float &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int64_t, int64_t, float &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="76" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cu_1a382bb941dcf48ce3a57da403a2a03e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::coo_to_csr_inplace&lt; int64_t, int64_t, double &gt;</definition>
        <argsstring>(legacy::GraphCOOView&lt; int64_t, int64_t, double &gt; &amp;graph, legacy::GraphCSRView&lt; int64_t, int64_t, double &gt; &amp;result)</argsstring>
        <name>coo_to_csr_inplace&lt; int64_t, int64_t, double &gt;</name>
        <qualifiedname>cugraph::coo_to_csr_inplace&lt; int64_t, int64_t, double &gt;</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int64_t, int64_t, double &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int64_t, int64_t, double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" line="81" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cu" declline="81" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cuh_1a7502f8bdef16006397e8303ade7a738d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VT</type>
          </param>
          <param>
            <type>typename ET</type>
          </param>
          <param>
            <type>typename WT</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="classcugraph_1_1legacy_1_1GraphCSR" kindref="compound">legacy::GraphCSR</ref>&lt; VT, ET, WT &gt; &gt;</type>
        <definition>std::unique_ptr&lt; legacy::GraphCSR&lt; VT, ET, WT &gt; &gt; cugraph::coo_to_csr</definition>
        <argsstring>(legacy::GraphCOOView&lt; VT, ET, WT &gt; const  &amp;graph, rmm::device_async_resource_ref mr=rmm::mr::get_current_device_resource())</argsstring>
        <name>coo_to_csr</name>
        <qualifiedname>cugraph::coo_to_csr</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; VT, ET, WT &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>rmm::device_async_resource_ref</type>
          <declname>mr</declname>
          <defval>rmm::mr::get_current_device_resource()</defval>
        </param>
        <briefdescription>
<para>Convert COO to CSR. </para>
        </briefdescription>
        <detaileddescription>
<para>Takes a list of edges in COOrdinate format and generates a CSR format.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VT</parametername>
</parameternamelist>
<parameterdescription>
<para>type of vertex index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ET</parametername>
</parameternamelist>
<parameterdescription>
<para>type of edge index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WT</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the edge weight</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>cuGraph graph in coordinate format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory resource used to allocate the returned graph</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Unique pointer to generate Compressed Sparse Row graph </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cuh" line="152" column="17" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cuh" bodystart="152" bodyend="171" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/legacy/functions.hpp" declline="45" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="COOtoCSR_8cuh_1a82c4153cac71181f0b88bd87b287ab7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VT</type>
          </param>
          <param>
            <type>typename ET</type>
          </param>
          <param>
            <type>typename WT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::coo_to_csr_inplace</definition>
        <argsstring>(legacy::GraphCOOView&lt; VT, ET, WT &gt; &amp;graph, legacy::GraphCSRView&lt; VT, ET, WT &gt; &amp;result)</argsstring>
        <name>coo_to_csr_inplace</name>
        <qualifiedname>cugraph::coo_to_csr_inplace</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; VT, ET, WT &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; VT, ET, WT &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cuh" line="174" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/converters/legacy/COOtoCSR.cuh" bodystart="174" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="core__number__impl_8cuh_1ac70ce4ca9e1b4dc2349b7917d8d61337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::core_number</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, edge_t *core_numbers, k_core_degree_type_t degree_type, size_t k_first=0, size_t k_last=std::numeric_limits&lt; size_t &gt;::max(), bool do_expensive_check=false)</argsstring>
        <name>core_number</name>
        <qualifiedname>cugraph::core_number</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>edge_t *</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>k_core_degree_type_t</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_first</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_last</declname>
          <defval>std::numeric_limits&lt; size_t &gt;::max()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute core numbers of individual vertices from K-Core decomposition. </para>
        </briefdescription>
        <detaileddescription>
<para>The input graph should not have self-loops nor multi-edges. Currently, only undirected graphs are supported.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core_numbers</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output core number array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>degree_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictate whether to compute the K-Core decomposition based on in-degrees, out-degrees, or in-degrees + out_degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Find K-Cores from K = k_first. Any vertices that do not belong to k_first-core will have core numbers of 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_last</parametername>
</parameternamelist>
<parameterdescription>
<para>Find K-Cores to K = k_last. Any vertices that belong to (k_last)-core will have their core numbers set to their degrees on k_last-core. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_impl.cuh" line="81" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_impl.cuh" bodystart="81" bodyend="325" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1834" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="core__number__mg_8cu_1a5976e796cf91023f8fc03fde4bf332ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::core_number</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, int32_t *core_numbers, k_core_degree_type_t degree_type, size_t k_first, size_t k_last, bool do_expensive_check)</argsstring>
        <name>core_number</name>
        <qualifiedname>cugraph::core_number</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>k_core_degree_type_t</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_mg.cu" line="23" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_mg.cu" declline="23" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="core__number__mg_8cu_1a376346588a031a7798b107673adc1d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::core_number</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, int64_t *core_numbers, k_core_degree_type_t degree_type, size_t k_first, size_t k_last, bool do_expensive_check)</argsstring>
        <name>core_number</name>
        <qualifiedname>cugraph::core_number</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>k_core_degree_type_t</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_mg.cu" line="31" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_mg.cu" declline="31" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="core__number__mg_8cu_1a53c11cedb702e4a0ea391ef917e9f53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::core_number</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, int64_t *core_numbers, k_core_degree_type_t degree_type, size_t k_first, size_t k_last, bool do_expensive_check)</argsstring>
        <name>core_number</name>
        <qualifiedname>cugraph::core_number</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>k_core_degree_type_t</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_mg.cu" line="39" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_mg.cu" declline="39" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="core__number__sg_8cu_1a051d6e95ccbb59d966170db382a7c511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::core_number</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, int32_t *core_numbers, k_core_degree_type_t degree_type, size_t k_first, size_t k_last, bool do_expensive_check)</argsstring>
        <name>core_number</name>
        <qualifiedname>cugraph::core_number</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>k_core_degree_type_t</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_sg.cu" line="23" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_sg.cu" declline="23" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="core__number__sg_8cu_1a29952f3b9ed1d2606912eb1b3a541f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::core_number</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, int64_t *core_numbers, k_core_degree_type_t degree_type, size_t k_first, size_t k_last, bool do_expensive_check)</argsstring>
        <name>core_number</name>
        <qualifiedname>cugraph::core_number</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>k_core_degree_type_t</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_sg.cu" line="31" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_sg.cu" declline="31" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="core__number__sg_8cu_1a0179260c6d1f369c35395f74a7573923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::core_number</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, int64_t *core_numbers, k_core_degree_type_t degree_type, size_t k_first, size_t k_last, bool do_expensive_check)</argsstring>
        <name>core_number</name>
        <qualifiedname>cugraph::core_number</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>k_core_degree_type_t</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_sg.cu" line="39" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/core_number_sg.cu" declline="39" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="k__core__impl_8cuh_1af0fb867685fe17533bd8b2349d485aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; edge_t const  &gt; &gt; core_numbers, bool do_expensive_check=false)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; edge_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Extract K-Core of a graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Order of the core. This value must not be negative. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>degree_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter to dictate whether to compute the K-Core decomposition based on in-degrees, out-degrees, or in-degrees + out_degrees. One of <computeroutput>degree_type</computeroutput> and <computeroutput>core_numbers</computeroutput> must be specified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core_numbers</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional output from core_number algorithm. If not specified then k_core will call core_number itself using <computeroutput>degree_type</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>edge list for the graph </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_impl.cuh" line="32" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_impl.cuh" bodystart="32" bodyend="97" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1867" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__mg_8cu_1ab3663f62c928aa2d3a527f3c6507d992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__mg_8cu_1aea1fce8343f8dee7a06f8ae75ffe8bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" line="37" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__mg_8cu_1a98e262e87fcea73190b5678c9dc6c7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" line="48" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__mg_8cu_1ad7af0c33d93d087387cbdfe67fd4bf74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" line="59" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__mg_8cu_1af53d2b4482dc609fd6e3f583d839ef32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" line="70" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__mg_8cu_1a04327eb1ca180f0cc6c54ff53c4931a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" line="81" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_mg.cu" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__sg_8cu_1a67ab9e0352fd6a6cc98ad2a3555a0800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__sg_8cu_1a2f56f62f809aa5bd1c5a390bba628892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" line="37" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__sg_8cu_1acd33eb330535ca77b16e55abf1489dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" line="48" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__sg_8cu_1a74ff6c475884f55774b30232bf23d322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" line="59" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__sg_8cu_1a4ca3ed4775abc57b5e4f6a4e723bcc5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" line="70" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="k__core__sg_8cu_1adde36464ab3d3deab56fa6bbaed95795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::k_core</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, size_t k, std::optional&lt; k_core_degree_type_t &gt; degree_type, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; core_numbers, bool do_expensive_check)</argsstring>
        <name>k_core</name>
        <qualifiedname>cugraph::k_core</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::optional&lt; k_core_degree_type_t &gt;</type>
          <declname>degree_type</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>core_numbers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" line="81" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/cores/k_core_sg.cu" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="erdos__renyi__generator_8cu_1af11f1d7615d6d81abe5e1904cd4772bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::generate_erdos_renyi_graph_edgelist_gnp</definition>
        <argsstring>(raft::handle_t const  &amp;handle, vertex_t num_vertices, float p, vertex_t base_vertex_id, uint64_t seed=0)</argsstring>
        <name>generate_erdos_renyi_graph_edgelist_gnp</name>
        <qualifiedname>cugraph::generate_erdos_renyi_graph_edgelist_gnp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>base_vertex_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>generate an edge lists for an Erdos-Renyi graph </para>
        </briefdescription>
        <detaileddescription>
<para>This API supports the G(n,p) model which requires O(n^2) work.</para>
<para>If executed in a multi-gpu context (handle comms has been initialized) each GPU will generate Erdos-Renyi edges for its portion of the 2D partitioning of the adjacency matrix.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices to use in the generated graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability for edge creation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_vertex_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting vertex id for the generated graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed value for the random number generator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" line="35" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" bodystart="35" bodyend="78" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="406" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="erdos__renyi__generator_8cu_1a1e86bcbf7be7a1d9d7afd0c3bc326acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::generate_erdos_renyi_graph_edgelist_gnm</definition>
        <argsstring>(raft::handle_t const  &amp;handle, vertex_t num_vertices, size_t m, vertex_t base_vertex_id, uint64_t seed=0)</argsstring>
        <name>generate_erdos_renyi_graph_edgelist_gnm</name>
        <qualifiedname>cugraph::generate_erdos_renyi_graph_edgelist_gnm</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>base_vertex_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>generate an edge lists for an Erdos-Renyi graph </para>
        </briefdescription>
        <detaileddescription>
<para>This API supports the G(n,m) model</para>
<para>If executed in a multi-gpu context (handle comms has been initialized) each GPU will generate Erdos-Renyi edges for its portion of the 2D partitioning of the adjacency matrix.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices to use in each complete graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of edges to generate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_vertex_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting vertex id for the generated graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed value for the random number generator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" line="82" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" bodystart="82" bodyend="89" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="433" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="erdos__renyi__generator_8cu_1a4b96f446dc7e255e0f943e3ef26f4ddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::generate_erdos_renyi_graph_edgelist_gnp</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t num_vertices, float p, int32_t base_vertex_id, uint64_t seed)</argsstring>
        <name>generate_erdos_renyi_graph_edgelist_gnp</name>
        <qualifiedname>cugraph::generate_erdos_renyi_graph_edgelist_gnp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>base_vertex_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" line="92" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="erdos__renyi__generator_8cu_1a8badfcb51a1b1be8e832de61fa58414a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::generate_erdos_renyi_graph_edgelist_gnp</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t num_vertices, float p, int64_t base_vertex_id, uint64_t seed)</argsstring>
        <name>generate_erdos_renyi_graph_edgelist_gnp</name>
        <qualifiedname>cugraph::generate_erdos_renyi_graph_edgelist_gnp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>base_vertex_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" line="99" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" declline="99" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="erdos__renyi__generator_8cu_1aedccc5159bfe4419016603d4242a6990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::generate_erdos_renyi_graph_edgelist_gnm</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t num_vertices, size_t m, int32_t base_vertex_id, uint64_t seed)</argsstring>
        <name>generate_erdos_renyi_graph_edgelist_gnm</name>
        <qualifiedname>cugraph::generate_erdos_renyi_graph_edgelist_gnm</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>base_vertex_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" line="106" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" declline="106" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="erdos__renyi__generator_8cu_1acaebc0e7947b01e1d72acb88be79922f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::generate_erdos_renyi_graph_edgelist_gnm</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t num_vertices, size_t m, int64_t base_vertex_id, uint64_t seed)</argsstring>
        <name>generate_erdos_renyi_graph_edgelist_gnm</name>
        <qualifiedname>cugraph::generate_erdos_renyi_graph_edgelist_gnm</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>base_vertex_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" line="113" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/erdos_renyi_generator.cu" declline="113" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__bipartite__rmat__edgelist_8cu_1a5a1ee1ea2d05310fc355d0fd396f5f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::generate_bipartite_rmat_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, raft::random::RngState &amp;rng_state, size_t src_scale, size_t dst_scale, size_t num_edges, double a=0.57, double b=0.19, double c=0.19)</argsstring>
        <name>generate_bipartite_rmat_edgelist</name>
        <qualifiedname>cugraph::generate_bipartite_rmat_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
          <defval>0.57</defval>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
          <defval>0.19</defval>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
          <defval>0.19</defval>
        </param>
        <briefdescription>
<para>generate an edge list for a bipartite R-mat graph. </para>
        </briefdescription>
        <detaileddescription>
<para>The source vertex IDs will be in the range of [0, 2^src_scale) and the destination vertex IDs will be in the range of [0, 2^dst_scale). This function allows multi-edges.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT RNG state, updated with each call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor to set the range of source vertex IDs (or the first vertex set) in the bipartite graph. Vertex IDs have values in [0, V_src), where V_src = 1 &lt;&lt; <computeroutput>src_scale</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor to set the range of destination vertex IDs (or the second vertex set) in the bipartite graph. Vertex IDs have values in [0, V_dst), where V_dst = 1 &lt;&lt; <computeroutput>dst_scale</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_edges</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of edges to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>a, b, c, d (= 1.0 - (a + b + c)) in the R-mat graph generator (vist <ulink url="https://graph500.org">https://graph500.org</ulink> for additional details). a, b, c, d should be non-negative and a + b + c should be no larger than 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>a, b, c, d (= 1.0 - (a + b + c)) in the R-mat graph generator (vist <ulink url="https://graph500.org">https://graph500.org</ulink> for additional details). a, b, c, d should be non-negative and a + b + c should be no larger than 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>a, b, c, d (= 1.0 - (a + b + c)) in the R-mat graph generator (vist <ulink url="https://graph500.org">https://graph500.org</ulink> for additional details). a, b, c, d should be non-negative and a + b + c should be no larger than 1.0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_bipartite_rmat_edgelist.cu" line="38" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_bipartite_rmat_edgelist.cu" bodystart="38" bodyend="119" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="168" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__bipartite__rmat__edgelist_8cu_1a7a062f45b88b72d16cd69e2067aad572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::generate_bipartite_rmat_edgelist&lt; int32_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, size_t src_scale, size_t dst_scale, size_t num_edges, double a, double b, double c)</argsstring>
        <name>generate_bipartite_rmat_edgelist&lt; int32_t &gt;</name>
        <qualifiedname>cugraph::generate_bipartite_rmat_edgelist&lt; int32_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_bipartite_rmat_edgelist.cu" line="121" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_bipartite_rmat_edgelist.cu" declline="121" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__bipartite__rmat__edgelist_8cu_1ad3a1e7bfb6d8b978025a8c0d8b185a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::generate_bipartite_rmat_edgelist&lt; int64_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, size_t src_scale, size_t dst_scale, size_t num_edges, double a, double b, double c)</argsstring>
        <name>generate_bipartite_rmat_edgelist&lt; int64_t &gt;</name>
        <qualifiedname>cugraph::generate_bipartite_rmat_edgelist&lt; int64_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_bipartite_rmat_edgelist.cu" line="131" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_bipartite_rmat_edgelist.cu" declline="131" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1af4a6d90b65ee8f76d3ce8f1989fa9c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::generate_rmat_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, raft::random::RngState &amp;rng_state, size_t scale, size_t num_edges, double a=0.57, double b=0.19, double c=0.19, bool clip_and_flip=false, bool scramble_vertex_ids=false)</argsstring>
        <name>generate_rmat_edgelist</name>
        <qualifiedname>cugraph::generate_rmat_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
          <defval>0.57</defval>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
          <defval>0.19</defval>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
          <defval>0.19</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>generate an edge list for an R-mat graph. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows multi-edges and self-loops similar to the Graph 500 reference implementation.</para>
<para>NOTE: The scramble_vertex_ids function needs to be called in order to generate a graph conforming to the Graph 500 specification (note that scrambling does not affect cuGraph&apos;s graph construction performance, so this is generally unnecessary). If <computeroutput>edge_factor</computeroutput> is given (e.g. Graph 500), set <computeroutput>num_edges</computeroutput> to (size_t{1} &lt;&lt; <computeroutput>scale</computeroutput>) * <computeroutput>edge_factor</computeroutput>. To generate an undirected graph, set <computeroutput>b</computeroutput> == <computeroutput>c</computeroutput> and <computeroutput>clip_and_flip</computeroutput> = true. All the resulting edges will be placed in the lower triangular part (including the diagonal) of the graph adjacency matrix.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT RNG state, updated with each call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor to set the number of vertices in the graph. Vertex IDs have values in [0, V), where V = 1 &lt;&lt; <computeroutput>scale</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_edges</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of edges to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>a, b, c, d (= 1.0 - (a + b + c)) in the R-mat graph generator (vist <ulink url="https://graph500.org">https://graph500.org</ulink> for additional details). a, b, c, d should be non-negative and a + b + c should be no larger than 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>a, b, c, d (= 1.0 - (a + b + c)) in the R-mat graph generator (vist <ulink url="https://graph500.org">https://graph500.org</ulink> for additional details). a, b, c, d should be non-negative and a + b + c should be no larger than 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>a, b, c, d (= 1.0 - (a + b + c)) in the R-mat graph generator (vist <ulink url="https://graph500.org">https://graph500.org</ulink> for additional details). a, b, c, d should be non-negative and a + b + c should be no larger than 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clip_and_flip</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag controlling whether to generate edges only in the lower triangular part (including the diagonal) of the graph adjacency matrix (if set to <computeroutput>true</computeroutput>) or not (if set to <computeroutput>false</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scramble_vertex_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag controlling whether to scramble vertex ID bits (if set to <computeroutput>true</computeroutput>) or not (if set to <computeroutput>false</computeroutput>); scrambling vertex ID bits breaks correlation between vertex ID values and vertex degrees. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="37" column="12" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" bodystart="37" bodyend="113" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="127" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1afc87ae749791585db7e5fc0ec8155e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::generate_rmat_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, size_t scale, size_t num_edges, double a=0.57, double b=0.19, double c=0.19, uint64_t seed=0, bool clip_and_flip=false, bool scramble_vertex_ids=false)</argsstring>
        <name>generate_rmat_edgelist</name>
        <qualifiedname>cugraph::generate_rmat_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
          <defval>0.57</defval>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
          <defval>0.19</defval>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
          <defval>0.19</defval>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>generate an edge list for an R-mat graph. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function will be deprectated and should be replaced with the version that takes raft::random::RngState as a parameter</para>
</xrefdescription></xrefsect></para>
<para>This function allows multi-edges and self-loops similar to the Graph 500 reference implementation.</para>
<para>NOTE: The scramble_vertex_ids function needs to be called in order to generate a graph conforming to the Graph 500 specification (note that scrambling does not affect cuGraph&apos;s graph construction performance, so this is generally unnecessary). If <computeroutput>edge_factor</computeroutput> is given (e.g. Graph 500), set <computeroutput>num_edges</computeroutput> to (size_t{1} &lt;&lt; <computeroutput>scale</computeroutput>) * <computeroutput>edge_factor</computeroutput>. To generate an undirected graph, set <computeroutput>b</computeroutput> == <computeroutput>c</computeroutput> and <computeroutput>clip_and_flip</computeroutput> = true. All the resulting edges will be placed in the lower triangular part (including the diagonal) of the graph adjacency matrix.</para>
<para>For multi-GPU generation with <computeroutput>P</computeroutput> GPUs, <computeroutput>seed</computeroutput> should be set to different values in different GPUs to avoid every GPU generating the same set of edges. <computeroutput>num_edges</computeroutput> should be adjusted as well; e.g. assuming <computeroutput>edge_factor</computeroutput> is given, set <computeroutput>num_edges</computeroutput> = (size_t{1} &lt;&lt; <computeroutput>scale</computeroutput>) * <computeroutput>edge_factor</computeroutput> / <computeroutput>P</computeroutput> + (rank &lt; (((size_t{1} &lt;&lt; <computeroutput>scale</computeroutput>) * <computeroutput>edge_factor</computeroutput>) % P) ? 1 : 0).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor to set the number of verties in the graph. Vertex IDs have values in [0, V), where V = 1 &lt;&lt; <computeroutput>scale</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_edges</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of edges to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>a, b, c, d (= 1.0 - (a + b + c)) in the R-mat graph generator (vist <ulink url="https://graph500.org">https://graph500.org</ulink> for additional details). a, b, c, d should be non-negative and a + b + c should be no larger than 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>a, b, c, d (= 1.0 - (a + b + c)) in the R-mat graph generator (vist <ulink url="https://graph500.org">https://graph500.org</ulink> for additional details). a, b, c, d should be non-negative and a + b + c should be no larger than 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>a, b, c, d (= 1.0 - (a + b + c)) in the R-mat graph generator (vist <ulink url="https://graph500.org">https://graph500.org</ulink> for additional details). a, b, c, d should be non-negative and a + b + c should be no larger than 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed value for the random number generator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clip_and_flip</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag controlling whether to generate edges only in the lower triangular part (including the diagonal) of the graph adjacency matrix (if set to <computeroutput>true</computeroutput>) or not (if set to <computeroutput>false</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scramble_vertex_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag controlling whether to scramble vertex ID bits (if set to <computeroutput>true</computeroutput>) or not (if set to <computeroutput>false</computeroutput>); scrambling vertex ID bits breaks correlation between vertex ID values and vertex degrees. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="116" column="12" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" bodystart="116" bodyend="131" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="76" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1a82b25c2426d57bb211ce6ee3e549bfb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; &gt; cugraph::generate_rmat_edgelists</definition>
        <argsstring>(raft::handle_t const  &amp;handle, raft::random::RngState &amp;rng_state, size_t n_edgelists, size_t min_scale, size_t max_scale, size_t edge_factor=16, generator_distribution_t size_distribution=generator_distribution_t::POWER_LAW, generator_distribution_t edge_distribution=generator_distribution_t::POWER_LAW, bool clip_and_flip=false, bool scramble_vertex_ids=false)</argsstring>
        <name>generate_rmat_edgelists</name>
        <qualifiedname>cugraph::generate_rmat_edgelists</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_edgelists</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge_factor</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>size_distribution</declname>
          <defval>generator_distribution_t::POWER_LAW</defval>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>edge_distribution</declname>
          <defval>generator_distribution_t::POWER_LAW</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>generate multiple edge lists using the R-mat graph generator. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows multi-edges and self-loops similar to the Graph 500 reference implementation.</para>
<para>NOTE: The scramble_vertex_ids function needs to be called in order to generate a graph conforming to the Graph 500 specification (note that scrambling does not affect cuGraph&apos;s graph construction performance, so this is generally unnecessary). If <computeroutput>edge_factor</computeroutput> is given (e.g. Graph 500), set <computeroutput>num_edges</computeroutput> to (size_t{1} &lt;&lt; <computeroutput>scale</computeroutput>) * <computeroutput>edge_factor</computeroutput>. To generate an undirected graph, set <computeroutput>b</computeroutput> == <computeroutput>c</computeroutput> and <computeroutput>clip_and_flip</computeroutput> = true. All the resulting edges will be placed in the lower triangular part (including the diagonal) of the graph adjacency matrix.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT RNG state, updated with each call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_edgelists</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of edge lists (graphs) to generate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor to set the minimum number of verties in the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor to set the maximum number of verties in the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Average number of edges per vertex to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_distribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution of the graph sizes, impacts the scale parameter of the R-MAT generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_distribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Edges distribution for each graph, impacts how R-MAT parameters a,b,c,d, are set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clip_and_flip</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag controlling whether to generate edges only in the lower triangular part (including the diagonal) of the graph adjacency matrix (if set to <computeroutput>true</computeroutput>) or not (if set to <computeroutput>false</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scramble_vertex_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag controlling whether to scramble vertex ID bits (if set to <computeroutput>true</computeroutput>) or not (if set to <computeroutput>false</computeroutput>); scrambling vertex ID bits breaks correlation between vertex ID values and vertex degrees. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; of size <computeroutput>n_edgelists</computeroutput>, each vector element being a tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="135" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" bodystart="135" bodyend="202" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="269" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1aeec2d59f18479516d3b48911724d1412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; &gt; cugraph::generate_rmat_edgelists</definition>
        <argsstring>(raft::handle_t const  &amp;handle, size_t n_edgelists, size_t min_scale, size_t max_scale, size_t edge_factor=16, generator_distribution_t size_distribution=generator_distribution_t::POWER_LAW, generator_distribution_t edge_distribution=generator_distribution_t::POWER_LAW, uint64_t seed=0, bool clip_and_flip=false, bool scramble_vertex_ids=false)</argsstring>
        <name>generate_rmat_edgelists</name>
        <qualifiedname>cugraph::generate_rmat_edgelists</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_edgelists</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge_factor</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>size_distribution</declname>
          <defval>generator_distribution_t::POWER_LAW</defval>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>edge_distribution</declname>
          <defval>generator_distribution_t::POWER_LAW</defval>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>generate multiple edge lists using the R-mat graph generator. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function will be deprectated and should be replaced with the version that takes raft::random::RngState as a parameter</para>
</xrefdescription></xrefsect></para>
<para>This function allows multi-edges and self-loops similar to the Graph 500 reference implementation.</para>
<para>NOTE: The scramble_vertex_ids function needs to be called in order to generate a graph conforming to the Graph 500 specification (note that scrambling does not affect cuGraph&apos;s graph construction performance, so this is generally unnecessary). If <computeroutput>edge_factor</computeroutput> is given (e.g. Graph 500), set <computeroutput>num_edges</computeroutput> to (size_t{1} &lt;&lt; <computeroutput>scale</computeroutput>) * <computeroutput>edge_factor</computeroutput>. To generate an undirected graph, set <computeroutput>b</computeroutput> == <computeroutput>c</computeroutput> and <computeroutput>clip_and_flip</computeroutput> = true. All the resulting edges will be placed in the lower triangular part (including the diagonal) of the graph adjacency matrix.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_edgelists</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of edge lists (graphs) to generate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor to set the minimum number of verties in the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor to set the maximum number of verties in the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Average number of edges per vertex to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_distribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution of the graph sizes, impacts the scale parameter of the R-MAT generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_distribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Edges distribution for each graph, impacts how R-MAT parameters a,b,c,d, are set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed value for the random number generator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clip_and_flip</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag controlling whether to generate edges only in the lower triangular part (including the diagonal) of the graph adjacency matrix (if set to <computeroutput>true</computeroutput>) or not (if set to <computeroutput>false</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scramble_vertex_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag controlling whether to scramble vertex ID bits (if set to <computeroutput>true</computeroutput>) or not (if set to <computeroutput>false</computeroutput>); scrambling vertex ID bits breaks correlation between vertex ID values and vertex degrees. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; of size <computeroutput>n_edgelists</computeroutput>, each vector element being a tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="206" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" bodystart="206" bodyend="229" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="219" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1a003da0f1a044db2fadd3850b5ade952b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::generate_rmat_edgelist&lt; int32_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, size_t scale, size_t num_edges, double a, double b, double c, bool clip_and_flip, bool scramble_vertex_ids)</argsstring>
        <name>generate_rmat_edgelist&lt; int32_t &gt;</name>
        <qualifiedname>cugraph::generate_rmat_edgelist&lt; int32_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="231" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" declline="231" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1abe19b88a98f7187148f28507c5826572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::generate_rmat_edgelist&lt; int64_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, size_t scale, size_t num_edges, double a, double b, double c, bool clip_and_flip, bool scramble_vertex_ids)</argsstring>
        <name>generate_rmat_edgelist&lt; int64_t &gt;</name>
        <qualifiedname>cugraph::generate_rmat_edgelist&lt; int64_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="242" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" declline="242" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1a4c8f0e3c2a801cd11a2f28ed63cd454f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::generate_rmat_edgelists&lt; int32_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, size_t n_edgelists, size_t min_scale, size_t max_scale, size_t edge_factor, generator_distribution_t size_distribution, generator_distribution_t edge_distribution, bool clip_and_flip, bool scramble_vertex_ids)</argsstring>
        <name>generate_rmat_edgelists&lt; int32_t &gt;</name>
        <qualifiedname>cugraph::generate_rmat_edgelists&lt; int32_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_edgelists</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge_factor</declname>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>size_distribution</declname>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>edge_distribution</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="253" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" declline="253" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1a7e79f3c4ac0005b37cc355fb8c4d4d26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::generate_rmat_edgelists&lt; int64_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, size_t n_edgelists, size_t min_scale, size_t max_scale, size_t edge_factor, generator_distribution_t size_distribution, generator_distribution_t edge_distribution, bool clip_and_flip, bool scramble_vertex_ids)</argsstring>
        <name>generate_rmat_edgelists&lt; int64_t &gt;</name>
        <qualifiedname>cugraph::generate_rmat_edgelists&lt; int64_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_edgelists</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge_factor</declname>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>size_distribution</declname>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>edge_distribution</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="265" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" declline="265" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1a7e2c6bc93ebf56dc8627620ff7059226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::generate_rmat_edgelist&lt; int32_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, size_t scale, size_t num_edges, double a, double b, double c, uint64_t seed, bool clip_and_flip, bool scramble_vertex_ids)</argsstring>
        <name>generate_rmat_edgelist&lt; int32_t &gt;</name>
        <qualifiedname>cugraph::generate_rmat_edgelist&lt; int32_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="278" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" declline="278" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1ac43cdbf9f1b4b8668ad9a91ba7f18190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::generate_rmat_edgelist&lt; int64_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, size_t scale, size_t num_edges, double a, double b, double c, uint64_t seed, bool clip_and_flip, bool scramble_vertex_ids)</argsstring>
        <name>generate_rmat_edgelist&lt; int64_t &gt;</name>
        <qualifiedname>cugraph::generate_rmat_edgelist&lt; int64_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="289" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" declline="289" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1ab30b33ea10bf21e3cf734a420d3ce9dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::generate_rmat_edgelists&lt; int32_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, size_t n_edgelists, size_t min_scale, size_t max_scale, size_t edge_factor, generator_distribution_t size_distribution, generator_distribution_t edge_distribution, uint64_t seed, bool clip_and_flip, bool scramble_vertex_ids)</argsstring>
        <name>generate_rmat_edgelists&lt; int32_t &gt;</name>
        <qualifiedname>cugraph::generate_rmat_edgelists&lt; int32_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_edgelists</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge_factor</declname>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>size_distribution</declname>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>edge_distribution</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="300" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" declline="300" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generate__rmat__edgelist_8cu_1a1ecb6174bb7a4c69741cc6c439c8d81c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::vector&lt; std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::generate_rmat_edgelists&lt; int64_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, size_t n_edgelists, size_t min_scale, size_t max_scale, size_t edge_factor, generator_distribution_t size_distribution, generator_distribution_t edge_distribution, uint64_t seed, bool clip_and_flip, bool scramble_vertex_ids)</argsstring>
        <name>generate_rmat_edgelists&lt; int64_t &gt;</name>
        <qualifiedname>cugraph::generate_rmat_edgelists&lt; int64_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_edgelists</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_scale</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge_factor</declname>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>size_distribution</declname>
        </param>
        <param>
          <type>generator_distribution_t</type>
          <declname>edge_distribution</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clip_and_flip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scramble_vertex_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" line="312" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generate_rmat_edgelist.cu" declline="312" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1a32b2d12a1069edc9c54d75000caedf14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; vertex_t &gt;</type>
        <definition>rmm::device_uvector&lt; vertex_t &gt; cugraph::scramble_vertex_ids</definition>
        <argsstring>(raft::handle_t const  &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;vertices, size_t lgN)</argsstring>
        <name>scramble_vertex_ids</name>
        <qualifiedname>cugraph::scramble_vertex_ids</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lgN</declname>
        </param>
        <briefdescription>
<para>scramble vertex IDs in a graph </para>
        </briefdescription>
        <detaileddescription>
<para>Given a vertex list for a graph, scramble the input vertex IDs.</para>
<para>The scramble code here follows the algorithm in the Graph 500 reference implementation version 3.0.0.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of input vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lgN</parametername>
</parameternamelist>
<parameterdescription>
<para>The input &amp; output (scrambled) vertex IDs are assumed to be in [0, 2^lgN). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rmm::device_uvector object storing scrambled vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="66" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" bodystart="66" bodyend="77" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="482" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1ae6f84c39f67ea09e5a36f7b824606de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::scramble_vertex_ids</definition>
        <argsstring>(raft::handle_t const  &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;dsts, size_t lgN)</argsstring>
        <name>scramble_vertex_ids</name>
        <qualifiedname>cugraph::scramble_vertex_ids</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>dsts</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lgN</declname>
        </param>
        <briefdescription>
<para>scramble vertex ids in a graph </para>
        </briefdescription>
        <detaileddescription>
<para>Given an edge list for a graph, scramble the input vertex IDs.</para>
<para>The scramble code here follows the algorithm in the Graph 500 reference implementation version 3.0.0.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_src_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of input source vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_dst_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of input destination vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lgN</parametername>
</parameternamelist>
<parameterdescription>
<para>The input &amp; output (scrambled) vertex IDs are assumed to be in [0, 2^lgN). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of two rmm::device_uvector objects storing scrambled source &amp; destination vertex IDs, respectively. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="80" column="12" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" bodystart="80" bodyend="97" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="504" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1aa1bfb5ec7da9b79fbacbac2f7b9d08a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt; cugraph::combine_edgelists</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::vector&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;d_sources, std::vector&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;d_dests, std::optional&lt; std::vector&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt; &amp;&amp;optional_d_weights, bool remove_multi_edges=true)</argsstring>
        <name>combine_edgelists</name>
        <qualifiedname>cugraph::combine_edgelists</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;</type>
          <declname>d_sources</declname>
        </param>
        <param>
          <type>std::vector&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;</type>
          <declname>d_dests</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt; &amp;&amp;</type>
          <declname>optional_d_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_multi_edges</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Combine edgelists from multiple sources into a single edgelist. </para>
        </briefdescription>
        <detaileddescription>
<para>If executed in a multi-gpu context (handle comms has been initialized) each GPU will operate only on its subset of data. Any shuffling to get edges onto the same GPU should be done prior to calling this function.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sources</parametername>
</parameternamelist>
<parameterdescription>
<para>The source vertex ids to combine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dests</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination vertex ids to combine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional vector of weights to combine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remove_multi_edges</parametername>
</parameternamelist>
<parameterdescription>
<para>If true (the default) then remove multi edges, if false leave them in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;weight_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs and edge weights. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="103" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" bodystart="103" bodyend="200" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="532" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1afdba5ff5cc9f94cd43ac88a9ae0f0597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt; cugraph::symmetrize_edgelist_from_triangular</definition>
        <argsstring>(raft::handle_t const  &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;d_src_v, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;d_dst_v, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;optional_d_weights_v, bool check_diagonal=false)</argsstring>
        <name>symmetrize_edgelist_from_triangular</name>
        <qualifiedname>cugraph::symmetrize_edgelist_from_triangular</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>d_src_v</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>d_dst_v</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;</type>
          <declname>optional_d_weights_v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_diagonal</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>symmetrize an edgelist from the edges in the lower (or upper but not both) triangular part of a graph adjacency matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of weights. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_src_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of source vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_dst_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of destination vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_weights_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional vector of edge weights </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_diagonal</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to check for diagonal edges or not. If set to true, symmetrize only the edges with source != destination (to avoid duplicating every self-loops). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="206" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" bodystart="206" bodyend="259" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="459" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1a69111d2f0750426ee634686f236ef41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::scramble_vertex_ids</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;vertices, size_t lgN)</argsstring>
        <name>scramble_vertex_ids</name>
        <qualifiedname>cugraph::scramble_vertex_ids</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lgN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="261" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="261" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1a1d78d01553b45bd1ee11b3204ef6b3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int64_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int64_t &gt; cugraph::scramble_vertex_ids</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;vertices, size_t lgN)</argsstring>
        <name>scramble_vertex_ids</name>
        <qualifiedname>cugraph::scramble_vertex_ids</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lgN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="265" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="265" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1aff3446e80f1670f982df7bbbe72942a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::scramble_vertex_ids</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;dsts, size_t lgN)</argsstring>
        <name>scramble_vertex_ids</name>
        <qualifiedname>cugraph::scramble_vertex_ids</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>dsts</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lgN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="269" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="269" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1aed8bd713b0148cc607aa4a0466b84820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::scramble_vertex_ids</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;dsts, size_t lgN)</argsstring>
        <name>scramble_vertex_ids</name>
        <qualifiedname>cugraph::scramble_vertex_ids</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>dsts</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lgN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="275" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="275" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1a6683da350dab82423feb47b22d5a0cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::combine_edgelists</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;sources, std::vector&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;dests, std::optional&lt; std::vector&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; &amp;&amp;optional_d_weights, bool remove_multi_edges)</argsstring>
        <name>combine_edgelists</name>
        <qualifiedname>cugraph::combine_edgelists</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>std::vector&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>dests</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; &amp;&amp;</type>
          <declname>optional_d_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_multi_edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="284" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="284" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1a6d31cdbc128c8f0531698ef0db077377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::combine_edgelists</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;sources, std::vector&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;dests, std::optional&lt; std::vector&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; &amp;&amp;optional_d_weights, bool remove_multi_edges)</argsstring>
        <name>combine_edgelists</name>
        <qualifiedname>cugraph::combine_edgelists</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>std::vector&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>dests</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; &amp;&amp;</type>
          <declname>optional_d_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_multi_edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="293" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="293" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1a4f85c68e3deb0f338cb8cdcfdbfbc3f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::combine_edgelists</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;sources, std::vector&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;dests, std::optional&lt; std::vector&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; &amp;&amp;optional_d_weights, bool remove_multi_edges)</argsstring>
        <name>combine_edgelists</name>
        <qualifiedname>cugraph::combine_edgelists</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>std::vector&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>dests</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; &amp;&amp;</type>
          <declname>optional_d_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_multi_edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="302" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="302" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1a803301771012181d33ecf22261fd17fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::combine_edgelists</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;sources, std::vector&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;dests, std::optional&lt; std::vector&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; &amp;&amp;optional_d_weights, bool remove_multi_edges)</argsstring>
        <name>combine_edgelists</name>
        <qualifiedname>cugraph::combine_edgelists</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>std::vector&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>dests</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; &amp;&amp;</type>
          <declname>optional_d_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_multi_edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="311" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="311" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1aec2369171fa2d0c48aa825d52dee02af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::symmetrize_edgelist_from_triangular</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;d_src_v, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;d_dst_v, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;optional_d_weights_v, bool check_diagonal)</argsstring>
        <name>symmetrize_edgelist_from_triangular</name>
        <qualifiedname>cugraph::symmetrize_edgelist_from_triangular</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>d_src_v</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>d_dst_v</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>optional_d_weights_v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_diagonal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="320" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="320" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1a52a26d71acaf30aa98dcd34249d8881a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::symmetrize_edgelist_from_triangular</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;d_src_v, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;d_dst_v, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;optional_d_weights_v, bool check_diagonal)</argsstring>
        <name>symmetrize_edgelist_from_triangular</name>
        <qualifiedname>cugraph::symmetrize_edgelist_from_triangular</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>d_src_v</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>d_dst_v</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>optional_d_weights_v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_diagonal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="330" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="330" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1a84c72edf287650ad6a560c9eebb85b02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::symmetrize_edgelist_from_triangular</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;d_src_v, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;d_dst_v, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;optional_d_weights_v, bool check_diagonal)</argsstring>
        <name>symmetrize_edgelist_from_triangular</name>
        <qualifiedname>cugraph::symmetrize_edgelist_from_triangular</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>d_src_v</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>d_dst_v</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>optional_d_weights_v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_diagonal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="340" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="340" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="generator__tools_8cu_1a7c0ac5665268ed9042a55f7b59cbab5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::symmetrize_edgelist_from_triangular</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;d_src_v, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;d_dst_v, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;optional_d_weights_v, bool check_diagonal)</argsstring>
        <name>symmetrize_edgelist_from_triangular</name>
        <qualifiedname>cugraph::symmetrize_edgelist_from_triangular</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>d_src_v</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>d_dst_v</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>optional_d_weights_v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_diagonal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" line="350" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/generator_tools.cu" declline="350" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1a3044addbde179de4e06f2a56e333f514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::generate_path_graph_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::vector&lt; std::tuple&lt; vertex_t, vertex_t &gt; &gt; const  &amp;component_parameters_v)</argsstring>
        <name>generate_path_graph_edgelist</name>
        <qualifiedname>cugraph::generate_path_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; vertex_t, vertex_t &gt; &gt; const &amp;</type>
          <declname>component_parameters_v</declname>
        </param>
        <briefdescription>
<para>generate an edge list for path graph </para>
        </briefdescription>
        <detaileddescription>
<para>A path graph of size n connects the vertices from 0 to (n - 1) in a single long path: ((0,1), (1,2), ..., (n - 2, n - 1)</para>
<para>If executed in a multi-gpu context (handle comms has been initialized) the path will span all GPUs including an edge from the last vertex on GPU i to the first vertex on GPU (i+1)</para>
<para>This function will generate a collection of path graphs. <computeroutput>component_parameters_v</computeroutput> defines the parameters for generating each component. Each element of <computeroutput>component_parameters_v</computeroutput> defines a tuple consisting of the number of vertices and the base vertex id for the component.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>component_parameters_v</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing tuples consisting of the number of vertices and base vertex id for each component to generate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="38" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" bodystart="38" bodyend="90" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="306" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1ae5ab47d31c808238fa84eb4321cd9a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::generate_2d_mesh_graph_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::vector&lt; std::tuple&lt; vertex_t, vertex_t, vertex_t &gt; &gt; const  &amp;component_parameters_v)</argsstring>
        <name>generate_2d_mesh_graph_edgelist</name>
        <qualifiedname>cugraph::generate_2d_mesh_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; vertex_t, vertex_t, vertex_t &gt; &gt; const &amp;</type>
          <declname>component_parameters_v</declname>
        </param>
        <briefdescription>
<para>generate an edge list for a 2D Mesh Graph </para>
        </briefdescription>
        <detaileddescription>
<para>A sequence of 2D mesh graphs will be constructed according to the component specifications. Each 2D mesh graph is configured with a tuple containing (x, y, base_vertex_id). <computeroutput>component_parameters_v</computeroutput> will contain a tuple for each component.</para>
<para>If executed in a multi-gpu context (handle comms has been initialized) each GPU will generate disjoint 2D mesh constructs of equal size.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>component_parameters_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing tuple defining the configuration of each component </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="94" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" bodystart="94" bodyend="154" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="331" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1a1095acd817a8c82bfa9072d334a9fd32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::generate_3d_mesh_graph_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::vector&lt; std::tuple&lt; vertex_t, vertex_t, vertex_t, vertex_t &gt; &gt; const  &amp;component_parameters_v)</argsstring>
        <name>generate_3d_mesh_graph_edgelist</name>
        <qualifiedname>cugraph::generate_3d_mesh_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; vertex_t, vertex_t, vertex_t, vertex_t &gt; &gt; const &amp;</type>
          <declname>component_parameters_v</declname>
        </param>
        <briefdescription>
<para>generate an edge list for a 3D Mesh Graph </para>
        </briefdescription>
        <detaileddescription>
<para>A sequence of 3D mesh graphs will be constructed according to the component specifications. Each 3D mesh graph is configured with a tuple containing (x, y, z, base_vertex_id). <computeroutput>component_parameters_v</computeroutput> will contain a tuple for each component.</para>
<para>If executed in a multi-gpu context (handle comms has been initialized) each GPU will generate disjoint 3D mesh constructs of equal size.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>component_parameters_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing tuple defining the configuration of each component </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="158" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" bodystart="158" bodyend="232" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="356" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1aa69265e9d95095caa103c66b0da4eac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::generate_complete_graph_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::vector&lt; std::tuple&lt; vertex_t, vertex_t &gt; &gt; const  &amp;component_parameters_v)</argsstring>
        <name>generate_complete_graph_edgelist</name>
        <qualifiedname>cugraph::generate_complete_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; vertex_t, vertex_t &gt; &gt; const &amp;</type>
          <declname>component_parameters_v</declname>
        </param>
        <briefdescription>
<para>generate an edge lists for some complete graphs </para>
        </briefdescription>
        <detaileddescription>
<para>A sequence of complete graphs will be constructed according to the component specifications. Each complete graph is configured with a tuple containing (n, base_vertex_id). <computeroutput>component_parameters_v</computeroutput> will contain a tuple for each component.</para>
<para>If executed in a multi-gpu context (handle comms has been initialized) each GPU will generate disjoint complete graph constructs of equal size.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>component_parameters_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing tuple defining the configuration of each component </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;&gt; A tuple of rmm::device_uvector objects for edge source vertex IDs and edge destination vertex IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="236" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" bodystart="236" bodyend="303" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_generators.hpp" declline="381" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1a3b3050dfe226559c52c696e1f1edc171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::generate_path_graph_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; std::tuple&lt; int32_t, int32_t &gt; &gt; const &amp;component_parms_v)</argsstring>
        <name>generate_path_graph_edgelist</name>
        <qualifiedname>cugraph::generate_path_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; int32_t, int32_t &gt; &gt; const &amp;</type>
          <declname>component_parms_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="306" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" declline="306" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1ab70f573847b47db2851991ec8f4c040f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::generate_path_graph_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; std::tuple&lt; int64_t, int64_t &gt; &gt; const &amp;component_parms_v)</argsstring>
        <name>generate_path_graph_edgelist</name>
        <qualifiedname>cugraph::generate_path_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; int64_t, int64_t &gt; &gt; const &amp;</type>
          <declname>component_parms_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="310" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" declline="310" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1a63687e9aa256c385e8347bc6b6298a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::generate_2d_mesh_graph_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; std::tuple&lt; int32_t, int32_t, int32_t &gt; &gt; const &amp;component_parms_v)</argsstring>
        <name>generate_2d_mesh_graph_edgelist</name>
        <qualifiedname>cugraph::generate_2d_mesh_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; int32_t, int32_t, int32_t &gt; &gt; const &amp;</type>
          <declname>component_parms_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="314" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" declline="314" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1a89d615177258d62fede532638b5430d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::generate_2d_mesh_graph_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; std::tuple&lt; int64_t, int64_t, int64_t &gt; &gt; const &amp;component_parms_v)</argsstring>
        <name>generate_2d_mesh_graph_edgelist</name>
        <qualifiedname>cugraph::generate_2d_mesh_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; int64_t, int64_t, int64_t &gt; &gt; const &amp;</type>
          <declname>component_parms_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="319" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" declline="319" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1a8c1f0f8e54ce5a635a809dbfdc59b86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::generate_3d_mesh_graph_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; std::tuple&lt; int32_t, int32_t, int32_t, int32_t &gt; &gt; const &amp;component_parms_v)</argsstring>
        <name>generate_3d_mesh_graph_edgelist</name>
        <qualifiedname>cugraph::generate_3d_mesh_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; int32_t, int32_t, int32_t, int32_t &gt; &gt; const &amp;</type>
          <declname>component_parms_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="324" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" declline="324" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1a1630a3bb72354bfda23b20cadc0495f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::generate_3d_mesh_graph_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; std::tuple&lt; int64_t, int64_t, int64_t, int64_t &gt; &gt; const &amp;component_parms_v)</argsstring>
        <name>generate_3d_mesh_graph_edgelist</name>
        <qualifiedname>cugraph::generate_3d_mesh_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; int64_t, int64_t, int64_t, int64_t &gt; &gt; const &amp;</type>
          <declname>component_parms_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="329" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" declline="329" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1a5d5e206f29e526544bacd1761edb238b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::generate_complete_graph_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; std::tuple&lt; int32_t, int32_t &gt; &gt; const &amp;component_parms_v)</argsstring>
        <name>generate_complete_graph_edgelist</name>
        <qualifiedname>cugraph::generate_complete_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; int32_t, int32_t &gt; &gt; const &amp;</type>
          <declname>component_parms_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="334" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" declline="334" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="simple__generators_8cu_1af52dbdf927155b4621ee17d89631cb04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::generate_complete_graph_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; std::tuple&lt; int64_t, int64_t &gt; &gt; const &amp;component_parms_v)</argsstring>
        <name>generate_complete_graph_edgelist</name>
        <qualifiedname>cugraph::generate_complete_graph_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; int64_t, int64_t &gt; &gt; const &amp;</type>
          <declname>component_parms_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" line="338" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/generators/simple_generators.cu" declline="338" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="force__atlas2_8cu_1ad32a4d3984264ce62bf617164930fa4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::force_atlas2</definition>
        <argsstring>(raft::handle_t const  &amp;handle, legacy::GraphCOOView&lt; vertex_t, edge_t, weight_t &gt; &amp;graph, float *pos, const int max_iter=500, float *x_start=nullptr, float *y_start=nullptr, bool outbound_attraction_distribution=true, bool lin_log_mode=false, bool prevent_overlapping=false, const float edge_weight_influence=1.0, const float jitter_tolerance=1.0, bool barnes_hut_optimize=true, const float barnes_hut_theta=0.5, const float scaling_ratio=2.0, bool strong_gravity_mode=false, const float gravity=1.0, bool verbose=false, internals::GraphBasedDimRedCallback *callback=nullptr)</argsstring>
        <name>force_atlas2</name>
        <qualifiedname>cugraph::force_atlas2</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; vertex_t, edge_t, weight_t &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>max_iter</declname>
          <defval>500</defval>
        </param>
        <param>
          <type>float *</type>
          <declname>x_start</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float *</type>
          <declname>y_start</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>outbound_attraction_distribution</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>lin_log_mode</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>prevent_overlapping</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const float</type>
          <declname>edge_weight_influence</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const float</type>
          <declname>jitter_tolerance</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>barnes_hut_optimize</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const float</type>
          <declname>barnes_hut_theta</declname>
          <defval>0.5</defval>
        </param>
        <param>
          <type>const float</type>
          <declname>scaling_ratio</declname>
          <defval>2.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>strong_gravity_mode</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const float</type>
          <declname>gravity</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1internals_1_1GraphBasedDimRedCallback" kindref="compound">internals::GraphBasedDimRedCallback</ref> *</type>
          <declname>callback</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>ForceAtlas2 is a continuous graph layout algorithm for handy network visualization. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                                         NOTE: Peak memory allocation occurs at 17*V.
</verbatim> <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported values : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, the multi GPU version will be selected. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>cuGraph graph descriptor, should contain the connectivity information as a COO. Graph is considered undirected. Edge weights are used for this algorithm and set to 1 by default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Device array (2, n) containing x-axis and y-axis positions; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_iter</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of iterations Force Atlas 2 should run for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Device array containing starting x-axis positions; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Device array containing starting y-axis positions; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">outbound_attraction_distribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Distributes attraction along outbound edges. Hubs attract less and thus are pushed to the borders. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lin_log_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch ForceAtlas’ model from lin-lin to lin-log (tribute to Andreas Noack). Makes clusters more tight. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prevent_overlapping</parametername>
</parameternamelist>
<parameterdescription>
<para>Prevent nodes from overlapping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_weight_influence</parametername>
</parameternamelist>
<parameterdescription>
<para>How much influence you give to the edges weight. 0 is “no influence” and 1 is “normal”. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">jitter_tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>How much swinging you allow. Above 1 discouraged. Lower gives less speed and more precision. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">barnes_hut_optimize</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use the Barnes Hut approximation or the slower exact version. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">barnes_hut_theta</parametername>
</parameternamelist>
<parameterdescription>
<para>Float between 0 and 1. Tradeoff for speed (1) vs accuracy (0) for Barnes Hut only. @params[in] scaling_ratio Float strictly positive. How much repulsion you want. More makes a more sparse graph. Switching from regular mode to LinLog mode needs a readjustment of the scaling parameter. @params[in] strong_gravity_mode Sets a force that attracts the nodes that are distant from the center more. It is so strong that it can sometimes dominate other forces. @params[in] gravity Attracts nodes to the center. Prevents islands from drifting away. @params[in] verbose Output convergence info at each interation. @params[in] callback An instance of GraphBasedDimRedCallback class to intercept the internal state of positions while they are being trained. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/layout/legacy/force_atlas2.cu" line="23" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/layout/legacy/force_atlas2.cu" bodystart="23" bodyend="81" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="199" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="force__atlas2_8cu_1a3395e944c034f4993da883bc82e99b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::force_atlas2&lt; int, int, float &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, legacy::GraphCOOView&lt; int, int, float &gt; &amp;graph, float *pos, const int max_iter, float *x_start, float *y_start, bool outbound_attraction_distribution, bool lin_log_mode, bool prevent_overlapping, const float edge_weight_influence, const float jitter_tolerance, bool barnes_hut_optimize, const float barnes_hut_theta, const float scaling_ratio, bool strong_gravity_mode, const float gravity, bool verbose, internals::GraphBasedDimRedCallback *callback)</argsstring>
        <name>force_atlas2&lt; int, int, float &gt;</name>
        <qualifiedname>cugraph::force_atlas2&lt; int, int, float &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int, int, float &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>max_iter</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x_start</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y_start</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>outbound_attraction_distribution</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lin_log_mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>prevent_overlapping</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>edge_weight_influence</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>jitter_tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>barnes_hut_optimize</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>barnes_hut_theta</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scaling_ratio</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>strong_gravity_mode</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>gravity</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1internals_1_1GraphBasedDimRedCallback" kindref="compound">internals::GraphBasedDimRedCallback</ref> *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/layout/legacy/force_atlas2.cu" line="83" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/layout/legacy/force_atlas2.cu" declline="83" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="force__atlas2_8cu_1a50d52f67b5a40516b3971f4ccad06128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::force_atlas2&lt; int, int, double &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, legacy::GraphCOOView&lt; int, int, double &gt; &amp;graph, float *pos, const int max_iter, float *x_start, float *y_start, bool outbound_attraction_distribution, bool lin_log_mode, bool prevent_overlapping, const float edge_weight_influence, const float jitter_tolerance, bool barnes_hut_optimize, const float barnes_hut_theta, const float scaling_ratio, bool strong_gravity_mode, const float gravity, bool verbose, internals::GraphBasedDimRedCallback *callback)</argsstring>
        <name>force_atlas2&lt; int, int, double &gt;</name>
        <qualifiedname>cugraph::force_atlas2&lt; int, int, double &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int, int, double &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>max_iter</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x_start</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y_start</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>outbound_attraction_distribution</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lin_log_mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>prevent_overlapping</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>edge_weight_influence</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>jitter_tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>barnes_hut_optimize</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>barnes_hut_theta</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scaling_ratio</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>strong_gravity_mode</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>gravity</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1internals_1_1GraphBasedDimRedCallback" kindref="compound">internals::GraphBasedDimRedCallback</ref> *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/layout/legacy/force_atlas2.cu" line="102" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/layout/legacy/force_atlas2.cu" declline="102" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="hungarian_8cu_1a867079c86af90114a5a687092e445e7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
        </templateparamlist>
        <type>weight_t</type>
        <definition>weight_t cugraph::hungarian</definition>
        <argsstring>(raft::handle_t const  &amp;handle, legacy::GraphCOOView&lt; vertex_t, edge_t, weight_t &gt; const  &amp;graph, vertex_t num_workers, vertex_t const  *workers, vertex_t *assignments)</argsstring>
        <name>hungarian</name>
        <qualifiedname>cugraph::hungarian</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; vertex_t, edge_t, weight_t &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>num_workers</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>workers</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>assignments</declname>
        </param>
        <briefdescription>
<para>Compute Hungarian algorithm on a weighted bipartite graph. </para>
        </briefdescription>
        <detaileddescription>
<para>The Hungarian algorithm computes an assigment of &quot;jobs&quot; to &quot;workers&quot;. This function accepts a weighted graph and a vertex list identifying the &quot;workers&quot;. The weights in the weighted graph identify the cost of assigning a particular job to a worker. The algorithm computes a minimum cost assignment and returns the cost as well as a vector identifying the assignment.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported values : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>cuGRAPH COO graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_workers</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vertices in the worker set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">workers</parametername>
</parameternamelist>
<parameterdescription>
<para>device pointer to an array of worker vertex ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">assignments</parametername>
</parameternamelist>
<parameterdescription>
<para>device pointer to an array to which the assignment will be written. The array should be num_workers long, and will identify which vertex id (job) is assigned to that worker </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" line="266" column="10" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" bodystart="266" bodyend="274" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="458" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="hungarian_8cu_1adc7e86752cf1de0fdcfae6fcb44753d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
        </templateparamlist>
        <type>weight_t</type>
        <definition>weight_t cugraph::hungarian</definition>
        <argsstring>(raft::handle_t const  &amp;handle, legacy::GraphCOOView&lt; vertex_t, edge_t, weight_t &gt; const  &amp;graph, vertex_t num_workers, vertex_t const  *workers, vertex_t *assignments, weight_t epsilon)</argsstring>
        <name>hungarian</name>
        <qualifiedname>cugraph::hungarian</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; vertex_t, edge_t, weight_t &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>num_workers</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>workers</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>assignments</declname>
        </param>
        <param>
          <type>weight_t</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Compute Hungarian algorithm on a weighted bipartite graph. </para>
        </briefdescription>
        <detaileddescription>
<para>The Hungarian algorithm computes an assigment of &quot;jobs&quot; to &quot;workers&quot;. This function accepts a weighted graph and a vertex list identifying the &quot;workers&quot;. The weights in the weighted graph identify the cost of assigning a particular job to a worker. The algorithm computes a minimum cost assignment and returns the cost as well as a vector identifying the assignment.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported values : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>cuGRAPH COO graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_workers</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vertices in the worker set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">workers</parametername>
</parameternamelist>
<parameterdescription>
<para>device pointer to an array of worker vertex ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">assignments</parametername>
</parameternamelist>
<parameterdescription>
<para>device pointer to an array to which the assignment will be written. The array should be num_workers long, and will identify which vertex id (job) is assigned to that worker </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter to define precision of comparisons in reducing weights to zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" line="277" column="10" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" bodystart="277" bodyend="285" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="491" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="hungarian_8cu_1a4a2c748091318b4a79507a720b86dff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template int32_t</type>
        <definition>template int32_t cugraph::hungarian&lt; int32_t, int32_t, int32_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;, legacy::GraphCOOView&lt; int32_t, int32_t, int32_t &gt; const &amp;, int32_t, int32_t const *, int32_t *, int32_t)</argsstring>
        <name>hungarian&lt; int32_t, int32_t, int32_t &gt;</name>
        <qualifiedname>cugraph::hungarian&lt; int32_t, int32_t, int32_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int32_t, int32_t, int32_t &gt; const &amp;</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>int32_t const *</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" line="287" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" declline="287" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="hungarian_8cu_1a4b002185cd4c9e4955d599753041494c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::hungarian&lt; int32_t, int32_t, float &gt;</definition>
        <argsstring>(raft::handle_t const &amp;, legacy::GraphCOOView&lt; int32_t, int32_t, float &gt; const &amp;, int32_t, int32_t const *, int32_t *, float)</argsstring>
        <name>hungarian&lt; int32_t, int32_t, float &gt;</name>
        <qualifiedname>cugraph::hungarian&lt; int32_t, int32_t, float &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int32_t, int32_t, float &gt; const &amp;</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>int32_t const *</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" line="295" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" declline="295" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="hungarian_8cu_1a2ff9e694507093fc7f4daa053e610b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::hungarian&lt; int32_t, int32_t, double &gt;</definition>
        <argsstring>(raft::handle_t const &amp;, legacy::GraphCOOView&lt; int32_t, int32_t, double &gt; const &amp;, int32_t, int32_t const *, int32_t *, double)</argsstring>
        <name>hungarian&lt; int32_t, int32_t, double &gt;</name>
        <qualifiedname>cugraph::hungarian&lt; int32_t, int32_t, double &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int32_t, int32_t, double &gt; const &amp;</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>int32_t const *</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" line="302" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" declline="302" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="hungarian_8cu_1ab24a34de2e61ed6de6873c4ea611e78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template int32_t</type>
        <definition>template int32_t cugraph::hungarian&lt; int32_t, int32_t, int32_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;, legacy::GraphCOOView&lt; int32_t, int32_t, int32_t &gt; const &amp;, int32_t, int32_t const *, int32_t *)</argsstring>
        <name>hungarian&lt; int32_t, int32_t, int32_t &gt;</name>
        <qualifiedname>cugraph::hungarian&lt; int32_t, int32_t, int32_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int32_t, int32_t, int32_t &gt; const &amp;</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>int32_t const *</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" line="310" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" declline="310" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="hungarian_8cu_1a0e7eba4343e3a80d6ed49a4aab68c7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::hungarian&lt; int32_t, int32_t, float &gt;</definition>
        <argsstring>(raft::handle_t const &amp;, legacy::GraphCOOView&lt; int32_t, int32_t, float &gt; const &amp;, int32_t, int32_t const *, int32_t *)</argsstring>
        <name>hungarian&lt; int32_t, int32_t, float &gt;</name>
        <qualifiedname>cugraph::hungarian&lt; int32_t, int32_t, float &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int32_t, int32_t, float &gt; const &amp;</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>int32_t const *</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" line="317" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" declline="317" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="hungarian_8cu_1a2d2fd94b804396e9b31aa8225dc5d54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::hungarian&lt; int32_t, int32_t, double &gt;</definition>
        <argsstring>(raft::handle_t const &amp;, legacy::GraphCOOView&lt; int32_t, int32_t, double &gt; const &amp;, int32_t, int32_t const *, int32_t *)</argsstring>
        <name>hungarian&lt; int32_t, int32_t, double &gt;</name>
        <qualifiedname>cugraph::hungarian&lt; int32_t, int32_t, double &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCOOView" kindref="compound">legacy::GraphCOOView</ref>&lt; int32_t, int32_t, double &gt; const &amp;</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>int32_t const *</type>
        </param>
        <param>
          <type>int32_t *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" line="323" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/linear_assignment/legacy/hungarian.cu" declline="323" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="hits__impl_8cuh_1afb18a037a980d21343951e62ed34f128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename result_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; result_t, size_t &gt;</type>
        <definition>std::tuple&lt; result_t, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, true, multi_gpu &gt; const  &amp;graph_view, result_t *hubs, result_t *authorities, result_t epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, true, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>result_t *</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>result_t *</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>result_t</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
<para>Compute HITS scores. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes HITS scores for the vertices of a graph</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on erroneous input arguments</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hubs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input/output hub score array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>authorities</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output authorities score array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Error tolerance to check convergence. Convergence is assumed if the sum of the differences in hub values between two consecutive iterations is less than <computeroutput>epsilon</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of HITS iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>has_initial_guess</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to <computeroutput>true</computeroutput>, values in the hubs output array (pointed by <computeroutput>hubs</computeroutput>) is used as initial hub values. If false, initial hub values are set to 1.0 divided by the number of vertices in the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to <computeroutput>true</computeroutput>, final hub and authority scores are normalized (the L1-norm of the returned hub and authority score arrays is 1.0) before returning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;result_t, size_t&gt; A tuple of sum of the differences of hub scores of the last two iterations and the total number of iterations taken to reach the final result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_impl.cuh" line="202" column="12" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_impl.cuh" bodystart="202" bodyend="221" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1409" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hits__mg_8cu_1a13fc72e2036f16d756d88628cf5768da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; float, size_t &gt;</type>
        <definition>template std::tuple&lt; float, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, float *const hubs, float *const authorities, float epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" line="22" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" declline="22" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__mg_8cu_1a334ec6875454a757dd1703cb0d7a66ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; double, size_t &gt;</type>
        <definition>template std::tuple&lt; double, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, double *const hubs, double *const authorities, double epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" line="33" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" declline="33" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__mg_8cu_1acd2a8f838c4a52aae1e81caefce51b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; float, size_t &gt;</type>
        <definition>template std::tuple&lt; float, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, float *const hubs, float *const authorities, float epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" line="44" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" declline="44" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__mg_8cu_1a6d35032b04b2c4b1c550ea087f8bd99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; double, size_t &gt;</type>
        <definition>template std::tuple&lt; double, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, double *const hubs, double *const authorities, double epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" line="55" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" declline="55" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__mg_8cu_1a1a753e77599e8c9264a956099509ffd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; float, size_t &gt;</type>
        <definition>template std::tuple&lt; float, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, float *const hubs, float *const authorities, float epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" line="66" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" declline="66" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__mg_8cu_1a31b90b18aa686a1eafe60990351d7ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; double, size_t &gt;</type>
        <definition>template std::tuple&lt; double, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, double *const hubs, double *const authorities, double epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" line="77" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_mg.cu" declline="77" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__sg_8cu_1a52e51dc175c8dfe2fb612c9ad5fc5e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; float, size_t &gt;</type>
        <definition>template std::tuple&lt; float, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, float *const hubs, float *const authorities, float epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" line="22" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" declline="22" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__sg_8cu_1a7aedeb91d4b3743535ce8cdc1bb4255d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; double, size_t &gt;</type>
        <definition>template std::tuple&lt; double, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, double *const hubs, double *const authorities, double epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" line="33" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" declline="33" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__sg_8cu_1a08ec90a69745eb6d5fdb2fdbdd32b742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; float, size_t &gt;</type>
        <definition>template std::tuple&lt; float, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, float *const hubs, float *const authorities, float epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" line="44" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" declline="44" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__sg_8cu_1ab61ace4b8ffda61f77b6f93244dfbb42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; double, size_t &gt;</type>
        <definition>template std::tuple&lt; double, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, double *const hubs, double *const authorities, double epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" line="55" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" declline="55" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__sg_8cu_1ae6ea1f24a98ace76d39f4314171ce163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; float, size_t &gt;</type>
        <definition>template std::tuple&lt; float, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, float *const hubs, float *const authorities, float epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" line="66" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" declline="66" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hits__sg_8cu_1a43bdcb81584c1e953fb373f241f6c4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; double, size_t &gt;</type>
        <definition>template std::tuple&lt; double, size_t &gt; cugraph::hits</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, double *const hubs, double *const authorities, double epsilon, size_t max_iterations, bool has_initial_hubs_guess, bool normalize, bool do_expensive_check)</argsstring>
        <name>hits</name>
        <qualifiedname>cugraph::hits</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>hubs</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>authorities</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_hubs_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" line="77" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/hits_sg.cu" declline="77" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__impl_8cuh_1a1d662961cac4e44a4e58b4eb7c268c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename result_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, true, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::optional&lt; weight_t const  * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; vertex_t const  * &gt; personalization_vertices, std::optional&lt; result_t const  * &gt; personalization_values, std::optional&lt; vertex_t &gt; personalization_vector_size, result_t *pageranks, result_t alpha, result_t epsilon, size_t max_iterations=500, bool has_initial_guess=false, bool do_expensive_check=false)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, true, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; weight_t const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; vertex_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; result_t const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; vertex_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>result_t *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>result_t</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>result_t</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
          <defval>500</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute PageRank scores. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This API will be deprecated to replaced by the new version below that returns metadata about the algorithm.</para>
</xrefdescription></xrefsect></para>
<para>This function computes general (if <computeroutput>personalization_vertices</computeroutput> is <computeroutput>nullptr</computeroutput>) or personalized (if <computeroutput>personalization_vertices</computeroutput> is not <computeroutput>nullptr</computeroutput>.) PageRank scores.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on erroneous input arguments or if fails to converge before <computeroutput>max_iterations</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of PageRank scores. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == false, edge weights are assumed to be 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precomputed_vertex_out_weight_sums</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array storing sums of out-going edge weights for the vertices (for re-use) or <computeroutput>std::nullopt</computeroutput>. If <computeroutput>std::nullopt</computeroutput>, these values are freshly computed. Computing these values outside this function reduces the number of memory allocations/deallocations and computing if a user repeatedly computes PageRank scores using the same graph with different personalization vectors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>personalization_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array storing personalization vertex identifiers (compute personalized PageRank) or <computeroutput>std::nullopt</computeroutput> (compute general PageRank). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>personalization_values</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array storing personalization values for the vertices in the personalization set. Relevant only if <computeroutput>personalization_vertices</computeroutput> is not <computeroutput>std::nullopt</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>personalization_vector_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the personalization set. If @personalization_vertices is not <computeroutput>std::nullopt</computeroutput>, the sizes of the arrays pointed by <computeroutput>personalization_vertices</computeroutput> and <computeroutput>personalization_values</computeroutput> should be <computeroutput>personalization_vector_size</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pageranks</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output PageRank score array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>PageRank damping factor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Error tolerance to check convergence. Convergence is assumed if the sum of the differences in PageRank values between two consecutive iterations is less than the number of vertices in the graph multiplied by <computeroutput>epsilon</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of PageRank iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>has_initial_guess</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to <computeroutput>true</computeroutput>, values in the PageRank output array (pointed by <computeroutput>pageranks</computeroutput>) is used as initial PageRank values. If false, initial PageRank values are set to 1.0 divided by the number of vertices in the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_impl.cuh" line="343" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_impl.cuh" bodystart="343" bodyend="412" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1261" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__impl_8cuh_1a51abddb6d77003ec9e08656a6563776e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename result_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; result_t &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; result_t &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, true, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; weight_t const  &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; vertex_t const  &gt;, raft::device_span&lt; result_t const  &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; result_t const  &gt; &gt; initial_pageranks, result_t alpha, result_t epsilon, size_t max_iterations=500, bool do_expensive_check=false)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, true, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; weight_t const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; vertex_t const &gt;, raft::device_span&lt; result_t const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; result_t const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>result_t</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>result_t</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
          <defval>500</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute PageRank scores. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes general (if <computeroutput>personalization_vertices</computeroutput> is <computeroutput>nullptr</computeroutput>) or personalized (if <computeroutput>personalization_vertices</computeroutput> is not <computeroutput>nullptr</computeroutput>.) PageRank scores.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on erroneous input arguments or if fails to converge before <computeroutput>max_iterations</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of PageRank scores. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == false, edge weights are assumed to be 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precomputed_vertex_out_weight_sums</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array storing sums of out-going edge weights for the vertices (for re-use) or <computeroutput>std::nullopt</computeroutput>. If <computeroutput>std::nullopt</computeroutput>, these values are freshly computed. Computing these values outside this function reduces the number of memory allocations/deallocations and computing if a user repeatedly computes PageRank scores using the same graph with different personalization vectors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>personalization</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional tuple containing device spans of vertex identifiers and personalization values for the vertices (compute personalized PageRank) or <computeroutput>std::nullopt</computeroutput> (compute general PageRank). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_pageranks</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional device span containing initial PageRank values. If specified this array will be used as the initial values and the PageRank values will be updated in place. If not specified then the initial values will be set to 1.0 divided by the number of vertices in the graph and the return value will contain an <computeroutput>rmm::device_uvector</computeroutput> containing the resulting PageRank values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>PageRank damping factor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Error tolerance to check convergence. Convergence is assumed if the sum of the differences in PageRank values between two consecutive iterations is less than the number of vertices in the graph multiplied by <computeroutput>epsilon</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of PageRank iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple containing the optional pagerank results (populated if <computeroutput>initial_pageranks</computeroutput> is set to <computeroutput>std::nullopt</computeroutput>) and a metadata structure with metadata indicating how many iterations were run and whether the algorithm converged or not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_impl.cuh" line="415" column="12" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_impl.cuh" bodystart="415" bodyend="455" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1330" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1a3c0c8ce2c3e6b3acf0cee49c90abde7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; float const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int32_t const * &gt; personalization_vertices, std::optional&lt; float const * &gt; personalization_values, std::optional&lt; int32_t &gt; personalization_vector_size, float *pageranks, float alpha, float epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="21" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="21" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1a659a86150995c321b78949f99a4bb153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; double const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int32_t const * &gt; personalization_vertices, std::optional&lt; double const * &gt; personalization_values, std::optional&lt; int32_t &gt; personalization_vector_size, double *pageranks, double alpha, double epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="35" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="35" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1a8cb173dd5115ce51a8b9d500c98e1557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; float const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int32_t const * &gt; personalization_vertices, std::optional&lt; float const * &gt; personalization_values, std::optional&lt; int32_t &gt; personalization_vector_size, float *pageranks, float alpha, float epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="49" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="49" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1aefb18b994b9899a8d3d721884b438378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; double const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int32_t const * &gt; personalization_vertices, std::optional&lt; double const * &gt; personalization_values, std::optional&lt; int32_t &gt; personalization_vector_size, double *pageranks, double alpha, double epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="63" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="63" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1a5158f098b7b8dd0499933ae82c03a4eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; float const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int64_t const * &gt; personalization_vertices, std::optional&lt; float const * &gt; personalization_values, std::optional&lt; int64_t &gt; personalization_vector_size, float *pageranks, float alpha, float epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int64_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int64_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="77" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="77" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1a5570900185b4e1e1c9592042145a07cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; double const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int64_t const * &gt; personalization_vertices, std::optional&lt; double const * &gt; personalization_values, std::optional&lt; int64_t &gt; personalization_vector_size, double *pageranks, double alpha, double epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int64_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int64_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="91" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="91" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1abae06f0494952dd9342e3574fc7f7c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_pageranks, float alpha, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="105" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="105" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1ad38aca4f568fc61dab700389ff483ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_pageranks, double alpha, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="118" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="118" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1ab75ab994de0345f23594e99ce176afef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_pageranks, float alpha, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="131" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="131" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1a2392c059dd731039619478799c0122fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_pageranks, double alpha, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="144" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="144" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1ad791570de28234c6e5a95c2f324e3572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_pageranks, float alpha, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="157" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="157" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__mg_8cu_1a8fe333a8a1d6d03eb9a455eefce8926a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_pageranks, double alpha, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" line="170" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_mg.cu" declline="170" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1aec234d6faf45fe09f57cbfc6bc906af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; float const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int32_t const * &gt; personalization_vertices, std::optional&lt; float const * &gt; personalization_values, std::optional&lt; int32_t &gt; personalization_vector_size, float *pageranks, float alpha, float epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="21" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="21" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1a0e18eaecebd360e8e04091b21acd9cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; double const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int32_t const * &gt; personalization_vertices, std::optional&lt; double const * &gt; personalization_values, std::optional&lt; int32_t &gt; personalization_vector_size, double *pageranks, double alpha, double epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="35" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="35" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1a5aa314881aa833ac36b255f0f1f604b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; float const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int32_t const * &gt; personalization_vertices, std::optional&lt; float const * &gt; personalization_values, std::optional&lt; int32_t &gt; personalization_vector_size, float *pageranks, float alpha, float epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="49" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="49" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1a6b956e99c93bc7e7b3c6c1084370a83f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; double const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int32_t const * &gt; personalization_vertices, std::optional&lt; double const * &gt; personalization_values, std::optional&lt; int32_t &gt; personalization_vector_size, double *pageranks, double alpha, double epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="63" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="63" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1a90b6473a0eabf7d06617f24b7696f7ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; float const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int64_t const * &gt; personalization_vertices, std::optional&lt; float const * &gt; personalization_values, std::optional&lt; int64_t &gt; personalization_vector_size, float *pageranks, float alpha, float epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int64_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; float const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int64_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="77" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="77" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1ac51c67b2d1617d66f3a4d99840d692d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; double const * &gt; precomputed_vertex_out_weight_sums, std::optional&lt; int64_t const * &gt; personalization_vertices, std::optional&lt; double const * &gt; personalization_values, std::optional&lt; int64_t &gt; personalization_vector_size, double *pageranks, double alpha, double epsilon, size_t max_iterations, bool has_initial_guess, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; int64_t const * &gt;</type>
          <declname>personalization_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; double const * &gt;</type>
          <declname>personalization_values</declname>
        </param>
        <param>
          <type>std::optional&lt; int64_t &gt;</type>
          <declname>personalization_vector_size</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_initial_guess</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="91" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="91" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1a73507fc7204e884c26f7d9fb190dbbd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_pageranks, float alpha, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="105" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="105" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1a7e544b0814d0f3357d881ae2b9e89cf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_pageranks, double alpha, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="118" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="118" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1a8c923e46ca227bf6aaf3e21411b301d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_pageranks, float alpha, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="131" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="131" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1a70d2d80d2ba1997291089e7652405020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_pageranks, double alpha, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="144" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="144" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1a8c3638f8dfaa0f9bd82cfa3dd73da307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; float &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; float const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; float const &gt; &gt; initial_pageranks, float alpha, float epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; float const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; float const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="157" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="157" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="pagerank__sg_8cu_1ad50267166f0668726664ec3605c7a7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, <ref refid="structcugraph_1_1centrality__algorithm__metadata__t" kindref="compound">centrality_algorithm_metadata_t</ref> &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; double &gt;, centrality_algorithm_metadata_t &gt; cugraph::pagerank</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; double const &gt; &gt; precomputed_vertex_out_weight_sums, std::optional&lt; std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt; personalization, std::optional&lt; raft::device_span&lt; double const &gt; &gt; initial_pageranks, double alpha, double epsilon, size_t max_iterations, bool do_expensive_check)</argsstring>
        <name>pagerank</name>
        <qualifiedname>cugraph::pagerank</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>precomputed_vertex_out_weight_sums</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; double const &gt; &gt; &gt;</type>
          <declname>personalization</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; double const &gt; &gt;</type>
          <declname>initial_pageranks</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" line="170" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_analysis/pagerank_sg.cu" declline="170" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__impl_8cuh_1a382ce3bafa8b8346fc98868152ea311f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; weight_t &gt;</type>
        <definition>rmm::device_uvector&lt; weight_t &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; vertex_t const  &gt;, raft::device_span&lt; vertex_t const  &gt; &gt; vertex_pairs, bool do_expensive_check=false)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; vertex_t const &gt;, raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute Jaccard similarity coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>Similarity is computed for every pair of vertices specified. Note that similarity algorithms expect a symmetric graph.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == true, use the weights associated with the graph. If false, assume a weight of 1 for all edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple of device spans defining the vertex pairs to compute similarity for In a multi-gpu context each vertex pair should be local to this GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>similarity coefficient for the corresponding <computeroutput>vertex_pairs</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_impl.cuh" line="43" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_impl.cuh" bodystart="43" bodyend="58" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2078" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__impl_8cuh_1a96dc3c76879adb5f76a0585c36493bfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; weight_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; weight_t &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; vertex_t const  &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check=false)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute Jaccard all pairs similarity coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>Similarity is computed for all pairs of vertices. Note that in a sparse graph, many of the vertex pairs will have a score of zero. We actually compute similarity only for vertices that are two hop neighbors within the graph, since vertices that are not two hop neighbors will have a score of 0.</para>
<para>If <computeroutput>vertices</computeroutput> is specified we will compute similarity on two hop neighbors the <computeroutput>vertices</computeroutput>. If <computeroutput>vertices</computeroutput> is not specified it will compute similarity on all two hop neighbors in the graph.</para>
<para>If <computeroutput>topk</computeroutput> is specified only the top <computeroutput>topk</computeroutput> scoring vertex pairs will be returned, if not specified then scores for all computed vertex pairs will be returned.</para>
<para>Note the list of two hop neighbors in the entire graph might be a large number of vertex pairs. If the graph is dense enough it could be as large as the the number of vertices squared, which might run out of memory.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == true, use the weights associated with the graph. If false, assume a weight of 1 for all edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>optional device span defining the seed vertices. In a multi-gpu context the vertices should be local to this GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topk</parametername>
</parameternamelist>
<parameterdescription>
<para>optional specification of the how many of the top scoring vertex pairs should be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple containing three device vectors (v1, v2, score) of the same length. Corresponding elements in the vectors identify a result, v1 identifying a vertex in the graph, v2 identifying one of v1&apos;s two hop neighors, and the score identifying the similarity score between v1 and v2. If <computeroutput>topk</computeroutput> was specified then the vectors will be no longer than <computeroutput>topk</computeroutput> elements. In a multi-gpu context, if <computeroutput>topk</computeroutput> is specified all results will return on GPU rank 0, otherwise they will be returned on the local GPU for vertex v1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_impl.cuh" line="63" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_impl.cuh" bodystart="63" bodyend="80" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2197" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1a0c26aebff534d463d621fcd99b3d681c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="20" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="20" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1a68a833d6050880938c5da8dd45a0c90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="27" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="27" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1a72e458c953557bbea9ce11879dd7adaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="34" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="34" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1a195dbe8e9b6b3f2d3adae0a99f7d5395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="41" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="41" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1a150c3503f18f9e1d27328a014d98dd91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="48" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="48" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1a92eb2ef8d9e1b29b627afc99feb1d38c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="55" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="55" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1abf8576a898c307ada5d6bd12541ef122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="64" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="64" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1af884107d405464e8dab35f79c99bb847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="74" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="74" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1ac2d95b43b55b109cb12beafa106ec348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="84" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="84" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1a7e919c2fcd1495d2e29e450d33044497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="94" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="94" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1a4ae10c8c24b096578dea65825ee379dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="104" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="104" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__mg_8cu_1af1d1694a5f05cf47188b9f1a07592561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" line="114" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_mg.cu" declline="114" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1a4ed53279988f735df48312cbee81cfc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="20" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="20" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1ad2400a9dfa14ad608d842b49aa301933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="27" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="27" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1a326afedb8ee4e175ea588f0a9e6ae503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="34" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="34" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1aea1ecca569c47fc3d25c1b0ae76a634c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="41" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="41" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1a38a2fc1b24155a1119363e778be811cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="48" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="48" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1a70bc5a6fb449f858e4fe107d660dab88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::jaccard_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>jaccard_coefficients</name>
        <qualifiedname>cugraph::jaccard_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="55" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="55" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1a40a3054de17163a7f511d2cfce3f9f2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="64" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="64" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1a76fb2afa2e3889ed9a7a8dc6c0878798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="74" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="74" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1a3eecea0b704235fd6389d7b264e20b4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="84" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="84" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1a9bc6e84a4ff30780b8aa8c049fc0d6ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="94" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="94" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1ac41140311620bae5c00b395c4a6924d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="104" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="104" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="jaccard__sg_8cu_1a95df7abafd3707bfcf5889cae8d5e522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::jaccard_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>jaccard_all_pairs_coefficients</name>
        <qualifiedname>cugraph::jaccard_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" line="114" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/jaccard_sg.cu" declline="114" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__impl_8cuh_1a82f7e60a6bd74831a8b80643fadfd9df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; weight_t &gt;</type>
        <definition>rmm::device_uvector&lt; weight_t &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; vertex_t const  &gt;, raft::device_span&lt; vertex_t const  &gt; &gt; vertex_pairs, bool do_expensive_check=false)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; vertex_t const &gt;, raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute overlap similarity coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>Similarity is computed for every pair of vertices specified. Note that similarity algorithms expect a symmetric graph.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == true, use the weights associated with the graph. If false, assume a weight of 1 for all edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple of device spans defining the vertex pairs to compute similarity for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple of device spans defining the vertex pairs to compute similarity for In a multi-gpu context each vertex pair should be local to this GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>similarity coefficient for the corresponding <computeroutput>vertex_pairs</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_impl.cuh" line="43" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_impl.cuh" bodystart="43" bodyend="58" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2142" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="overlap__impl_8cuh_1a73e437b949aed021ad8e5c205f9047d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; weight_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; weight_t &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; vertex_t const  &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check=false)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute overlap similarity coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>Similarity is computed for all pairs of vertices. Note that in a sparse graph, many of the vertex pairs will have a score of zero. We actually compute similarity only for vertices that are two hop neighbors within the graph, since vertices that are not two hop neighbors will have a score of 0.</para>
<para>If <computeroutput>vertices</computeroutput> is specified we will compute similarity on two hop neighbors the <computeroutput>vertices</computeroutput>. If <computeroutput>vertices</computeroutput> is not specified it will compute similarity on all two hop neighbors in the graph.</para>
<para>If <computeroutput>topk</computeroutput> is specified only the top <computeroutput>topk</computeroutput> scoring vertex pairs will be returned, if not specified then scores for all computed vertex pairs will be returned.</para>
<para>Note the list of two hop neighbors in the entire graph might be a large number of vertex pairs. If the graph is dense enough it could be as large as the the number of vertices squared, which might run out of memory.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == true, use the weights associated with the graph. If false, assume a weight of 1 for all edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>optional device span defining the seed vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topk</parametername>
</parameternamelist>
<parameterdescription>
<para>optional specification of the how many of the top scoring vertex pairs should be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple containing three device vectors (v1, v2, score) of the same length. Corresponding elements in the vectors identify a result, v1 identifying a vertex in the graph, v2 identifying one of v1&apos;s two hop neighors, and the score identifying the similarity score between v1 and v2. If <computeroutput>topk</computeroutput> was specified then the vectors will be no longer than <computeroutput>topk</computeroutput> elements. In a multi-gpu context, if <computeroutput>topk</computeroutput> is specified all results will return on GPU rank 0, otherwise they will be returned on the local GPU for vertex v1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_impl.cuh" line="63" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_impl.cuh" bodystart="63" bodyend="80" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2307" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1a71bf14ad9b8150575b2824397d4d5be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="20" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="20" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1a867d02d0fcd8def5a918022ffbc260b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="27" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="27" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1af5f561c20511d319ec391437412b0f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="34" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="34" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1a9cc56b81b79c661a2373ea951e2ccbb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="41" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="41" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1abb28502324c3aae979b536a0163efb47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="48" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="48" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1afe53535c6aba072bb24c80983ed183c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="55" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="55" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1a734aab0543be11f359d7ace97e87726c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="64" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="64" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1ab1c0218108bfe797455d77370c61f45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="74" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="74" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1a83e22db341ddcde91813d1eafe211cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="84" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="84" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1af9674167e48fdb2f10d45e28b6c20062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="94" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="94" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1a450d952dab52d400212ca37113bdc1cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="104" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="104" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__mg_8cu_1a623ecba89d715bd7c70065ff8c050d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" line="114" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_mg.cu" declline="114" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1a52c97f2e37a64b3b36dbdc72a3cefe97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="20" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="20" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1a4227bd7ac2a1323675fa9b3214f800ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="27" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="27" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1ac8d5be62d174dff01b2541bc56e5c45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="34" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="34" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1a3dc86a8f5b08efc1430e48dfa948cfce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="41" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="41" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1aa57ed2a09ed2c4f9a14c0a039a8f5f21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="48" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="48" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1aeb8175407507a6c0093d5e87dd4ca453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::overlap_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>overlap_coefficients</name>
        <qualifiedname>cugraph::overlap_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="55" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="55" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1a780ec55d219de1f8019a3c2ea45c9bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="64" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="64" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1a91aaff52325a05be76fe17a6d1e79505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="74" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="74" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1acd310b8035de9891635843b628a25aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="84" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="84" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1aae80f0fb4b76fa85a28ea281008ebf6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="94" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="94" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1a49f2bfd02982de6a62fcc8d3ab6aa8d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="104" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="104" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="overlap__sg_8cu_1a6120f3f173d80f0bd2992da3238f8372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::overlap_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>overlap_all_pairs_coefficients</name>
        <qualifiedname>cugraph::overlap_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" line="114" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/overlap_sg.cu" declline="114" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__impl_8cuh_1a991c57f87b3b8487af76be02f689e550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; weight_t &gt;</type>
        <definition>rmm::device_uvector&lt; weight_t &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; vertex_t const  &gt;, raft::device_span&lt; vertex_t const  &gt; &gt; vertex_pairs, bool do_expensive_check=false)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; vertex_t const &gt;, raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute Sorensen similarity coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>Similarity is computed for every pair of vertices specified. Note that similarity algorithms expect a symmetric graph.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == true, use the weights associated with the graph. If false, assume a weight of 1 for all edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple of device spans defining the vertex pairs to compute similarity for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple of device spans defining the vertex pairs to compute similarity for In a multi-gpu context each vertex pair should be local to this GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>similarity coefficient for the corresponding <computeroutput>vertex_pairs</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_impl.cuh" line="43" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_impl.cuh" bodystart="43" bodyend="58" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2110" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__impl_8cuh_1a38ec04a42bf9092d62d516dcc3947422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; weight_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; weight_t &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; vertex_t const  &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check=false)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute Sorensen similarity coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>Similarity is computed for all pairs of vertices. Note that in a sparse graph, many of the vertex pairs will have a score of zero. We actually compute similarity only for vertices that are two hop neighbors within the graph, since vertices that are not two hop neighbors will have a score of 0.</para>
<para>If <computeroutput>vertices</computeroutput> is specified we will compute similarity on two hop neighbors the <computeroutput>vertices</computeroutput>. If <computeroutput>vertices</computeroutput> is not specified it will compute similarity on all two hop neighbors in the graph.</para>
<para>If <computeroutput>topk</computeroutput> is specified only the top <computeroutput>topk</computeroutput> scoring vertex pairs will be returned, if not specified then scores for all computed vertex pairs will be returned.</para>
<para>Note the list of two hop neighbors in the entire graph might be a large number of vertex pairs. If the graph is dense enough it could be as large as the the number of vertices squared, which might run out of memory.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == true, use the weights associated with the graph. If false, assume a weight of 1 for all edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>optional device span defining the seed vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topk</parametername>
</parameternamelist>
<parameterdescription>
<para>optional specification of the how many of the top scoring vertex pairs should be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple containing three device vectors (v1, v2, score) of the same length. Corresponding elements in the vectors identify a result, v1 identifying a vertex in the graph, v2 identifying one of v1&apos;s two hop neighors, and the score identifying the similarity score between v1 and v2. If <computeroutput>topk</computeroutput> was specified then the vectors will be no longer than <computeroutput>topk</computeroutput> elements. In a multi-gpu context, if <computeroutput>topk</computeroutput> is specified all results will return on GPU rank 0, otherwise they will be returned on the local GPU for vertex v1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_impl.cuh" line="63" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_impl.cuh" bodystart="63" bodyend="80" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2252" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1aedd1150675906cb1b3042a60d00385ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="20" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="20" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1a37923e7610066a5f1cc2827ee6658ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="27" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="27" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1a512ec8ec3ac636d56769a904da8878c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="34" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="34" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1ad882c60f321aa66e63a8330da0caf1b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="41" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="41" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1a5411196113a7a69fc9d9bb569bd73306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="48" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="48" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1a4d85ff04285796be5d6a29b2ccf39a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="55" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="55" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1a8dbc19b4a1a33070f33c64350152f84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="64" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="64" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1a61037e7487f953a4c86c68ac6c0b2321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="74" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="74" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1ae5f97fe6db0af944bd7a69428cdd3332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="84" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="84" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1a69d40203296ab465cdcbc0341cd992cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="94" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="94" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1a39426c4b5e0e5145af6843c7d0e2a07c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="104" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="104" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__mg_8cu_1ac9e2416c0cc8b5daeccb55ef6cc7b614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" line="114" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_mg.cu" declline="114" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1a2b3992216b4bd411b0f48af1bc2a09e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="20" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="20" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1acdcd5912c52ed1816d5983a3d99ce54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="27" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="27" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1a5bf9ab532da9d5363ecb5cc8aaf83d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="34" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="34" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1af9fd8d817938c103ae6e7612b9aaeb2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="41" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="41" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1a025ea1387d547b8ed353ec9672d02d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="48" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="48" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1a7a363b6e7a098de4a001a3e55ece49c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::sorensen_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt; vertex_pairs, bool do_expensive_check)</argsstring>
        <name>sorensen_coefficients</name>
        <qualifiedname>cugraph::sorensen_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::tuple&lt; raft::device_span&lt; int64_t const &gt;, raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertex_pairs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="55" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="55" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1aa27553f97b9e5717296cf874216e2117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="64" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="64" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1a0a4284c1ba4b3f0eed2da4fd2d25ebe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="74" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="74" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1a76ccb88c6df830097601a493b48b732b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="84" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="84" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1a1f67b258555058d10c954ae24086feed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="94" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="94" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1a96cfe46041b61a65a0808a260a053199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="104" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="104" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="sorensen__sg_8cu_1a329753ad3d409b48b6af4d6e2d5437f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::sorensen_all_pairs_coefficients</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; vertices, std::optional&lt; size_t &gt; topk, bool do_expensive_check)</argsstring>
        <name>sorensen_all_pairs_coefficients</name>
        <qualifiedname>cugraph::sorensen_all_pairs_coefficients</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>topk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" line="114" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/link_prediction/sorensen_sg.cu" declline="114" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="count__if__e_8cuh_1a097a4894bfce666b5571caab08531bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
        </templateparamlist>
        <type>GraphViewType::edge_type</type>
        <definition>GraphViewType::edge_type cugraph::count_if_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, bool do_expensive_check=false)</argsstring>
        <name>count_if_e</name>
        <qualifiedname>cugraph::count_if_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Count the number of edges that satisfies the given predicate. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::count_if().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, destination, and edge and returns true if this edge should be included in the returned count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GraphViewType::edge_type Number of times <computeroutput>e_op</computeroutput> returned true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/count_if_e.cuh" line="66" column="35" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/count_if_e.cuh" bodystart="66" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="count__if__v_8cuh_1a7bcef6d703eaecb75505a55fb9469019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexValueInputIterator</type>
          </param>
          <param>
            <type>typename VertexOp</type>
          </param>
        </templateparamlist>
        <type>GraphViewType::vertex_type</type>
        <definition>GraphViewType::vertex_type cugraph::count_if_v</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexValueInputIterator vertex_value_input_first, VertexOp v_op, bool do_expensive_check=false)</argsstring>
        <name>count_if_v</name>
        <qualifiedname>cugraph::count_if_v</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexValueInputIterator</type>
          <declname>vertex_value_input_first</declname>
        </param>
        <param>
          <type>VertexOp</type>
          <declname>v_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Count the number of vertices that satisfies the given predicate. </para>
        </briefdescription>
        <detaileddescription>
<para>This version iterates over the entire set of graph vertices. This function is inspired by thrust::count_if().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the unary predicate operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property values for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator takes vertex ID and *(<computeroutput>vertex_value_input_first</computeroutput> + i) (where i is [0, <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>)) and returns true if this vertex should be included in the returned count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GraphViewType::vertex_type Number of times <computeroutput>v_op</computeroutput> returned true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/count_if_v.cuh" line="74" column="37" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/count_if_v.cuh" bodystart="74" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="extract__transform__e_8cuh_1a43c4eebf64fe2761487fde82608a5aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
        </templateparamlist>
        <type>decltype(allocate_dataframe_buffer&lt; typename <ref refid="structcugraph_1_1detail_1_1edge__op__result__type" kindref="compound">detail::edge_op_result_type</ref>&lt; typename GraphViewType::vertex_type, typename GraphViewType::vertex_type, typename EdgeSrcValueInputWrapper::value_type, typename EdgeDstValueInputWrapper::value_type, typename EdgeValueInputWrapper::value_type, EdgeOp &gt;::type::value_type &gt;(size_t{0}, rmm::cuda_stream_view{}))</type>
        <definition>decltype(allocate_dataframe_buffer&lt; typename detail::edge_op_result_type&lt; typename GraphViewType::vertex_type, typename GraphViewType::vertex_type, typename EdgeSrcValueInputWrapper::value_type, typename EdgeDstValueInputWrapper::value_type, typename EdgeValueInputWrapper::value_type, EdgeOp &gt;::type::value_type &gt;(size_t{0}, rmm::cuda_stream_view{})) cugraph::extract_transform_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, bool do_expensive_check=false)</argsstring>
        <name>extract_transform_e</name>
        <qualifiedname>cugraph::extract_transform_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over the entire set of edges and extract the valid edge functor outputs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, property values for the destination, and property values for the edge and returns thrust::nullopt (if the return value is to be discarded) or a valid <computeroutput>e_op</computeroutput> output to be extracted and accumulated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dataframe buffer object storing extracted and accumulated valid <computeroutput>e_op</computeroutput> return values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/extract_transform_e.cuh" line="91" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/extract_transform_e.cuh" bodystart="91" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="extract__transform__v__frontier__outgoing__e_8cuh_1ab9d8c363e19cc692c55d510c0c787877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexFrontierBucketType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
        </templateparamlist>
        <type>decltype(allocate_dataframe_buffer&lt; typename <ref refid="structcugraph_1_1detail_1_1edge__op__result__type" kindref="compound">detail::edge_op_result_type</ref>&lt; typename VertexFrontierBucketType::key_type, typename GraphViewType::vertex_type, typename EdgeSrcValueInputWrapper::value_type, typename EdgeDstValueInputWrapper::value_type, typename EdgeValueInputWrapper::value_type, EdgeOp &gt;::type::value_type &gt;(size_t{0}, rmm::cuda_stream_view{}))</type>
        <definition>decltype(allocate_dataframe_buffer&lt; typename detail::edge_op_result_type&lt; typename VertexFrontierBucketType::key_type, typename GraphViewType::vertex_type, typename EdgeSrcValueInputWrapper::value_type, typename EdgeDstValueInputWrapper::value_type, typename EdgeValueInputWrapper::value_type, EdgeOp &gt;::type::value_type &gt;(size_t{0}, rmm::cuda_stream_view{})) cugraph::extract_transform_v_frontier_outgoing_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexFrontierBucketType const &amp;frontier, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, bool do_expensive_check=false)</argsstring>
        <name>extract_transform_v_frontier_outgoing_e</name>
        <qualifiedname>cugraph::extract_transform_v_frontier_outgoing_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexFrontierBucketType const &amp;</type>
          <declname>frontier</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over outgoing_edges from the current vertex frontier and extract the valid edge functor outputs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, property values for the destination, and property values for the edge and returns thrust::nullopt (if the return value is to be discarded) or a valid <computeroutput>e_op</computeroutput> output to be extracted and accumulated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dataframe buffer object storing extracted and accumulated valid <computeroutput>e_op</computeroutput> return values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/extract_transform_v_frontier_outgoing_e.cuh" line="80" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/extract_transform_v_frontier_outgoing_e.cuh" bodystart="80" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="fill__edge__property_8cuh_1a6d0395ca10d1b506cf7fb8b03e282a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::fill_edge_property</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, T input, edge_property_t&lt; GraphViewType, T &gt; &amp;edge_property_output, bool do_expensive_check=false)</argsstring>
        <name>fill_edge_property</name>
        <qualifiedname>cugraph::fill_edge_property</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; GraphViewType, T &gt; &amp;</type>
          <declname>edge_property_output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Fill graph edge property values to the input value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the edge property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Edge property values will be set to <computeroutput>input</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_property_output</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref> class object to store edge property values (for the edges assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/fill_edge_property.cuh" line="136" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/fill_edge_property.cuh" bodystart="136" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="fill__edge__src__dst__property_8cuh_1a121925612ca336a146a3865e894f1c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::fill_edge_src_property</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, T input, edge_src_property_t&lt; GraphViewType, T &gt; &amp;edge_src_property_output, bool do_expensive_check=false)</argsstring>
        <name>fill_edge_src_property</name>
        <qualifiedname>cugraph::fill_edge_src_property</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__src__property__t" kindref="compound">edge_src_property_t</ref>&lt; GraphViewType, T &gt; &amp;</type>
          <declname>edge_src_property_output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Fill graph edge source property values to the input value. </para>
        </briefdescription>
        <detaileddescription>
<para>This version fills graph edge source property values for the entire edge source ranges (assigned to this process in multi-GPU).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the edge source property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Edge source property values will be set to <computeroutput>input</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_property_output</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcugraph_1_1edge__src__property__t" kindref="compound">edge_src_property_t</ref> class object to store source property values (for the edge source assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/fill_edge_src_dst_property.cuh" line="121" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/fill_edge_src_dst_property.cuh" bodystart="121" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="fill__edge__src__dst__property_8cuh_1a52304cf0c823e6fa9f27ccaa6d838cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::fill_edge_dst_property</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, T input, edge_dst_property_t&lt; GraphViewType, T &gt; &amp;edge_dst_property_output, bool do_expensive_check=false)</argsstring>
        <name>fill_edge_dst_property</name>
        <qualifiedname>cugraph::fill_edge_dst_property</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__dst__property__t" kindref="compound">edge_dst_property_t</ref>&lt; GraphViewType, T &gt; &amp;</type>
          <declname>edge_dst_property_output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Fill graph edge destination property values to the input value. </para>
        </briefdescription>
        <detaileddescription>
<para>This version fills graph edge destination property values for the entire edge destination ranges (assigned to this process in multi-GPU).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the edge destination property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Edge destination property values will be set to <computeroutput>input</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_property_output</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcugraph_1_1edge__dst__property__t" kindref="compound">edge_dst_property_t</ref> class object to store destination property values (for the edge destinations assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/fill_edge_src_dst_property.cuh" line="157" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/fill_edge_src_dst_property.cuh" bodystart="157" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="per__v__pair__transform__dst__nbr__intersection_8cuh_1a4554dceb95ac6a8b2d98e23ce033852d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexPairIterator</type>
          </param>
          <param>
            <type>typename VertexValueInputIterator</type>
          </param>
          <param>
            <type>typename EdgeValueInputIterator</type>
          </param>
          <param>
            <type>typename IntersectionOp</type>
          </param>
          <param>
            <type>typename VertexPairValueOutputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::per_v_pair_transform_dst_nbr_intersection</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeValueInputIterator edge_value_input, VertexPairIterator vertex_pair_first, VertexPairIterator vertex_pair_last, VertexValueInputIterator vertex_value_input_first, IntersectionOp intersection_op, VertexPairValueOutputIterator vertex_pair_value_output_first, bool do_expensive_check=false)</argsstring>
        <name>per_v_pair_transform_dst_nbr_intersection</name>
        <qualifiedname>cugraph::per_v_pair_transform_dst_nbr_intersection</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeValueInputIterator</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>VertexPairIterator</type>
          <declname>vertex_pair_first</declname>
        </param>
        <param>
          <type>VertexPairIterator</type>
          <declname>vertex_pair_last</declname>
        </param>
        <param>
          <type>VertexValueInputIterator</type>
          <declname>vertex_value_input_first</declname>
        </param>
        <param>
          <type>IntersectionOp</type>
          <declname>intersection_op</declname>
        </param>
        <param>
          <type>VertexPairValueOutputIterator</type>
          <declname>vertex_pair_value_output_first</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over each input vertex pair and apply a functor to the common destination neighbor list of the pair. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterate over every vertex pair; intersect destination neighbor lists of the two vertices in the pair; invoke a user-provided functor, and store the functor output.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexPairIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for input vertex pairs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntersectionOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary per intersection operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexPairValueOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex pair output property variables. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_pair_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the first (inclusive) input vertex pair. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_pair_last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the last (exclusive) input vertex pair. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access vertex input property values (for the vertices assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>intersection_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>intersection_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intersection_op</parametername>
</parameternamelist>
<parameterdescription>
<para>quinary operator takes first vertex of the pair, second vertex of the pair, property values for the first vertex, property values for the second vertex, and a list of vertices in the intersection of the first &amp; second vertices&apos; destination neighbors and returns an output value for the input pair. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_pair_value_output_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex pair property variables for the first vertex pair (inclusive). <computeroutput>vertex_pair_value_output_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_pair_value_output_first</computeroutput> + <computeroutput>thrust::distance(vertex_pair_first, vertex_pair_last)</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_pair_transform_dst_nbr_intersection.cuh" line="226" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_pair_transform_dst_nbr_intersection.cuh" bodystart="226" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="per__v__random__select__transform__outgoing__e_8cuh_1a9fd1e31d640ffb79389fd29d636a7dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexFrontierBucketType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeBiasOp</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, decltype(allocate_dataframe_buffer&lt; T &gt;(size_t{0}, rmm::cuda_stream_view{}))&gt;</type>
        <definition>std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, decltype(allocate_dataframe_buffer&lt; T &gt;(size_t{0}, rmm::cuda_stream_view{}))&gt; cugraph::per_v_random_select_transform_outgoing_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexFrontierBucketType const &amp;frontier, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeBiasOp e_bias_op, EdgeOp e_op, raft::random::RngState &amp;rng_state, size_t K, bool with_replacement, std::optional&lt; T &gt; invalid_value, bool do_expensive_check=false)</argsstring>
        <name>per_v_random_select_transform_outgoing_e</name>
        <qualifiedname>cugraph::per_v_random_select_transform_outgoing_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexFrontierBucketType const &amp;</type>
          <declname>frontier</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeBiasOp</type>
          <declname>e_bias_op</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>K</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>std::optional&lt; T &gt;</type>
          <declname>invalid_value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Randomly select and transform the input (tagged-)vertices&apos; outgoing edges with biases. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexFrontierBucketType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the vertex frontier bucket class which abstracts the current (tagged-)vertex frontier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeBiasOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator to set-up selection bias values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the selected and transformed edge output values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frontier</parametername>
</parameternamelist>
<parameterdescription>
<para>VertexFrontierBucketType class object to store the (tagged-)vertex list to sample outgoing edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_bias_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes (tagged-)edge source, edge destination, property values for the source, destination, and edge and returns a floating point bias value to be used in biased random selection. The return value should be non-negative. The bias value of 0 indicates that the corresponding edge cannot be selected. Assuming that the return value type is bias_t, the sum of the bias values for any seed vertex should not exceed std::numeric_limits&lt;bias_t&gt;::max(). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes (tagged-)edge source, edge destination, property values for the source, destination, and edge and returns a value to be collected in the output. This function is called only for the selected edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of outgoing edges to select per (tagged-)vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_replacement</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to specify whether a single outgoing edge can be selected multiple times (if <computeroutput>with_replacement</computeroutput> = true) or can be selected only once (if <computeroutput>with_replacement</computeroutput> = false). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_value</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>invalid_value.has_value()</computeroutput> is true, this value is used to fill the output vector for the zero out-degree vertices (if <computeroutput>with_replacement</computeroutput> = true) or the vertices with their out-degrees smaller than <computeroutput>K</computeroutput> (if <computeroutput>with_replacement</computeroutput> = false). If <computeroutput>invalid_value.has_value()</computeroutput> is false, fewer than <computeroutput>K</computeroutput> values can be returned for the vertices with fewer than <computeroutput>K</computeroutput> selected edges. See the return value section for additional details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple Tuple of an optional offset vector of type std::optional&lt;rmm::device_uvector&lt;size_t&gt;&gt; and a dataframe buffer storing the output values of type <computeroutput>T</computeroutput> from the selected edges. If <computeroutput>invalid_value</computeroutput> is std::nullopt, the offset vector is valid and has the size of <computeroutput>frontier.size()</computeroutput> + 1. If <computeroutput>invalid_value.has_value()</computeroutput> is true, std::nullopt is returned (the dataframe buffer will store <computeroutput>frontier.size()</computeroutput> * <computeroutput>K</computeroutput> elements). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_random_select_transform_outgoing_e.cuh" line="664" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_random_select_transform_outgoing_e.cuh" bodystart="664" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="per__v__random__select__transform__outgoing__e_8cuh_1af76e22174268530e4b0263766361dc87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexFrontierBucketType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, decltype(allocate_dataframe_buffer&lt; T &gt;(size_t{0}, rmm::cuda_stream_view{}))&gt;</type>
        <definition>std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, decltype(allocate_dataframe_buffer&lt; T &gt;(size_t{0}, rmm::cuda_stream_view{}))&gt; cugraph::per_v_random_select_transform_outgoing_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexFrontierBucketType const &amp;frontier, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, raft::random::RngState &amp;rng_state, size_t K, bool with_replacement, std::optional&lt; T &gt; invalid_value, bool do_expensive_check=false)</argsstring>
        <name>per_v_random_select_transform_outgoing_e</name>
        <qualifiedname>cugraph::per_v_random_select_transform_outgoing_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexFrontierBucketType const &amp;</type>
          <declname>frontier</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>K</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>std::optional&lt; T &gt;</type>
          <declname>invalid_value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Randomly select and transform the input (tagged-)vertices&apos; outgoing edges. </para>
        </briefdescription>
        <detaileddescription>
<para>This function assumes that every outgoing edge of a given vertex has the same odd to be selected (uniform neighbor sampling).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexFrontierBucketType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the vertex frontier bucket class which abstracts the current (tagged-)vertex frontier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the selected and transformed edge output values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frontier</parametername>
</parameternamelist>
<parameterdescription>
<para>VertexFrontierBucketType class object to store the (tagged-)vertex list to sample outgoing edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes (tagged-)edge source, edge destination, property values for the source, destination, and edge and returns a value to be collected in the output. This function is called only for the selected edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of outgoing edges to select per (tagged-)vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_replacement</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to specify whether a single outgoing edge can be selected multiple times (if <computeroutput>with_replacement</computeroutput> = true) or can be selected only once (if <computeroutput>with_replacement</computeroutput> = false). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_value</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>invalid_value.has_value()</computeroutput> is true, this value is used to fill the output vector for the zero out-degree vertices (if <computeroutput>with_replacement</computeroutput> = true) or the vertices with their out-degrees smaller than <computeroutput>K</computeroutput> (if <computeroutput>with_replacement</computeroutput> = false). If <computeroutput>invalid_value.has_value()</computeroutput> is false, fewer than <computeroutput>K</computeroutput> values can be returned for the vertices with fewer than <computeroutput>K</computeroutput> selected edges. See the return value section for additional details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple Tuple of an optional offset vector of type std::optional&lt;rmm::device_uvector&lt;size_t&gt;&gt; and a dataframe buffer storing the output values of type <computeroutput>T</computeroutput> from the selected edges. If <computeroutput>invalid_value</computeroutput> is std::nullopt, the offset vector is valid and has the size of <computeroutput>frontier.size()</computeroutput> + 1. If <computeroutput>invalid_value.has_value()</computeroutput> is true, std::nullopt is returned (the dataframe buffer will store <computeroutput>frontier.size()</computeroutput> * <computeroutput>K</computeroutput> elements). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_random_select_transform_outgoing_e.cuh" line="754" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_random_select_transform_outgoing_e.cuh" bodystart="754" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="per__v__transform__reduce__dst__key__aggregated__outgoing__e_8cuh_1a3ed8d50ae25c3a6f8e53849d40050c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstKeyInputWrapper</type>
          </param>
          <param>
            <type>typename KVStoreViewType</type>
          </param>
          <param>
            <type>typename KeyAggregatedEdgeOp</type>
          </param>
          <param>
            <type>typename ReduceOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename VertexValueOutputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::per_v_transform_reduce_dst_key_aggregated_outgoing_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeValueInputWrapper edge_value_input, EdgeDstKeyInputWrapper edge_dst_key_input, KVStoreViewType kv_store_view, KeyAggregatedEdgeOp key_aggregated_e_op, T init, ReduceOp reduce_op, VertexValueOutputIterator vertex_value_output_first, bool do_expensive_check=false)</argsstring>
        <name>per_v_transform_reduce_dst_key_aggregated_outgoing_e</name>
        <qualifiedname>cugraph::per_v_transform_reduce_dst_key_aggregated_outgoing_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeDstKeyInputWrapper</type>
          <declname>edge_dst_key_input</declname>
        </param>
        <param>
          <type>KVStoreViewType</type>
          <declname>kv_store_view</declname>
        </param>
        <param>
          <type>KeyAggregatedEdgeOp</type>
          <declname>key_aggregated_e_op</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>ReduceOp</type>
          <declname>reduce_op</declname>
        </param>
        <param>
          <type>VertexValueOutputIterator</type>
          <declname>vertex_value_output_first</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over every vertex&apos;s destination key-aggregated outgoing edges to update vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform_reduce(). Unlike per_v_transform_reduce_outgoing_e, this function first aggregates outgoing edges by destination keys to support two level reduction for every vertex.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstKeyInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination key values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KVStoreViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the (key, value) store. Key type should coincide with vertex type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KeyAggregatedEdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary key-aggregated edge operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ReduceOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the binary reduction operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the initial value for per-vertex reduction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex output property variables. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_key_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input key values (for the edge destinations assigned to this process in multi-GPU). Use cugraph::edge_dst_property_t::view(). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kv_store_view</parametername>
</parameternamelist>
<parameterdescription>
<para>view object of the (key, value) store (for the keys assigned to this process in multi-GPU). <computeroutput><ref refid="structcugraph_1_1detail_1_1compute__gpu__id__from__ext__vertex__t" kindref="compound">cugraph::detail::compute_gpu_id_from_ext_vertex_t</ref></computeroutput> is used to map keys to processes). (Key, value) pairs may be provided by transform_reduce_e_by_src_key() or transform_reduce_e_by_dst_key(). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_aggregated_e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes 1) edge source, 2) key, 3) *(<computeroutput>edge_partition_src_value_input_first</computeroutput> + i), 4) value for the key stored in the input (key, value) pairs provided by <computeroutput>map_unique_key_first</computeroutput>, <computeroutput>map_unique_key_last</computeroutput>, and <computeroutput>map_value_first</computeroutput> (aggregated over the entire set of processes in multi-GPU), and 5) aggregated edge value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be reduced with the reduced value for each vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator that takes two input arguments and reduce the two values to one. There are pre-defined reduction operators in <ref refid="reduce__op_8cuh_source" kindref="compound">src/prims/reduce_op.cuh</ref>. It is recommended to use the pre-defined reduction operators whenever possible as the current (and future) implementations of graph primitives may check whether <computeroutput>ReduceOp</computeroutput> is a known type (or has known member variables) to take a more optimized code path. See the documentation in the <ref refid="reduce__op_8cuh_source" kindref="compound">reduce_op.cuh</ref> file for instructions on writing custom reduction operators. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_output_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property variables for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_output_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_output_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_transform_reduce_dst_key_aggregated_outgoing_e.cuh" line="262" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_transform_reduce_dst_key_aggregated_outgoing_e.cuh" bodystart="262" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="per__v__transform__reduce__incoming__outgoing__e_8cuh_1ab33009bdf71a7c3a520e5af8fd7216e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
          <param>
            <type>typename ReduceOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename VertexValueOutputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::per_v_transform_reduce_incoming_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, T init, ReduceOp reduce_op, VertexValueOutputIterator vertex_value_output_first, bool do_expensive_check=false)</argsstring>
        <name>per_v_transform_reduce_incoming_e</name>
        <qualifiedname>cugraph::per_v_transform_reduce_incoming_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>ReduceOp</type>
          <declname>reduce_op</declname>
        </param>
        <param>
          <type>VertexValueOutputIterator</type>
          <declname>vertex_value_output_first</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over every vertex&apos;s incoming edges to update vertex properties. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform_reduce.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ReduceOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the binary reduction operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the initial value for per-vertex reduction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex output property variables. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, destination, and edge and returns a value to be reduced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be added to the reduced <computeroutput>e_op</computeroutput> return values for each vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator that takes two input arguments and reduce the two values to one. There are pre-defined reduction operators in <ref refid="reduce__op_8cuh_source" kindref="compound">src/prims/reduce_op.cuh</ref>. It is recommended to use the pre-defined reduction operators whenever possible as the current (and future) implementations of graph primitives may check whether <computeroutput>ReduceOp</computeroutput> is a known type (or has known member variables) to take a more optimized code path. See the documentation in the <ref refid="reduce__op_8cuh_source" kindref="compound">reduce_op.cuh</ref> file for instructions on writing custom reduction operators. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_output_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property variables for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_output_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_output_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh" line="1168" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh" bodystart="1168" bodyend="1192"/>
      </memberdef>
      <memberdef kind="function" id="per__v__transform__reduce__incoming__outgoing__e_8cuh_1a297d829457e3ad6e8e150eabe7a3d5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
          <param>
            <type>typename ReduceOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename VertexValueOutputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::per_v_transform_reduce_outgoing_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, T init, ReduceOp reduce_op, VertexValueOutputIterator vertex_value_output_first, bool do_expensive_check=false)</argsstring>
        <name>per_v_transform_reduce_outgoing_e</name>
        <qualifiedname>cugraph::per_v_transform_reduce_outgoing_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>ReduceOp</type>
          <declname>reduce_op</declname>
        </param>
        <param>
          <type>VertexValueOutputIterator</type>
          <declname>vertex_value_output_first</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over every vertex&apos;s outgoing edges to update vertex properties. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform_reduce().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ReduceOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the binary reduction operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the initial value for per-vertex reduction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex output property variables. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, destination, and edge and returns a value to be reduced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be added to the reduced <computeroutput>e_op</computeroutput> return values for each vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator that takes two input arguments and reduce the two values to one. There are pre-defined reduction operators in <ref refid="reduce__op_8cuh_source" kindref="compound">src/prims/reduce_op.cuh</ref>. It is recommended to use the pre-defined reduction operators whenever possible as the current (and future) implementations of graph primitives may check whether <computeroutput>ReduceOp</computeroutput> is a known type (or has known member variables) to take a more optimized code path. See the documentation in the <ref refid="reduce__op_8cuh_source" kindref="compound">reduce_op.cuh</ref> file for instructions on writing custom reduction operators. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_output_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property variables for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_output_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_output_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh" line="1247" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh" bodystart="1247" bodyend="1271"/>
      </memberdef>
      <memberdef kind="function" id="property__op__utils_8cuh_1ad0d77385b75394e9ea8b8ba78a316f13" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>constexpr std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; T &gt;::value, T &gt; cugraph::min_identity_element</definition>
        <argsstring>()</argsstring>
        <name>min_identity_element</name>
        <qualifiedname>cugraph::min_identity_element</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/property_op_utils.cuh" line="152" column="29" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/property_op_utils.cuh" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="property__op__utils_8cuh_1acb18adc640616a928b098600abde4758" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt;</type>
        <definition>constexpr std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt; cugraph::min_identity_element</definition>
        <argsstring>()</argsstring>
        <name>min_identity_element</name>
        <qualifiedname>cugraph::min_identity_element</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/property_op_utils.cuh" line="158" column="29" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/property_op_utils.cuh" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="property__op__utils_8cuh_1afa6d5a98c033dff08eb368998902ca9d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>constexpr std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; T &gt;::value, T &gt; cugraph::max_identity_element</definition>
        <argsstring>()</argsstring>
        <name>max_identity_element</name>
        <qualifiedname>cugraph::max_identity_element</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/property_op_utils.cuh" line="164" column="29" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/property_op_utils.cuh" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="property__op__utils_8cuh_1aa9bc7a351b6ed61750bba63dd9008531" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt;</type>
        <definition>constexpr std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt; cugraph::max_identity_element</definition>
        <argsstring>()</argsstring>
        <name>max_identity_element</name>
        <qualifiedname>cugraph::max_identity_element</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/property_op_utils.cuh" line="170" column="29" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/property_op_utils.cuh" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="reduce__v_8cuh_1afcefa36cf2d807c1efd4665a6b49d41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename ReduceOp</type>
          </param>
          <param>
            <type>typename VertexValueInputIterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T cugraph::reduce_v</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexValueInputIterator vertex_value_input_first, T init, ReduceOp reduce_op, bool do_expensive_check=false)</argsstring>
        <name>reduce_v</name>
        <qualifiedname>cugraph::reduce_v</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexValueInputIterator</type>
          <declname>vertex_value_input_first</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>ReduceOp</type>
          <declname>reduce_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reduce the input vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::reduce().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ReduceOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the binary reduction operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the initial value. T should be an arithmetic type or thrust::tuple of arithmetic types. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property values for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be reduced with the reduced input vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator that takes two input arguments and reduce the two values to one. There are pre-defined reduction operators in include/cugraph/prims/reduce_op.cuh. It is recommended to use the pre-defined reduction operators whenever possible as the current (and future) implementations of graph primitives may check whether <computeroutput>ReduceOp</computeroutput> is a known type (or has known member variables) to take a more optimized code path. See the documentation in the <ref refid="reduce__op_8cuh_source" kindref="compound">reduce_op.cuh</ref> file for instructions on writing custom reduction operators. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T Reduced input vertex property values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/reduce_v.cuh" line="63" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/reduce_v.cuh" bodystart="63" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="reduce__v_8cuh_1a9ab69c318fcf8d1b9b8d31b203a95fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexValueInputIterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T cugraph::reduce_v</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexValueInputIterator vertex_value_input_first, T init, bool do_expensive_check=false)</argsstring>
        <name>reduce_v</name>
        <qualifiedname>cugraph::reduce_v</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexValueInputIterator</type>
          <declname>vertex_value_input_first</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reduce the input vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::reduce().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ReduceOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the binary reduction operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the initial value. T should be an arithmetic type or thrust::tuple of arithmetic types. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property values for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be added to the reduced input vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T Reduced input vertex property values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/reduce_v.cuh" line="200" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/reduce_v.cuh" bodystart="200" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="reduce__v_8cuh_1ab2ab7117ea5ceeb64bd06266e2547328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexValueInputIterator</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::reduce_v</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexValueInputIterator vertex_value_input_first, bool do_expensive_check=false)</argsstring>
        <name>reduce_v</name>
        <qualifiedname>cugraph::reduce_v</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexValueInputIterator</type>
          <declname>vertex_value_input_first</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reduce the input vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::reduce().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the initial value. T should be an arithmetic type or thrust::tuple of arithmetic types. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property values for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reduced input vertex property values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/reduce_v.cuh" line="232" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/reduce_v.cuh" bodystart="232" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="transform__e_8cuh_1a5815264af2e76e63fb3b89a94424ab9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
          <param>
            <type>typename EdgeValueOutputWrapper</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::transform_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, EdgeValueOutputWrapper edge_value_output, bool do_expensive_check=false)</argsstring>
        <name>transform_e</name>
        <qualifiedname>cugraph::transform_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>EdgeValueOutputWrapper</type>
          <declname>edge_value_output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over the entire set of edges and update edge property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for input edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for input edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for input edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueOutputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for output edge property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, destination, and edge and returns a value to be reduced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_output</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to store edge output property values (for the edges assigned to this process in multi-GPU). Use cugraph::edge_property_t::mutable_view(). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_e.cuh" line="263" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_e.cuh" bodystart="263" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="transform__e_8cuh_1ac51702f25cc8697cf28c692151fdda5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeBucketType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
          <param>
            <type>typename EdgeValueOutputWrapper</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::transform_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeBucketType const &amp;edge_list, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, EdgeValueOutputWrapper edge_value_output, bool do_expensive_check=false)</argsstring>
        <name>transform_e</name>
        <qualifiedname>cugraph::transform_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeBucketType const &amp;</type>
          <declname>edge_list</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>EdgeValueOutputWrapper</type>
          <declname>edge_value_output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over the edges in the input edge list and update edge property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeBucketType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the edge bucket class which stores the edge list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for input edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for input edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for input edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueOutputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for output edge property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_list</parametername>
</parameternamelist>
<parameterdescription>
<para>EdgeBucketType class object storing the edge list to update edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, destination, and edge and returns a value to be reduced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_output</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to store edge output property values (for the edges assigned to this process in multi-GPU). Use cugraph::edge_property_t::mutable_view(). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_e.cuh" line="448" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_e.cuh" bodystart="448" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="transform__reduce__dst__nbr__intersection__of__e__endpoints__by__v_8cuh_1ae3006972d4dc8aded3f9fcb0bf3e1b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename IntersectionOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename VertexValueOutputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::transform_reduce_dst_nbr_intersection_of_e_endpoints_by_v</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, IntersectionOp intersection_op, T init, VertexValueOutputIterator vertex_value_output_first, bool do_expensive_check=false)</argsstring>
        <name>transform_reduce_dst_nbr_intersection_of_e_endpoints_by_v</name>
        <qualifiedname>cugraph::transform_reduce_dst_nbr_intersection_of_e_endpoints_by_v</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>IntersectionOp</type>
          <declname>intersection_op</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>VertexValueOutputIterator</type>
          <declname>vertex_value_output_first</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over each edge and apply a functor to the common destination neighbor list of the edge endpoints, reduce the functor output values per-vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterate over every edge; intersect destination neighbor lists of source vertex &amp; destination vertex; invoke a user-provided functor per intersection, and reduce the functor output values (thrust::tuple of three values having the same type: one for source, one for destination, and one for every vertex in the intersection) per-vertex. We may add transform_reduce_triplet_of_dst_nbr_intersection_of_e_endpoints_by_v in the future to allow emitting different values for different vertices in the intersection of edge endpoints. This function is inspired by thrust::transform_reduce().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntersectionOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary per intersection operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the initial value for per-vertex reduction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex output property variables. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>intersection_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>intersection_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>intersection_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>intersection_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intersection_op</parametername>
</parameternamelist>
<parameterdescription>
<para>quinary operator takes edge source, edge destination, property values for the source, property values for the destination, and a list of vertices in the intersection of edge source &amp; destination vertices&apos; destination neighbors and returns a thrust::tuple of three values: one value per source vertex, one value for destination vertex, and one value for every vertex in the intersection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be added to the reduced <computeroutput>intersection_op</computeroutput> return values for each vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_output_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property variables for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_output_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_output_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_dst_nbr_intersection_of_e_endpoints_by_v.cuh" line="234" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_dst_nbr_intersection_of_e_endpoints_by_v.cuh" bodystart="234" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="transform__reduce__e_8cuh_1acf413ebde6d1aff9c102ef77a15ec5e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T cugraph::transform_reduce_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, T init, bool do_expensive_check=false)</argsstring>
        <name>transform_reduce_e</name>
        <qualifiedname>cugraph::transform_reduce_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over the entire set of edges and reduce <computeroutput>edge_op</computeroutput> outputs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform_reduce().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the initial value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, destination, and edge and returns a value to be reduced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be added to the reduced <computeroutput>edge_op</computeroutput> outputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T Transform-reduced <computeroutput>edge_op</computeroutput> outputs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_e.cuh" line="433" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_e.cuh" bodystart="433" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="transform__reduce__e_8cuh_1a2ca21087ed08658d4ddbcfeda66a1087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::transform_reduce_e</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, bool do_expensive_check=false)</argsstring>
        <name>transform_reduce_e</name>
        <qualifiedname>cugraph::transform_reduce_e</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over the entire set of edges and reduce <computeroutput>edge_op</computeroutput> outputs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform_reduce().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, destination, and edge and returns a value to be reduced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Transform-reduced <computeroutput>edge_op</computeroutput> outputs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_e.cuh" line="648" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_e.cuh" bodystart="648" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="transform__reduce__e__by__src__dst__key_8cuh_1ae401efa2f3d7a5b93ca34c63e19d8e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeSrcKeyInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
          <param>
            <type>typename ReduceOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::transform_reduce_e_by_src_key</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeSrcKeyInputWrapper edge_src_key_input, EdgeOp e_op, T init, ReduceOp reduce_op, bool do_expensive_check=false)</argsstring>
        <name>transform_reduce_e_by_src_key</name>
        <qualifiedname>cugraph::transform_reduce_e_by_src_key</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeSrcKeyInputWrapper</type>
          <declname>edge_src_key_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>ReduceOp</type>
          <declname>reduce_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over the entire set of edges and reduce <computeroutput>edge_op</computeroutput> outputs to (key, value) pairs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform_reduce() and thrust::reduce_by_key(). Keys for edges are determined by the edge sources.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcKeyInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source key values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the values in (key, value) pairs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_key_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input ke values (for the edge sources assigned to this process in multi-GPU). Use cugraph::edge_src_property_t::view(). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, destination, and edge and returns a value to be reduced to (source key, value) pairs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be added to the value in each transform-reduced (source key, value) pair. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator that takes two input arguments and reduce the two values to one. There are pre-defined reduction operators in <ref refid="reduce__op_8cuh_source" kindref="compound">src/prims/reduce_op.cuh</ref>. It is recommended to use the pre-defined reduction operators whenever possible as the current (and future) implementations of graph primitives may check whether <computeroutput>ReduceOp</computeroutput> is a known type (or has known member variables) to take a more optimized code path. See the documentation in the <ref refid="reduce__op_8cuh_source" kindref="compound">reduce_op.cuh</ref> file for instructions on writing custom reduction operators. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple Tuple of rmm::device_uvector&lt;typename GraphView::vertex_type&gt; and rmm::device_uvector&lt;T&gt; (if T is arithmetic scalar) or a tuple of rmm::device_uvector objects (if T is a thrust::tuple type of arithmetic scalar types, one rmm::device_uvector object per scalar type). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_e_by_src_dst_key.cuh" line="852" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_e_by_src_dst_key.cuh" bodystart="852" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="transform__reduce__e__by__src__dst__key_8cuh_1ab4ce794c19afec2078ca7d5d21dbb9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename EdgeSrcValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeValueInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeDstKeyInputWrapper</type>
          </param>
          <param>
            <type>typename EdgeOp</type>
          </param>
          <param>
            <type>typename ReduceOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::transform_reduce_e_by_dst_key</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeDstKeyInputWrapper edge_dst_key_input, EdgeOp e_op, T init, ReduceOp reduce_op, bool do_expensive_check=false)</argsstring>
        <name>transform_reduce_e_by_dst_key</name>
        <qualifiedname>cugraph::transform_reduce_e_by_dst_key</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeDstKeyInputWrapper</type>
          <declname>edge_dst_key_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>ReduceOp</type>
          <declname>reduce_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Iterate over the entire set of edges and reduce <computeroutput>edge_op</computeroutput> outputs to (key, value) pairs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform_reduce() and thrust::reduce_by_key(). Keys for edges are determined by the edge destinations.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeSrcValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge source property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeDstKeyInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge destination key values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeValueInputWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapper for edge property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EdgeOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the quinary edge operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the values in (key, value) pairs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_src_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access source input property values (for the edge sources assigned to this process in multi-GPU). Use either cugraph::edge_src_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access source property values) or cugraph::edge_src_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access source property values). Use update_edge_src_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dst_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input property values (for the edge destinations assigned to this process in multi-GPU). Use either cugraph::edge_dst_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access destination property values) or cugraph::edge_dst_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access destination property values). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_partition_dst_key_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access destination input key values (for the edge destinations assigned to this process in multi-GPU). Use cugraph::edge_dst_property_t::view(). Use update_edge_dst_property to fill the wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_value_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Wrapper used to access edge input property values (for the edges assigned to this process in multi-GPU). Use either cugraph::edge_property_t::view() (if <computeroutput>e_op</computeroutput> needs to access edge property values) or cugraph::edge_dummy_property_t::view() (if <computeroutput>e_op</computeroutput> does not access edge property values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Quinary operator takes edge source, edge destination, property values for the source, destination, and edge and returns a value to be reduced to (destination key, value) pairs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be added to the value in each transform-reduced (destination key, value) pair. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator that takes two input arguments and reduce the two values to one. There are pre-defined reduction operators in <ref refid="reduce__op_8cuh_source" kindref="compound">src/prims/reduce_op.cuh</ref>. It is recommended to use the pre-defined reduction operators whenever possible as the current (and future) implementations of graph primitives may check whether <computeroutput>ReduceOp</computeroutput> is a known type (or has known member variables) to take a more optimized code path. See the documentation in the <ref refid="reduce__op_8cuh_source" kindref="compound">reduce_op.cuh</ref> file for instructions on writing custom reduction operators. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple Tuple of rmm::device_uvector&lt;typename GraphView::vertex_type&gt; and rmm::device_uvector&lt;T&gt; (if T is arithmetic scalar) or a tuple of rmm::device_uvector objects (if T is a thrust::tuple type of arithmetic scalar types, one rmm::device_uvector object per scalar type). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_e_by_src_dst_key.cuh" line="940" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_e_by_src_dst_key.cuh" bodystart="940" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="transform__reduce__v_8cuh_1a1595efa4c63d4db46c9bc5860bcdedcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename ReduceOp</type>
          </param>
          <param>
            <type>typename VertexValueInputIterator</type>
          </param>
          <param>
            <type>typename VertexOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T cugraph::transform_reduce_v</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexValueInputIterator vertex_value_input_first, VertexOp v_op, T init, ReduceOp reduce_op, bool do_expensive_check=false)</argsstring>
        <name>transform_reduce_v</name>
        <qualifiedname>cugraph::transform_reduce_v</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexValueInputIterator</type>
          <declname>vertex_value_input_first</declname>
        </param>
        <param>
          <type>VertexOp</type>
          <declname>v_op</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>ReduceOp</type>
          <declname>reduce_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reduce the transformed input vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform_reduce().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ReduceOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the binary reduction operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the unary vertex operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the initial value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property values for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator takes vertex ID and *(<computeroutput>vertex_value_input_first</computeroutput> + i) (where i is [0, <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>)) and returns a transformed value to be reduced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be reduced with the transform-reduced input vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator that takes two input arguments and reduce the two values to one. There are pre-defined reduction operators in include/cugraph/prims/reduce_op.cuh. It is recommended to use the pre-defined reduction operators whenever possible as the current (and future) implementations of graph primitives may check whether <computeroutput>ReduceOp</computeroutput> is a known type (or has known member variables) to take a more optimized code path. See the documentation in the <ref refid="reduce__op_8cuh_source" kindref="compound">reduce_op.cuh</ref> file for instructions on writing custom reduction operators. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T Transformed and reduced input vertex property values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_v.cuh" line="85" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_v.cuh" bodystart="85" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="transform__reduce__v_8cuh_1af1e4146bdcf42b86752357b6f7f2eb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexValueInputIterator</type>
          </param>
          <param>
            <type>typename VertexOp</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T cugraph::transform_reduce_v</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexValueInputIterator vertex_value_input_first, VertexOp v_op, T init, bool do_expensive_check=false)</argsstring>
        <name>transform_reduce_v</name>
        <qualifiedname>cugraph::transform_reduce_v</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexValueInputIterator</type>
          <declname>vertex_value_input_first</declname>
        </param>
        <param>
          <type>VertexOp</type>
          <declname>v_op</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reduce the transformed input vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform_reduce().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the unary vertex operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the initial value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property values for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator takes vertex ID and *(<computeroutput>vertex_value_input_first</computeroutput> + i) (where i is [0, <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>)) and returns a transformed value to be reduced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be added to the transform-reduced input vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T Transformed and reduced input vertex property values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_v.cuh" line="133" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_v.cuh" bodystart="133" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="transform__reduce__v_8cuh_1a86818a60d29481a7ddcae1fc84b0b46f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexValueInputIterator</type>
          </param>
          <param>
            <type>typename VertexOp</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::transform_reduce_v</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexValueInputIterator vertex_value_input_first, VertexOp v_op, bool do_expensive_check=false)</argsstring>
        <name>transform_reduce_v</name>
        <qualifiedname>cugraph::transform_reduce_v</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexValueInputIterator</type>
          <declname>vertex_value_input_first</declname>
        </param>
        <param>
          <type>VertexOp</type>
          <declname>v_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reduce the transformed input vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is inspired by thrust::transform_reduce().</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the unary vertex operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property values for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator takes vertex ID and *(<computeroutput>vertex_value_input_first</computeroutput> + i) (where i is [0, <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>)) and returns a transformed value to be reduced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Transformed and reduced input vertex property values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_v.cuh" line="169" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_v.cuh" bodystart="169" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="transform__reduce__v__frontier__outgoing__e__by__dst_8cuh_1a838ac58ec50aaf8d12c37b48a2d8d1ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexFrontierBucketType</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t cugraph::compute_num_out_nbrs_from_frontier</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexFrontierBucketType const &amp;frontier)</argsstring>
        <name>compute_num_out_nbrs_from_frontier</name>
        <qualifiedname>cugraph::compute_num_out_nbrs_from_frontier</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexFrontierBucketType const &amp;</type>
          <declname>frontier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_v_frontier_outgoing_e_by_dst.cuh" line="182" column="8" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_v_frontier_outgoing_e_by_dst.cuh" bodystart="182" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="transform__reduce__v__frontier__outgoing__e__by__dst_8cuh_1ac3d9c698f695747e9d2084f4db9af4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>decltype(allocate_dataframe_buffer&lt; typename VertexFrontierBucketType::key_type &gt;(0, rmm::cuda_stream_view{}))</type>
        <definition>decltype(allocate_dataframe_buffer&lt; typename VertexFrontierBucketType::key_type &gt;( 0, rmm::cuda_stream_view{})) cugraph::transform_reduce_v_frontier_outgoing_e_by_dst</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexFrontierBucketType const &amp;frontier, EdgeSrcValueInputWrapper edge_src_value_input, EdgeDstValueInputWrapper edge_dst_value_input, EdgeValueInputWrapper edge_value_input, EdgeOp e_op, ReduceOp reduce_op, bool do_expensive_check=false)</argsstring>
        <name>transform_reduce_v_frontier_outgoing_e_by_dst</name>
        <qualifiedname>cugraph::transform_reduce_v_frontier_outgoing_e_by_dst</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexFrontierBucketType const &amp;</type>
          <declname>frontier</declname>
        </param>
        <param>
          <type>EdgeSrcValueInputWrapper</type>
          <declname>edge_src_value_input</declname>
        </param>
        <param>
          <type>EdgeDstValueInputWrapper</type>
          <declname>edge_dst_value_input</declname>
        </param>
        <param>
          <type>EdgeValueInputWrapper</type>
          <declname>edge_value_input</declname>
        </param>
        <param>
          <type>EdgeOp</type>
          <declname>e_op</declname>
        </param>
        <param>
          <type>ReduceOp</type>
          <declname>reduce_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_v_frontier_outgoing_e_by_dst.cuh" line="328" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/transform_reduce_v_frontier_outgoing_e_by_dst.cuh" bodystart="328" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="update__edge__src__dst__property_8cuh_1ac22b2dbcebc29962c50d7fdaa1383721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexPropertyInputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::update_edge_src_property</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexPropertyInputIterator vertex_property_input_first, edge_src_property_t&lt; GraphViewType, typename std::iterator_traits&lt; VertexPropertyInputIterator &gt;::value_type &gt; &amp;edge_src_property_output, bool do_expensive_check=false)</argsstring>
        <name>update_edge_src_property</name>
        <qualifiedname>cugraph::update_edge_src_property</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexPropertyInputIterator</type>
          <declname>vertex_property_input_first</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__src__property__t" kindref="compound">edge_src_property_t</ref>&lt; GraphViewType, typename std::iterator_traits&lt; VertexPropertyInputIterator &gt;::value_type &gt; &amp;</type>
          <declname>edge_src_property_output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Update graph edge source property values from the input vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This version updates graph edge source property values for the entire edge source ranges (assigned to this process in multi-GPU).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexPropertyInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_property_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property value for the first (inclusive) vertex (of the vertex partition assigned to this process in multi-GPU). <computeroutput>vertex_property_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_property_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_partition_src_property_output</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcugraph_1_1edge__src__property__t" kindref="compound">edge_src_property_t</ref> class object to store source property values (for the edge sources assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_edge_src_dst_property.cuh" line="875" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_edge_src_dst_property.cuh" bodystart="875" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="update__edge__src__dst__property_8cuh_1a5a28089b0fca56011d11ff505cfe6e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexIterator</type>
          </param>
          <param>
            <type>typename VertexPropertyInputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::update_edge_src_property</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexIterator vertex_first, VertexIterator vertex_last, VertexPropertyInputIterator vertex_property_input_first, edge_src_property_t&lt; GraphViewType, typename std::iterator_traits&lt; VertexPropertyInputIterator &gt;::value_type &gt; &amp;edge_src_property_output, bool do_expensive_check=false)</argsstring>
        <name>update_edge_src_property</name>
        <qualifiedname>cugraph::update_edge_src_property</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>vertex_first</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>vertex_last</declname>
        </param>
        <param>
          <type>VertexPropertyInputIterator</type>
          <declname>vertex_property_input_first</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__src__property__t" kindref="compound">edge_src_property_t</ref>&lt; GraphViewType, typename std::iterator_traits&lt; VertexPropertyInputIterator &gt;::value_type &gt; &amp;</type>
          <declname>edge_src_property_output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Update graph edge source property values from the input vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This version updates only a subset of graph edge source property values. [<computeroutput>vertex_first</computeroutput>, <computeroutput>vertex_last</computeroutput>) specifies the vertices with new property values to be updated.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex identifiers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexPropertyInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the first (inclusive) vertex with a new value to be updated. v in [vertex_first, vertex_last) should be distinct (and should belong to the vertex partition assigned to this process in multi-GPU), otherwise undefined behavior. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the last (exclusive) vertex with a new value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_property_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property value for the first (inclusive) vertex (of the vertex partition assigned to this process in multi-GPU). <computeroutput>vertex_property_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_property_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_partition_src_property_output</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcugraph_1_1edge__src__property__t" kindref="compound">edge_src_property_t</ref> class object to store source property values (for the edge sources assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_edge_src_dst_property.cuh" line="922" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_edge_src_dst_property.cuh" bodystart="922" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="update__edge__src__dst__property_8cuh_1a3afe83032264f6966c7c8f7174178dad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexPropertyInputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::update_edge_dst_property</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexPropertyInputIterator vertex_property_input_first, edge_dst_property_t&lt; GraphViewType, typename std::iterator_traits&lt; VertexPropertyInputIterator &gt;::value_type &gt; &amp;edge_dst_property_output, bool do_expensive_check=false)</argsstring>
        <name>update_edge_dst_property</name>
        <qualifiedname>cugraph::update_edge_dst_property</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexPropertyInputIterator</type>
          <declname>vertex_property_input_first</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__dst__property__t" kindref="compound">edge_dst_property_t</ref>&lt; GraphViewType, typename std::iterator_traits&lt; VertexPropertyInputIterator &gt;::value_type &gt; &amp;</type>
          <declname>edge_dst_property_output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Update graph edge destination property values from the input vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This version updates graph edge destination property values for the entire edge destination ranges (assigned to this process in multi-GPU).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexPropertyInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_property_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property value for the first (inclusive) vertex (of the vertex partition assigned to this process in multi-GPU). <computeroutput>vertex_property_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_property_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_partition_dst_property_output</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcugraph_1_1edge__dst__property__t" kindref="compound">edge_dst_property_t</ref> class object to store destination property values (for the edge destinations assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_edge_src_dst_property.cuh" line="990" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_edge_src_dst_property.cuh" bodystart="990" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="update__edge__src__dst__property_8cuh_1a47f0081468649a85f08937009a354bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename VertexIterator</type>
          </param>
          <param>
            <type>typename VertexPropertyInputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::update_edge_dst_property</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, VertexIterator vertex_first, VertexIterator vertex_last, VertexPropertyInputIterator vertex_property_input_first, edge_dst_property_t&lt; GraphViewType, typename std::iterator_traits&lt; VertexPropertyInputIterator &gt;::value_type &gt; &amp;edge_dst_property_output, bool do_expensive_check=false)</argsstring>
        <name>update_edge_dst_property</name>
        <qualifiedname>cugraph::update_edge_dst_property</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>vertex_first</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>vertex_last</declname>
        </param>
        <param>
          <type>VertexPropertyInputIterator</type>
          <declname>vertex_property_input_first</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__dst__property__t" kindref="compound">edge_dst_property_t</ref>&lt; GraphViewType, typename std::iterator_traits&lt; VertexPropertyInputIterator &gt;::value_type &gt; &amp;</type>
          <declname>edge_dst_property_output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Update graph edge destination property values from the input vertex property values. </para>
        </briefdescription>
        <detaileddescription>
<para>This version updates only a subset of graph edge destination property values. [<computeroutput>vertex_first</computeroutput>, <computeroutput>vertex_last</computeroutput>) specifies the vertices with new property values to be updated.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex identifiers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexPropertyInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for vertex property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the first (inclusive) vertex with a new value to be updated. v in [vertex_first, vertex_last) should be distinct (and should belong to the vertex partition assigned to this process in multi-GPU), otherwise undefined behavior. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the last (exclusive) vertex with a new value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_property_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property value for the first (inclusive) vertex (of the vertex partition assigned to this process in multi-GPU). <computeroutput>vertex_property_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_property_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_partition_dst_property_output</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcugraph_1_1edge__dst__property__t" kindref="compound">edge_dst_property_t</ref> class object to store destination property values (for the edge destinations assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_edge_src_dst_property.cuh" line="1037" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_edge_src_dst_property.cuh" bodystart="1037" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="update__v__frontier_8cuh_1ad1970ebead4b3052ea6f1f4e5827d9ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename KeyBuffer</type>
          </param>
          <param>
            <type>typename PayloadBuffer</type>
          </param>
          <param>
            <type>typename VertexFrontierType</type>
          </param>
          <param>
            <type>typename VertexValueInputIterator</type>
          </param>
          <param>
            <type>typename VertexValueOutputIterator</type>
          </param>
          <param>
            <type>typename VertexOp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::update_v_frontier</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, KeyBuffer &amp;&amp;key_buffer, PayloadBuffer &amp;&amp;payload_buffer, VertexFrontierType &amp;frontier, std::vector&lt; size_t &gt; const &amp;next_frontier_bucket_indices, VertexValueInputIterator vertex_value_input_first, VertexValueOutputIterator vertex_value_output_first, VertexOp v_op, bool do_expensive_check=false)</argsstring>
        <name>update_v_frontier</name>
        <qualifiedname>cugraph::update_v_frontier</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>KeyBuffer &amp;&amp;</type>
          <declname>key_buffer</declname>
        </param>
        <param>
          <type>PayloadBuffer &amp;&amp;</type>
          <declname>payload_buffer</declname>
        </param>
        <param>
          <type>VertexFrontierType &amp;</type>
          <declname>frontier</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>next_frontier_bucket_indices</declname>
        </param>
        <param>
          <type>VertexValueInputIterator</type>
          <declname>vertex_value_input_first</declname>
        </param>
        <param>
          <type>VertexValueOutputIterator</type>
          <declname>vertex_value_output_first</declname>
        </param>
        <param>
          <type>VertexOp</type>
          <declname>v_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Insert (tagged-)vertices to the vertex frontier and update vertex property values of the newly inserted vertices . </para>
        </briefdescription>
        <detaileddescription>
<para>This primitive often works in pair with transform_reduce_v_frontier_outgoing_e_by_dst. This version of update_v_frontier takes <computeroutput>payload_buffer</computeroutput> and @v_op takes a payload value in addition to a (tagged-)vertex and a vertex property value as input arguments.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KeyBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the buffer storing (tagged-)vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PayloadBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the buffer storing payload values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexFrontierType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the vertex frontier class which abstracts vertex frontier managements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for input vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for output vertex property variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the ternary vertex operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer object storing (tagged-)vertices to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer object storing payload values for each (tagged-)vertices in the <computeroutput>key_buffer</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frontier</parametername>
</parameternamelist>
<parameterdescription>
<para>VertexFrontierType class object for vertex frontier managements. This object includes multiple bucket objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next_frontier_bucket_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of the vertex frontier buckets to store new frontier (tagged-)vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property values for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_output_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property variables for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_output_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_output_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Ternary operator that takes (tagged-)vertex ID, *(<computeroutput>vertex_value_input_first</computeroutput> + i) (where i is [0, <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>)) and the payload value for the (tagged-)vertex ID and returns a tuple of 1) a thrust::optional object optionally storing a bucket index and 2) a thrust::optional object optionally storing a new vertex property value. If the first element of the returned tuple is thrust::nullopt, this (tagged-)vertex won&apos;t be inserted to the vertex frontier. If the second element is thrust::nullopt, the vertex property value for this vertex won&apos;t be updated. Note that it is currently undefined behavior if there are multiple tagged-vertices with the same vertex ID (but with different tags) AND <computeroutput>v_op</computeroutput> results on the tagged-vertices with the same vertex ID have more than one valid new vertex property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_v_frontier.cuh" line="175" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_v_frontier.cuh" bodystart="175" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="update__v__frontier_8cuh_1ae6aebef0b6d09ca702e5979f29306417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphViewType</type>
          </param>
          <param>
            <type>typename KeyBuffer</type>
          </param>
          <param>
            <type>typename VertexFrontierType</type>
          </param>
          <param>
            <type>typename VertexValueInputIterator</type>
          </param>
          <param>
            <type>typename VertexValueOutputIterator</type>
          </param>
          <param>
            <type>typename VertexOp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::update_v_frontier</definition>
        <argsstring>(raft::handle_t const &amp;handle, GraphViewType const &amp;graph_view, KeyBuffer &amp;&amp;key_buffer, VertexFrontierType &amp;frontier, std::vector&lt; size_t &gt; const &amp;next_frontier_bucket_indices, VertexValueInputIterator vertex_value_input_first, VertexValueOutputIterator vertex_value_output_first, VertexOp v_op, bool do_expensive_check=false)</argsstring>
        <name>update_v_frontier</name>
        <qualifiedname>cugraph::update_v_frontier</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>GraphViewType const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>KeyBuffer &amp;&amp;</type>
          <declname>key_buffer</declname>
        </param>
        <param>
          <type>VertexFrontierType &amp;</type>
          <declname>frontier</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>next_frontier_bucket_indices</declname>
        </param>
        <param>
          <type>VertexValueInputIterator</type>
          <declname>vertex_value_input_first</declname>
        </param>
        <param>
          <type>VertexValueOutputIterator</type>
          <declname>vertex_value_output_first</declname>
        </param>
        <param>
          <type>VertexOp</type>
          <declname>v_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Insert (tagged-)vertices to the vertex frontier and update vertex property values of the newly inserted vertices . </para>
        </briefdescription>
        <detaileddescription>
<para>This primitive often works in pair with transform_reduce_v_frontier_outgoing_e_by_dst. This version of update_v_frontier does not take <computeroutput>payload_buffer</computeroutput> and @v_op takes a (tagged-)vertex and a vertex property value as input arguments (no payload value in the input parameter list).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GraphViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the passed non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KeyBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the buffer storing (tagged-)vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexFrontierType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the vertex frontier class which abstracts vertex frontier managements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueInputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for input vertex property values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexValueOutputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the iterator for output vertex property variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VertexOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the binary vertex operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owning graph object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer object storing (tagged-)vertices to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frontier</parametername>
</parameternamelist>
<parameterdescription>
<para>VertexFrontierType class object for vertex frontier managements. This object includes multiple bucket objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next_frontier_bucket_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of the vertex frontier buckets to store new frontier (tagged-)vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_input_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property values for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_input_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_input_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_value_output_first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the vertex property variables for the first (inclusive) vertex (assigned to this process in multi-GPU). <computeroutput>vertex_value_output_last</computeroutput> (exclusive) is deduced as <computeroutput>vertex_value_output_first</computeroutput> + <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary operator that takes (tagged-)vertex ID, and *(<computeroutput>vertex_value_input_first</computeroutput> + i) (where i is [0, <computeroutput>graph_view.local_vertex_partition_range_size()</computeroutput>)) and returns a tuple of 1) a thrust::optional object optionally storing a bucket index and 2) a thrust::optional object optionally storing a new vertex property value. If the first element of the returned tuple is thrust::nullopt, this (tagged-)vertex won&apos;t be inserted to the vertex frontier. If the second element is thrust::nullopt, the vertex property value for this vertex won&apos;t be updated. Note that it is currently undefined behavior if there are multiple tagged-vertices with the same vertex ID (but with different tags) AND <computeroutput>v_op</computeroutput> results on the tagged-vertices with the same vertex ID have more than one valid new vertex property values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_v_frontier.cuh" line="303" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/prims/update_v_frontier.cuh" bodystart="303" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="neighborhood_8cu_1aee11f340874adbdd791257cfb8522d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; edge_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; edge_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::sample_neighbors_adjacency_list</definition>
        <argsstring>(raft::handle_t const  &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; vertex_t, edge_t, false, false &gt; const  &amp;graph_view, vertex_t const  *ptr_d_start, size_t num_start_vertices, size_t sampling_size, ops::graph::SamplingAlgoT sampling_algo)</argsstring>
        <name>sample_neighbors_adjacency_list</name>
        <qualifiedname>cugraph::sample_neighbors_adjacency_list</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sampling_size</declname>
        </param>
        <param>
          <type>ops::graph::SamplingAlgoT</type>
          <declname>sampling_algo</declname>
        </param>
        <briefdescription>
<para>generate sub-sampled graph as an adjacency list (CSR format) given input graph, list of vertices and sample size per vertex. The output graph consists of the given vertices with each vertex having at most <computeroutput>sample_size</computeroutput> neighbors from the original graph </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type of input graph/view (typically, <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>, non-transposed and single-gpu). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The RngState instance holding pseudo-random number generator state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph (view )object to sub-sample. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr_d_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to set of starting vertex indices for the sub-sampling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_start_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>= number(vertices) to use for sub-sampling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampling_size</parametername>
</parameternamelist>
<parameterdescription>
<para>= max number of neighbors per output vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampling_algo</parametername>
</parameternamelist>
<parameterdescription>
<para>= the sampling algorithm (algo R/algo L/etc.) used to produce outputs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;typename graph_t::edge_type&gt;, rmm::device_uvector&lt;typename graph_t::vertex_type&gt;&gt; Tuple consisting of two arrays representing the offsets and indices of the sub-sampled graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" line="30" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" bodystart="30" bodyend="52" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1744" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="neighborhood_8cu_1a8335b9124f6a001a6e370529654113c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::sample_neighbors_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; vertex_t, edge_t, false, false &gt; const  &amp;graph_view, vertex_t const  *ptr_d_start, size_t num_start_vertices, size_t sampling_size, ops::graph::SamplingAlgoT sampling_algo)</argsstring>
        <name>sample_neighbors_edgelist</name>
        <qualifiedname>cugraph::sample_neighbors_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sampling_size</declname>
        </param>
        <param>
          <type>ops::graph::SamplingAlgoT</type>
          <declname>sampling_algo</declname>
        </param>
        <briefdescription>
<para>generate sub-sampled graph as an edge list (COO format) given input graph, list of vertices and sample size per vertex. The output graph consists of the given vertices with each vertex having at most <computeroutput>sample_size</computeroutput> neighbors from the original graph </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type of input graph/view (typically, <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>, non-transposed and single-gpu). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The RngState instance holding pseudo-random number generator state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph (view )object to sub-sample. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr_d_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to set of starting vertex indices for the sub-sampling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_start_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>= number(vertices) to use for sub-sampling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampling_size</parametername>
</parameternamelist>
<parameterdescription>
<para>= max number of neighbors per output vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampling_algo</parametername>
</parameternamelist>
<parameterdescription>
<para>= the sampling algorithm (algo R/algo L/etc.) used to produce outputs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;typename graph_t::edge_type&gt;, rmm::device_uvector&lt;typename graph_t::vertex_type&gt;&gt; Tuple consisting of two arrays representing the source and destination nodes of the sub-sampled graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" line="55" column="12" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" bodystart="55" bodyend="78" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1773" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="neighborhood_8cu_1a0cde52de3962e097753ccacdaad11a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::sample_neighbors_adjacency_list</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;gview, int32_t const *ptr_d_start, size_t num_start_vertices, size_t sampling_size, ops::graph::SamplingAlgoT sampling_algo)</argsstring>
        <name>sample_neighbors_adjacency_list</name>
        <qualifiedname>cugraph::sample_neighbors_adjacency_list</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>gview</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sampling_size</declname>
        </param>
        <param>
          <type>ops::graph::SamplingAlgoT</type>
          <declname>sampling_algo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" line="84" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" declline="84" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="neighborhood_8cu_1a8f7008d449266cdc6b9488a1c7617fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::sample_neighbors_adjacency_list</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;gview, int64_t const *ptr_d_start, size_t num_start_vertices, size_t sampling_size, ops::graph::SamplingAlgoT sampling_algo)</argsstring>
        <name>sample_neighbors_adjacency_list</name>
        <qualifiedname>cugraph::sample_neighbors_adjacency_list</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>gview</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sampling_size</declname>
        </param>
        <param>
          <type>ops::graph::SamplingAlgoT</type>
          <declname>sampling_algo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" line="93" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" declline="93" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="neighborhood_8cu_1afe83207d29567365df7313a3bf2e7bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::sample_neighbors_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;gview, int32_t const *ptr_d_start, size_t num_start_vertices, size_t sampling_size, ops::graph::SamplingAlgoT sampling_algo)</argsstring>
        <name>sample_neighbors_edgelist</name>
        <qualifiedname>cugraph::sample_neighbors_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>gview</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sampling_size</declname>
        </param>
        <param>
          <type>ops::graph::SamplingAlgoT</type>
          <declname>sampling_algo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" line="104" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" declline="104" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="neighborhood_8cu_1a4267dcf8ec1a4be02675e8d2997bcc08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::sample_neighbors_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::random::RngState &amp;rng_state, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;gview, int64_t const *ptr_d_start, size_t num_start_vertices, size_t sampling_size, ops::graph::SamplingAlgoT sampling_algo)</argsstring>
        <name>sample_neighbors_edgelist</name>
        <qualifiedname>cugraph::sample_neighbors_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>gview</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sampling_size</declname>
        </param>
        <param>
          <type>ops::graph::SamplingAlgoT</type>
          <declname>sampling_algo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" line="113" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/neighborhood.cu" declline="113" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cu_1a23fc2b734357a8c8501a59ded51f7676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;gview, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, int32_t const *ptr_d_start, int32_t num_paths, int32_t max_depth, bool use_padding, std::unique_ptr&lt; sampling_params_t &gt; sampling_strategy)</argsstring>
        <name>random_walks</name>
        <qualifiedname>cugraph::random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>gview</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>max_depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structcugraph_1_1sampling__params__t" kindref="compound">sampling_params_t</ref> &gt;</type>
          <declname>sampling_strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" line="27" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" declline="27" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cu_1a691b0499cfe7f544eaed8060c8444629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;gview, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int32_t const *ptr_d_start, int64_t num_paths, int64_t max_depth, bool use_padding, std::unique_ptr&lt; sampling_params_t &gt; sampling_strategy)</argsstring>
        <name>random_walks</name>
        <qualifiedname>cugraph::random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>gview</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>max_depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structcugraph_1_1sampling__params__t" kindref="compound">sampling_params_t</ref> &gt;</type>
          <declname>sampling_strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" line="38" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" declline="38" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cu_1a51a638d3bfa25cdec48566cf2d7f9027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;gview, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int64_t const *ptr_d_start, int64_t num_paths, int64_t max_depth, bool use_padding, std::unique_ptr&lt; sampling_params_t &gt; sampling_strategy)</argsstring>
        <name>random_walks</name>
        <qualifiedname>cugraph::random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>gview</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>max_depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structcugraph_1_1sampling__params__t" kindref="compound">sampling_params_t</ref> &gt;</type>
          <declname>sampling_strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" line="49" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" declline="49" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cu_1abd715c856f8e9498c2020d4a3d0c1fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;gview, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, int32_t const *ptr_d_start, int32_t num_paths, int32_t max_depth, bool use_padding, std::unique_ptr&lt; sampling_params_t &gt; sampling_strategy)</argsstring>
        <name>random_walks</name>
        <qualifiedname>cugraph::random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>gview</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>max_depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structcugraph_1_1sampling__params__t" kindref="compound">sampling_params_t</ref> &gt;</type>
          <declname>sampling_strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" line="62" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" declline="62" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cu_1a7795001b2fed542c63bbc92c119f1443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;gview, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int32_t const *ptr_d_start, int64_t num_paths, int64_t max_depth, bool use_padding, std::unique_ptr&lt; sampling_params_t &gt; sampling_strategy)</argsstring>
        <name>random_walks</name>
        <qualifiedname>cugraph::random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>gview</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>max_depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structcugraph_1_1sampling__params__t" kindref="compound">sampling_params_t</ref> &gt;</type>
          <declname>sampling_strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" line="73" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" declline="73" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cu_1a0c9fc2a920d35da9fa88ec1230a3f688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;gview, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int64_t const *ptr_d_start, int64_t num_paths, int64_t max_depth, bool use_padding, std::unique_ptr&lt; sampling_params_t &gt; sampling_strategy)</argsstring>
        <name>random_walks</name>
        <qualifiedname>cugraph::random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>gview</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>max_depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structcugraph_1_1sampling__params__t" kindref="compound">sampling_params_t</ref> &gt;</type>
          <declname>sampling_strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" line="84" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" declline="84" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cu_1a5095ac2eb070123d74920a044ad519b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std:: tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::convert_paths_to_coo</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t coalesced_sz_v, int32_t num_paths, rmm::device_buffer &amp;&amp;d_coalesced_v, rmm::device_buffer &amp;&amp;d_sizes)</argsstring>
        <name>convert_paths_to_coo</name>
        <qualifiedname>cugraph::convert_paths_to_coo</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>coalesced_sz_v</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>rmm::device_buffer &amp;&amp;</type>
          <declname>d_coalesced_v</declname>
        </param>
        <param>
          <type>rmm::device_buffer &amp;&amp;</type>
          <declname>d_sizes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" line="96" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" declline="96" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cu_1a65d85c45875873cbab30132865102834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::convert_paths_to_coo</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t coalesced_sz_v, int64_t num_paths, rmm::device_buffer &amp;&amp;d_coalesced_v, rmm::device_buffer &amp;&amp;d_sizes)</argsstring>
        <name>convert_paths_to_coo</name>
        <qualifiedname>cugraph::convert_paths_to_coo</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>coalesced_sz_v</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>rmm::device_buffer &amp;&amp;</type>
          <declname>d_coalesced_v</declname>
        </param>
        <param>
          <type>rmm::device_buffer &amp;&amp;</type>
          <declname>d_sizes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" line="104" column="3" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" declline="104" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cu_1a5217af115ea86ce68e3f3f917643cd51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::query_rw_sizes_offsets</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t num_paths, int32_t const *ptr_d_sizes)</argsstring>
        <name>query_rw_sizes_offsets</name>
        <qualifiedname>cugraph::query_rw_sizes_offsets</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>ptr_d_sizes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" line="121" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" declline="121" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cu_1a9719be919781360f1c89a3e1e003de60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::query_rw_sizes_offsets</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t num_paths, int64_t const *ptr_d_sizes)</argsstring>
        <name>query_rw_sizes_offsets</name>
        <qualifiedname>cugraph::query_rw_sizes_offsets</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>ptr_d_sizes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" line="126" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cu" declline="126" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cuh_1ae11bdccdfa6faa898adca9de4bd61770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename index_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; weight_t &gt;, rmm::device_uvector&lt; index_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; weight_t &gt;, rmm::device_uvector&lt; index_t &gt; &gt; cugraph::random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const * &gt; &gt; edge_weight_view, vertex_t const *ptr_d_start, index_t num_paths, index_t max_depth, bool use_padding, std::unique_ptr&lt; sampling_params_t &gt; sampling_strategy)</argsstring>
        <name>random_walks</name>
        <qualifiedname>cugraph::random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>ptr_d_start</declname>
        </param>
        <param>
          <type>index_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>index_t</type>
          <declname>max_depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_padding</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structcugraph_1_1sampling__params__t" kindref="compound">sampling_params_t</ref> &gt;</type>
          <declname>sampling_strategy</declname>
        </param>
        <briefdescription>
<para>returns random walks (RW) from starting sources, where each path is of given maximum length. Uniform distribution is assumed for the random engine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type of graph/view (typically, <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type used to store indexing and sizes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph (view )object to generate RW on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr_d_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to set of starting vertex indices for the RW. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_paths</parametername>
</parameternamelist>
<parameterdescription>
<para>= number(paths). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum length of RWs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) specifies if return uses padded format (true), or coalesced (compressed) format; when padding is used the output is a matrix of vertex paths and a matrix of edges paths (weights); in this case the matrices are stored in row major order; the vertex path matrix is padded with <computeroutput>num_vertices</computeroutput> values and the weight matrix is padded with <computeroutput>0</computeroutput> values; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selector_type</parametername>
</parameternamelist>
<parameterdescription>
<para>identifier for sampling strategy: uniform, biased, etc.; defaults to uniform = 0; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;weight_t&gt;, rmm::device_uvector&lt;index_t&gt;&gt; Triplet of either padded or coalesced RW paths; in the coalesced case (default), the return consists of corresponding vertex and edge weights for each, and corresponding path sizes. This is meant to minimize the number of DF&apos;s to be passed to the Python layer. The meaning of &quot;coalesced&quot; here is that a 2D array of paths of different sizes is represented as a 1D contiguous array. In the padded case the return is a matrix of num_paths x max_depth vertex paths; and num_paths x (max_depth-1) edge (weight) paths, with an empty array of sizes. Note: if the graph is un-weighted the edge (weight) paths consists of <computeroutput>weight_t{1}</computeroutput> entries;</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This algorithm will be deprecated once all of the functionality is migrated to the newer APIS: uniform_random_walks(), biased_random_walks(), and node2vec_random_walks().</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type of graph/view (typically, <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type used to store indexing and sizes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph (view )object to generate RW on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr_d_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to set of starting vertex indices for the RW. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_paths</parametername>
</parameternamelist>
<parameterdescription>
<para>= number(paths). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum length of RWs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) specifies if return uses padded format (true), or coalesced (compressed) format; when padding is used the output is a matrix of vertex paths and a matrix of edges paths (weights); in this case the matrices are stored in row major order; the vertex path matrix is padded with <computeroutput>num_vertices</computeroutput> values and the weight matrix is padded with <computeroutput>0</computeroutput> values; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampling_strategy</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer for sampling strategy: uniform, biased, etc.; possible values{0==uniform, 1==biased, 2==node2vec}; defaults to nullptr == uniform; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;weight_t&gt;, rmm::device_uvector&lt;index_t&gt;&gt; Triplet of either padded or coalesced RW paths; in the coalesced case (default), the return consists of corresponding vertex and edge weights for each, and corresponding path sizes. This is meant to minimize the number of DF&apos;s to be passed to the Python layer. The meaning of &quot;coalesced&quot; here is that a 2D array of paths of different sizes is represented as a 1D contiguous array. In the padded case the return is a matrix of num_paths x max_depth vertex paths; and num_paths x (max_depth-1) edge (weight) paths, with an empty array of sizes. Note: if the graph is un-weighted the edge (weight) paths consists of <computeroutput>weight_t{1}</computeroutput> entries; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cuh" line="1020" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cuh" bodystart="1020" bodyend="1187" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1574" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cuh_1a6ce3d1cb61f337889ab06773e3234a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename index_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; index_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; index_t &gt; &gt; cugraph::convert_paths_to_coo</definition>
        <argsstring>(raft::handle_t const &amp;handle, index_t coalesced_sz_v, index_t num_paths, rmm::device_buffer &amp;&amp;d_coalesced_v, rmm::device_buffer &amp;&amp;d_sizes)</argsstring>
        <name>convert_paths_to_coo</name>
        <qualifiedname>cugraph::convert_paths_to_coo</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>index_t</type>
          <declname>coalesced_sz_v</declname>
        </param>
        <param>
          <type>index_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>rmm::device_buffer &amp;&amp;</type>
          <declname>d_coalesced_v</declname>
        </param>
        <param>
          <type>rmm::device_buffer &amp;&amp;</type>
          <declname>d_sizes</declname>
        </param>
        <briefdescription>
<para>returns the COO format (src_vector, dst_vector) from the random walks (RW) paths. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex indices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type used to store indexing and sizes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coalesced_sz_v</parametername>
</parameternamelist>
<parameterdescription>
<para>coalesced vertex vector size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_paths</parametername>
</parameternamelist>
<parameterdescription>
<para>number of paths. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_coalesced_v</parametername>
</parameternamelist>
<parameterdescription>
<para>coalesced vertex buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>paths size buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple of (src_vertex_vector, dst_Vertex_vector, path_offsets), where path_offsets are the offsets where the COO set of each path starts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cuh" line="1207" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cuh" bodystart="1207" bodyend="1222" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/path_retrieval.hpp" declline="66" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="random__walks_8cuh_1a08c8df4f0a0a151e4767a5f1d299a5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename index_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; index_t &gt;, rmm::device_uvector&lt; index_t &gt;, rmm::device_uvector&lt; index_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; index_t &gt;, rmm::device_uvector&lt; index_t &gt;, rmm::device_uvector&lt; index_t &gt; &gt; cugraph::query_rw_sizes_offsets</definition>
        <argsstring>(raft::handle_t const &amp;handle, index_t num_paths, index_t const *ptr_d_sizes)</argsstring>
        <name>query_rw_sizes_offsets</name>
        <qualifiedname>cugraph::query_rw_sizes_offsets</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>index_t</type>
          <declname>num_paths</declname>
        </param>
        <param>
          <type>index_t const *</type>
          <declname>ptr_d_sizes</declname>
        </param>
        <briefdescription>
<para>returns additional RW information on vertex paths offsets and weight path sizes and offsets, for the coalesced case (the padded case does not need or provide this information) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>index_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type used to store indexing and sizes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_paths</parametername>
</parameternamelist>
<parameterdescription>
<para>number of paths. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr_d_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>sizes of vertex paths. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple of (vertex_path_offsets, weight_path_sizes, weight_path_offsets), where offsets are exclusive scan of corresponding sizes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cuh" line="1238" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks.cuh" bodystart="1238" bodyend="1262" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/path_retrieval.hpp" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__impl_8cuh_1a36db48956631a7e10d4c2003857d433e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, raft::device_span&lt; vertex_t const  &gt; start_vertices, size_t max_length, uint64_t seed=std::numeric_limits&lt; uint64_t &gt;::max())</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
          <defval>std::numeric_limits&lt; uint64_t &gt;::max()</defval>
        </param>
        <briefdescription>
<para>returns uniform random walks from starting sources, where each path is of given maximum length. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>start_vertices</computeroutput> can contain duplicates, in which case different random walks will be generated for each instance.</para>
<para>If <computeroutput>edge_weight_view.has_value()</computeroutput> is true, the return contains edge weights. If <computeroutput>edge_weight_view.has_value()</computeroutput> is false, the returned value will be std::nullopt.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>graph view to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Device span defining the starting vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_length</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum length of random walk </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional, defaults to system time), seed for random number generation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple containing device vectors of vertices and the edge weights (if <computeroutput>edge_weight_view.has_value()</computeroutput> is true)<linebreak/>
 For each input selector there will be (max_length+1) elements in the vertex vector with the starting vertex followed by the subsequent vertices in the random walk. If a path terminates before max_length, the vertices will be populated with <ref refid="structcugraph_1_1invalid__vertex__id" kindref="compound">invalid_vertex_id</ref> (-1 for signed vertex_t, std::numeric_limits&lt;vertex_t&gt;::max() for an unsigned vertex_t type)<linebreak/>
 For each input selector there will be max_length elements in the weights vector with the edge weight for the edge in the path. If a path terminates before max_length the subsequent edge weights will be set to weight_t{0}. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_impl.cuh" line="451" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_impl.cuh" bodystart="451" bodyend="467" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1621" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__impl_8cuh_1aea8cbfe4714ff19300ffbd27ce994320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, edge_property_view_t&lt; edge_t, weight_t const  * &gt; edge_weight_view, raft::device_span&lt; vertex_t const  &gt; start_vertices, size_t max_length, uint64_t seed=std::numeric_limits&lt; uint64_t &gt;::max())</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
          <defval>std::numeric_limits&lt; uint64_t &gt;::max()</defval>
        </param>
        <briefdescription>
<para>returns biased random walks from starting sources, where each path is of given maximum length. </para>
        </briefdescription>
        <detaileddescription>
<para>The next vertex is biased based on the edge weights. The probability of traversing a departing edge will be the edge weight divided by the sum of the departing edge weights.</para>
<para><computeroutput>start_vertices</computeroutput> can contain duplicates, in which case different random walks will be generated for each instance.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the graph is unweighted</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>graph view to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>View object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Device span defining the starting vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_length</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum length of random walk </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional, defaults to system time), seed for random number generation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple containing device vectors of vertices and the edge weights<linebreak/>
 For each input selector there will be (max_length+1) elements in the vertex vector with the starting vertex followed by the subsequent vertices in the random walk. If a path terminates before max_length, the vertices will be populated with <ref refid="structcugraph_1_1invalid__vertex__id" kindref="compound">invalid_vertex_id</ref> (-1 for signed vertex_t, std::numeric_limits&lt;vertex_t&gt;::max() for an unsigned vertex_t type)<linebreak/>
 For each input selector there will be max_length elements in the weights vector with the edge weight for the edge in the path. If a path terminates before max_length the subsequent edge weights will be set to weight_t{0}. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_impl.cuh" line="471" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_impl.cuh" bodystart="471" bodyend="487" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1665" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__impl_8cuh_1abb87698393e0c91b589715147af50fb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, raft::device_span&lt; vertex_t const  &gt; start_vertices, size_t max_length, weight_t p, weight_t q, uint64_t seed=std::numeric_limits&lt; uint64_t &gt;::max())</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>weight_t</type>
          <declname>p</declname>
        </param>
        <param>
          <type>weight_t</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
          <defval>std::numeric_limits&lt; uint64_t &gt;::max()</defval>
        </param>
        <briefdescription>
<para>returns biased random walks with node2vec biases from starting sources, where each path is of given maximum length. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>start_vertices</computeroutput> can contain duplicates, in which case different random walks will be generated for each instance.</para>
<para>If the <computeroutput>edge_weight_view.has_value()</computeroutput> = true, the return contains edge weights and the node2vec computation will utilize the edge weights. If <computeroutput>edge_weight_view.has_value()</computeroutput> == false, then the return will not contain edge weights and the node2vec computation will assume an edge weight of 1 for all edges.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>graph view to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. If <computeroutput>edge_weight_view.has_value()</computeroutput> == false, edge weights are assumed to be 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Device span defining the starting vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_length</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum length of random walk </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>node2vec return parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>node2vec in-out parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional, defaults to system time), seed for random number generation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple containing device vectors of vertices and the edge weights<linebreak/>
 For each input selector there will be (max_length+1) elements in the vertex vector with the starting vertex followed by the subsequent vertices in the random walk. If a path terminates before max_length, the vertices will be populated with <ref refid="structcugraph_1_1invalid__vertex__id" kindref="compound">invalid_vertex_id</ref> (-1 for signed vertex_t, std::numeric_limits&lt;vertex_t&gt;::max() for an unsigned vertex_t type)<linebreak/>
 For each input selector there will be max_length elements in the weights vector with the edge weight for the edge in the path. If a path terminates before max_length the subsequent edge weights will be set to weight_t{0}. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_impl.cuh" line="491" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_impl.cuh" bodystart="491" bodyend="510" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1712" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1aaf3d88be1f96f85ac9809ac52046744a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="24" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1af167885a87398f7b7c6fb8df5eca847d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="32" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a6da2c042e275e0b94265edbd616cf874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="40" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="40" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a6b2dacc274dfb26f83932ca183c6676e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="48" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a271a6d470d7768667e6f7ce5c3ef5b14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="56" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="56" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a49f9201790c08bad8b019774d558d16a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="64" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1adedf540a7e1cc32fb8e462bbf80a4058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="72" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1ad20c0e2d1e6091fb7294b6ee8df9c4d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="80" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="80" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a97e63bb5f2c531e639471bf5bbfd19b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="88" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="88" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a085434c79b1387033640144714caca35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="96" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="96" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a74c8c1a37cb5554bf76b4754f05d8588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="104" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="104" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a2c2e7ca1458aeb368ef95465e75cdf27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="112" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="112" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1ab7bc2baa56f525415b28f7649edd7c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, float p, float q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="120" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="120" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a68cc0de66bd2011311d95199d1fc914e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, float p, float q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="130" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="130" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a6e80de7a149dd2a6b1a17c8bf6f8a8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, float p, float q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="140" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="140" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a60c8e21bc4a7592333280aff330b52a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, double p, double q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="150" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="150" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1ad17df7810e8e35f64312bf00a34884bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, double p, double q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="160" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="160" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__mg_8cu_1a80804ed71d614079bc0b7b7cf990f80d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, double p, double q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" line="170" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_mg.cu" declline="170" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1ad91e6ea1521ec431a614b4197beeda5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="24" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1aa05d92e2e89fc1debf2517e52bd5e3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="32" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1af24c30d942970204a643d9bd691dad9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="40" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="40" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a833c28a4881efa2574a7abf4f9798411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="48" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a09f0a5f4024ebaa5b1acd787c8886291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="56" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="56" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1afe495cf5f7d638c0ebee344b13da60b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::uniform_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>uniform_random_walks</name>
        <qualifiedname>cugraph::uniform_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="64" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1aa49bf0284fd1f8c0a846bb3445417d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="72" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a0985ca68ed084c60375d371e82d94798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="80" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="80" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a9bb57bf55411fdf4b993068e0025b9eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="88" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="88" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a3b86f5a2c9663d02e6a3d39b6a09946d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="96" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="96" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a3a5d4a4bfc44d8ce752632b4f3791ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="104" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="104" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a9cbd08c14e6ee451a989dad6ad000b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::biased_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, uint64_t seed)</argsstring>
        <name>biased_random_walks</name>
        <qualifiedname>cugraph::biased_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="112" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="112" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a3d134d5939c21c7c3a979a66db87bb5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, float p, float q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="120" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="120" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1ac98d336af5d0e26255d95b25e0f09db6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, float p, float q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="130" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="130" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a6fa26746016871f1a9055c072dca5ea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, float p, float q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="140" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="140" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a7400057351e5bc283e3c8d6d0a72abc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, double p, double q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="150" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="150" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a633b69899539b3edc858eccfb2e8006b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t max_length, double p, double q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="160" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="160" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="random__walks__sg_8cu_1a6aa50fdbc272ea4b21866c59a1577358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::node2vec_random_walks</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t max_length, double p, double q, uint64_t seed)</argsstring>
        <name>node2vec_random_walks</name>
        <qualifiedname>cugraph::node2vec_random_walks</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" line="170" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/random_walks_sg.cu" declline="170" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__sampled__edgelist__impl_8cuh_1aaabc207bfce22f665399efe7804f9ed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename label_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; raft::device_span&lt; int32_t const  &gt; &gt; edgelist_hops, std::optional&lt; std::tuple&lt; raft::device_span&lt; label_t const  &gt;, raft::device_span&lt; size_t const  &gt; &gt; &gt; label_offsets, bool do_expensive_check=false)</argsstring>
        <name>renumber_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; label_t const &gt;, raft::device_span&lt; size_t const &gt; &gt; &gt;</type>
          <declname>label_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>renumber sampling output </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This API will be deprecated and will be replaced by the renumber_and_compress_sampled_edgelist and renumber_and_sort_sampled_edgelist functions in <ref refid="sampling__functions_8hpp_source" kindref="compound">sampling_functions.hpp</ref>.</para>
</xrefdescription></xrefsect></para>
<para>This function renumbers sampling function (e.g. uniform_neighbor_sample) outputs satisfying the following requirements.</para>
<para><orderedlist>
<listitem><para>If <computeroutput>edgelist_hops</computeroutput> is valid, we can consider (vertex ID, flag=src, hop) triplets for each vertex ID in <computeroutput>edgelist_srcs</computeroutput> and (vertex ID, flag=dst, hop) triplets for each vertex ID in <computeroutput>edgelist_dsts</computeroutput>. From these triplets, we can find the minimum (hop, flag) pairs for every unique vertex ID (hop is the primary key and flag is the secondary key, flag=src is considered smaller than flag=dst if hop numbers are same). Vertex IDs with smaller (hop, flag) pairs precede vertex IDs with larger (hop, flag) pairs in renumbering. Ordering can be arbitrary among the vertices with the same (hop, flag) pairs.</para>
</listitem><listitem><para>If <computeroutput>edgelist_hops</computeroutput> is invalid, unique vertex IDs in <computeroutput>edgelist_srcs</computeroutput> precede vertex IDs that appear only in <computeroutput>edgelist_dsts</computeroutput>.</para>
</listitem><listitem><para>If label_offsets.has_value() is ture, edge lists for different labels will be renumbered separately.</para>
</listitem></orderedlist>
</para>
<para>This function is single-GPU only (we are not aware of any practical multi-GPU use cases).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of labels. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_srcs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector storing original edgelist source vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_dsts</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector storing original edgelist destination vertices (size = <computeroutput>edgelist_srcs.size()</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_hops</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to the array storing hops for each edge list (source, destination) pairs (size = <computeroutput>edgelist_srcs.size()</computeroutput> if valid). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional tuple of unique labels and the input edge list (<computeroutput>edgelist_srcs</computeroutput>, <computeroutput>edgelist_hops</computeroutput>, and <computeroutput>edgelist_dsts</computeroutput>) offsets for the labels (siez = # unique labels + 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of vectors storing renumbered edge sources (size = <computeroutput>edgelist_srcs.size()</computeroutput>) , renumbered edge destinations (size = <computeroutput>edgelist_dsts.size()</computeroutput>), renumber_map to query original verties (size = # unique vertices or aggregate # unique vertices for every label), and renumber_map offsets (size = std::get&lt;0&gt;(*label_offsets).size() + 1, valid only if <computeroutput>label_offsets.has_value()</computeroutput> is true). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/renumber_sampled_edgelist_impl.cuh" line="469" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/renumber_sampled_edgelist_impl.cuh" bodystart="469" bodyend="717" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="973" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__sampled__edgelist__sg_8cu_1aa53defd7fdb1fb09bcbc4a18a2e5f40a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; edgelist_hops, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; size_t const &gt; &gt; &gt; label_offsets, bool do_expensive_check)</argsstring>
        <name>renumber_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; size_t const &gt; &gt; &gt;</type>
          <declname>label_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/renumber_sampled_edgelist_sg.cu" line="28" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/renumber_sampled_edgelist_sg.cu" declline="28" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__sampled__edgelist__sg_8cu_1aa4b84a7144d4cac293fd71bb6d25a003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; edgelist_hops, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; size_t const &gt; &gt; &gt; label_offsets, bool do_expensive_check)</argsstring>
        <name>renumber_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; size_t const &gt; &gt; &gt;</type>
          <declname>label_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/renumber_sampled_edgelist_sg.cu" line="41" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/renumber_sampled_edgelist_sg.cu" declline="41" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__impl_8cuh_1a5d5fe94d9cb5f4e754eb2ef0004dd995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename edge_id_t</type>
          </param>
          <param>
            <type>typename edge_type_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_compress_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool compress_per_hop, bool doubly_compress, bool do_expensive_check)</argsstring>
        <name>renumber_and_compress_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_compress_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compress_per_hop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doubly_compress</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_impl.cuh" line="1494" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_impl.cuh" bodystart="1494" bodyend="2116" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/sampling_functions.hpp" declline="135" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__impl_8cuh_1ac95a15cec920ea60a12e3707cf78ccfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename edge_id_t</type>
          </param>
          <param>
            <type>typename edge_type_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>renumber_and_sort_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_impl.cuh" line="2130" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_impl.cuh" bodystart="2130" bodyend="2275" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/sampling_functions.hpp" declline="237" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__impl_8cuh_1a392e0adf87eda578e8a28c319ca8a300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename edge_id_t</type>
          </param>
          <param>
            <type>typename edge_type_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>sort_sampled_edgelist</name>
        <qualifiedname>cugraph::sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_impl.cuh" line="2287" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_impl.cuh" bodystart="2287" bodyend="2399" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/sampling_functions.hpp" declline="308" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a49a287565b43cccf777fe43fb9c8c9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_compress_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool compress_per_hop, bool doubly_compress, bool do_expensive_check)</argsstring>
        <name>renumber_and_compress_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_compress_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compress_per_hop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doubly_compress</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="32" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1ab6eda8ce1664c9b1f87a0bfcd4f7c7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_compress_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool compress_per_hop, bool doubly_compress, bool do_expensive_check)</argsstring>
        <name>renumber_and_compress_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_compress_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compress_per_hop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doubly_compress</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="59" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1acf8e2d895ca476c92fea4a633e59aeac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_compress_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool compress_per_hop, bool doubly_compress, bool do_expensive_check)</argsstring>
        <name>renumber_and_compress_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_compress_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compress_per_hop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doubly_compress</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="86" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1abfe365808d39b5c951e71a7656be0f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_compress_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool compress_per_hop, bool doubly_compress, bool do_expensive_check)</argsstring>
        <name>renumber_and_compress_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_compress_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compress_per_hop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doubly_compress</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="113" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="113" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a2042794b6155fb449fa3381b3bc1bcf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_compress_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool compress_per_hop, bool doubly_compress, bool do_expensive_check)</argsstring>
        <name>renumber_and_compress_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_compress_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compress_per_hop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doubly_compress</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="140" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="140" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a4514f5942e104a1d557475db9f7e9f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_compress_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool compress_per_hop, bool doubly_compress, bool do_expensive_check)</argsstring>
        <name>renumber_and_compress_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_compress_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compress_per_hop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doubly_compress</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="167" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="167" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a8367f973dd9de71d56930357aff3aefa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>renumber_and_sort_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="193" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="193" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1ab5bab7f6a63b2bda00bb7336f9c3229c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>renumber_and_sort_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="217" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="217" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a47b3660fb45a3e8e85bf367677de01b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>renumber_and_sort_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="241" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="241" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a3f663dd6be495b7c39ab55d879ad31c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>renumber_and_sort_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="265" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="265" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1af69a23078da910cbdb5cb5dadb4ba762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>renumber_and_sort_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="289" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="289" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a9628c032f1a322e084631203311ce658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::renumber_and_sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; seed_vertices, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; seed_vertex_label_offsets, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>renumber_and_sort_sampled_edgelist</name>
        <qualifiedname>cugraph::renumber_and_sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>seed_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>seed_vertex_label_offsets</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="313" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="313" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a638cf7d4eb5342486d2e035abd110b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>sort_sampled_edgelist</name>
        <qualifiedname>cugraph::sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="335" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="335" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a094cc093c2863a1f7cafae1ed6bc5e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>sort_sampled_edgelist</name>
        <qualifiedname>cugraph::sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="354" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="354" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1ab7fddf30d8b18a4436a2271695f02ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>sort_sampled_edgelist</name>
        <qualifiedname>cugraph::sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="373" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="373" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a8ccc774682362b18709f93c098463568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>sort_sampled_edgelist</name>
        <qualifiedname>cugraph::sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="392" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="392" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1af4f5090b4eb16f25aababdcc5a54e1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>sort_sampled_edgelist</name>
        <qualifiedname>cugraph::sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="411" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="411" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sampling__post__processing__sg_8cu_1a2781df8ef5eefea9d012c918456b8bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::sort_sampled_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_hops, std::optional&lt; raft::device_span&lt; size_t const &gt; &gt; edgelist_label_offsets, size_t num_labels, size_t num_hops, bool src_is_major, bool do_expensive_check)</argsstring>
        <name>sort_sampled_edgelist</name>
        <qualifiedname>cugraph::sort_sampled_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_hops</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; size_t const &gt; &gt;</type>
          <declname>edgelist_label_offsets</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>src_is_major</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" line="430" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/sampling_post_processing_sg.cu" declline="430" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__impl_8hpp_1ab9ee68c58748392a915c3a92fa419259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename edge_type_t</type>
          </param>
          <param>
            <type>typename label_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; label_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; label_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; edge_t, edge_t const  * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; edge_t, edge_type_t const  * &gt; &gt; edge_type_view, raft::device_span&lt; vertex_t const  &gt; starting_vertices, std::optional&lt; raft::device_span&lt; label_t const  &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; label_t const  &gt;, raft::device_span&lt; int32_t const  &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const  &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement=true, prior_sources_behavior_t prior_sources_behavior=prior_sources_behavior_t::DEFAULT, bool dedupe_sources=false, bool do_expensive_check=false)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, edge_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, edge_type_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; label_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; label_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
          <defval>prior_sources_behavior_t::DEFAULT</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Uniform Neighborhood Sampling. </para>
        </briefdescription>
        <detaileddescription>
<para>This function traverses from a set of starting vertices, traversing outgoing edges and randomly selects from these outgoing neighbors to extract a subgraph.</para>
<para>Output from this function is a tuple of vectors (src, dst, weight, edge_id, edge_type, hop, label, offsets), identifying the randomly selected edges. src is the source vertex, dst is the destination vertex, weight (optional) is the edge weight, edge_id (optional) identifies the edge id, edge_type (optional) identifies the edge type, hop identifies which hop the edge was encountered in. The label output (optional) identifes the vertex label. The offsets array (optional) will be described below and is dependent upon the input parameters.</para>
<para>If <computeroutput>starting_vertex_labels</computeroutput> is not specified then no organization is applied to the output, the label and offsets values in the return set will be std::nullopt.</para>
<para>If <computeroutput>starting_vertex_labels</computeroutput> is specified and <computeroutput>label_to_output_comm_rank</computeroutput> is not specified then the label output has values. This will also result in the output being sorted by vertex label. The offsets array in the return will be a CSR-style offsets array to identify the beginning of each label range in the data. <computeroutput>labels.size() == (offsets.size() - 1)</computeroutput>.</para>
<para>If <computeroutput>starting_vertex_labels</computeroutput> is specified and <computeroutput>label_to_output_comm_rank</computeroutput> is specified then the label output has values. This will also result in the output being sorted by vertex label. The offsets array in the return will be a CSR-style offsets array to identify the beginning of each label range in the data. <computeroutput>labels.size() == (offsets.size() - 1)</computeroutput>. Additionally, the data will be shuffled so that all data with a particular label will be on the specified rank.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_type_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge type. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of label. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether sources (if false) or destinations (if true) are major indices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph View object to generate NBR Sampling on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_id_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge ids for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_type_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge types for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>starting_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Device span of starting vertex IDs for the sampling. In a multi-gpu context the starting vertices should be local to this GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>starting_vertex_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional device span of labels associted with each starting vertex for the sampling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_to_output_comm_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional tuple of device spans mapping label to a particular output rank. Element 0 of the tuple identifes the label, Element 1 of the tuple identifies the output rank. The label span must be sorted in ascending order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fan_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Host span defining branching out (fan-out) degree per source vertex for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>A pre-initialized raft::RngState object for generating random numbers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_hops</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean flag specifying if the hop information should be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prior_sources_behavior</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum type defining how to handle prior sources, (defaults to DEFAULT) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dedupe_sources</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean flag, if true then if a vertex v appears as a destination in hop X multiple times with the same label, it will only be passed once (for each label) as a source for the next hop. Default is false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_replacement</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean flag specifying if random sampling is done with replacement (true); or, without replacement (false); default = true; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple device vectors (vertex_t source_vertex, vertex_t destination_vertex, optional weight_t weight, optional edge_t edge id, optional edge_type_t edge type, optional int32_t hop, optional label_t label, optional size_t offsets) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_impl.hpp" line="338" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_impl.hpp" bodystart="338" bodyend="373" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1966" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__mg_8cpp_1afa9471b516db96f2fcc8b4e4a9f1a723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int32_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" line="31" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" declline="31" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__mg_8cpp_1a8ef6bb4372e038a437e760e9890406f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int32_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" line="57" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" declline="57" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__mg_8cpp_1a31c51134ae96d5841540c55ea41d2523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int64_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" line="83" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" declline="83" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__mg_8cpp_1a0973e6d742196451f2339001dadca92e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int32_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" line="109" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" declline="109" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__mg_8cpp_1a2b41806211fa0f7c54cd78532cc3a4f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int32_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" line="135" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" declline="135" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__mg_8cpp_1a1507d76c8a917e52af30a555ba674ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int64_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" line="161" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_mg.cpp" declline="161" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__sg_8cpp_1a896649b8972cdfcad70631897680d313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int32_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" line="31" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" declline="31" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__sg_8cpp_1a434cd1f6ad8de76383058a1f90900947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int32_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" line="57" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" declline="57" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__sg_8cpp_1a489a6b269f830ec6d228bccda6e9e706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int64_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" line="83" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" declline="83" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__sg_8cpp_1a7a4525849b952286e94059adcf50487e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int32_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" line="109" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" declline="109" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__sg_8cpp_1a306c352420656e77f6ff4a6b099def5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int32_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" line="135" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" declline="135" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="uniform__neighbor__sampling__sg_8cpp_1a0aed9876db89a21b9447832efb4174c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; size_t &gt; &gt; &gt; cugraph::uniform_neighbor_sample</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, raft::device_span&lt; int64_t const &gt; starting_vertices, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; starting_vertex_labels, std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt; label_to_output_comm_rank, raft::host_span&lt; int32_t const &gt; fan_out, raft::random::RngState &amp;rng_state, bool return_hops, bool with_replacement, prior_sources_behavior_t prior_sources_behavior, bool dedupe_sources, bool do_expensive_check)</argsstring>
        <name>uniform_neighbor_sample</name>
        <qualifiedname>cugraph::uniform_neighbor_sample</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>starting_vertices</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>starting_vertex_labels</declname>
        </param>
        <param>
          <type>std::optional&lt; std::tuple&lt; raft::device_span&lt; int32_t const &gt;, raft::device_span&lt; int32_t const &gt; &gt; &gt;</type>
          <declname>label_to_output_comm_rank</declname>
        </param>
        <param>
          <type>raft::host_span&lt; int32_t const &gt;</type>
          <declname>fan_out</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_hops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>prior_sources_behavior_t</type>
          <declname>prior_sources_behavior</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dedupe_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" line="161" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/sampling/uniform_neighbor_sampling_sg.cpp" declline="161" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__impl_8cuh_1a027c07ca1d61ed82de858ee4f8df554a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; graph_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, vertex_t const  *labels, bool renumber, bool do_expensive_check=false)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute the coarsened graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Aggregates the vertices with the same label to a new vertex in the output coarsened graph. Multi-edges in the coarsened graph are collapsed to a single edge with its weight equal to the sum of multi-edge weights.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object of the input graph to be coarsened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex labels (assigned to this process in multi-GPU) to be used in coarsening. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to renumber vertices or not (must be true if <computeroutput>multi_gpu</computeroutput> is true). Setting <computeroutput>renumber</computeroutput> to false is highly discouraged except for testing as this negatively affects the performance and memory footprint. If <computeroutput>renumber</computeroutput> is set to true, <computeroutput>labels</computeroutput> should have only non-negative integers and the number of vertices is assumed to be the maximum element in <computeroutput>labels</computeroutput> (reduced over the entire set of GPUs in multi-GPU) + 1. This may produce many isolated vertices if the number of unique elements (over the entire set of GPUs in multi-GPU) in <computeroutput>labels</computeroutput> is much smaller than the assumed number of vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of the coarsened graph, coarsened graph edge weights (if <computeroutput>edge_weight_view.has_value()</computeroutput> is true) and the renumber map (if <computeroutput>renumber</computeroutput> is true). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_impl.cuh" line="751" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_impl.cuh" bodystart="751" bodyend="760" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="581" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1a2493b918c8764f1b8151735755536fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1aa60ce31b8ee2a89cae71e405c883e94b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="37" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1a11f8b87e36bb951169742f24e18a9528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="48" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1a2d8f9bb105a630b45acfa1ce5551fd85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="59" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1ad18bf38b7118ead89143d28945b75034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int64_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="70" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1a98fd2a7135c211037a49db3992c4b152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int64_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="81" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1aecae01a34e474048599c51b5a4a4b400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="92" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1af83da33c80f9571ef487b3b45e9b178f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="103" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1a2a3df25ce1617cda4f5054b738cb206f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="114" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="114" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1a68135b62d0221d43152d9c16f3ea434c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="125" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="125" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1aca2eca4d05f619a6efe85edf55dfd99d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int64_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="136" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="136" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__mg_8cu_1ae8567c0e713c248c681e8e8ddda14e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int64_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" line="147" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_mg.cu" declline="147" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1ada781c11292904313e8983e5ab8dc3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1a4cf85f9b44292ffa55a25dcd91b17243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="37" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1a30b614a625bbfc9b3b20fd171b766aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="48" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1a9779b1fee6d2d3d5edce311b924e21a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="59" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1a34c4ed55f3eeca49f495079d9efa3066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int64_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="70" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1ae28520d119fd6335ba474c4ee0164bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, int64_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="81" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1ae6849a4ad976c02b859b3e2c948945be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="92" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1acb1f8fb6c7f36545d3dce7b952f34065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="103" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1a3da5642a235e0a3fec802b3b7d304f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="114" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="114" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1aef854c56b61cd473b3ffc164a822ad06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int32_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="125" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="125" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1a62c8da12ab0d3da3897ea6c25389a736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int64_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="136" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="136" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="coarsen__graph__sg_8cu_1a32f8c22f0f2653d783ab051d042b26b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::coarsen_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, int64_t const *labels, bool renumber, bool do_expensive_check)</argsstring>
        <name>coarsen_graph</name>
        <qualifiedname>cugraph::coarsen_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" line="147" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/coarsen_graph_sg.cu" declline="147" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__impl_8cuh_1a7214aad1beb04bfa73a00f5577f7774e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename edge_id_t</type>
          </param>
          <param>
            <type>typename edge_type_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, edge_id_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; cugraph::graph_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, edge_id_t &gt; &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;vertices, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist</name>
        <qualifiedname>cugraph::create_graph_from_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a graph from (the optional vertex list and) the given edge list (with optional edge IDs and types). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weight. Needs to be floating point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_id_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge id. Needs to be an integral type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_type_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge type. Needs to be an integral type, currently only int32_t is supported </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>If valid, part of the entire set of vertices in the graph to be renumbered. This parameter can be used to include isolated vertices. If <computeroutput>renumber</computeroutput> is false and <computeroutput>vertices</computeroutput> is valid, <computeroutput>vertices</computeroutput> elements should be consecutive integers starting from 0. If multi-GPU, applying the compute_gpu_id_from_vertex_t to every vertex should return the local GPU ID for this function to work (vertices should be pre-shuffled). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_srcs</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge source vertex IDs. If multi-GPU, applying the compute_gpu_id_from_ext_edge_endpoints_t to every edge should return the local GPU ID for this function to work (edges should be pre-shuffled). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_dsts</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge destination vertex IDs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of weight values for edges </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_edge_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge_id values for edges </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_edge_types</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge_type values for edges </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Properties of the graph represented by the input (optional vertex list and) edge list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to renumber vertices or not (must be true if <computeroutput>multi_gpu</computeroutput> is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of the generated graph and optional <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref> objects storing the provided edge properties and a renumber map (if <computeroutput>renumber</computeroutput> is true). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_impl.cuh" line="1171" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_impl.cuh" bodystart="1171" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1aabadb61e4342debf0de69d05b11fe7ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="22" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1aaccb743f3330427075cf9b85c1a68b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="43" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="43" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1a22071dc858b21f3a4ef7eee1c1d040e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="64" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1ae942600bf8ecc178e1b138b9fedf3d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="85" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="85" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1a1d0a1d5a38c10031678e22c96357601f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, true &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="106" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="106" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1a9b048c6a24b52c8180a4e68686ca2e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, true &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="127" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="127" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1a7d578b0347beffbe2de1a741d421a61f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, true &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="148" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="148" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1a0c2bab425e638659865f72b0e609a8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, true &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="169" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="169" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1a3d181bfa75375fd5dabf1e9fb8cd98ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, true &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="190" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="190" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1adaa152df7295184a1691f5e4498c1fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, true &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="211" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="211" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1a27f24574f4fb1ff4c39926d01922fb58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, true &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="232" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="232" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__mg_8cu_1a9e6aefd37e80331428aa1895a1d323d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, true &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, true &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" line="253" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_mg.cu" declline="253" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1a32122538025d49e3fa08dd4f0d517cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="22" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1ae0fe93d25792695002d9631cc94f0f66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, float, int32_t, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="43" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="43" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1a58645d2e3bd2ee44df789fe8ff8d82f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="64" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1a6b6c05a7eaba9176371b7b53f7e06219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int32_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int32_t, double, int32_t, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="85" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="85" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1a763cd1378d8d3fe52f56bd495980a885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, false &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="106" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="106" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1a5ed40a9c62f9de16f05a5b69fb069dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, false &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, float, int64_t, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="127" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="127" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1ad1c37661c1bdb63b366b896de3df6e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, false &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="148" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="148" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1a99cbfc7fd9bebea2915597f09a3f97ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, false &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int32_t, int64_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int32_t, int64_t, double, int64_t, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="169" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="169" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1a9e0a9bb9c8ef55615ddd00a8675833aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, false &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="190" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="190" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1ac434ff049ab76cbb4fb821e579ac692d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, false &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, float, int64_t, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="211" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="211" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1a0c4818e33d707cfaf9751b31be9e5920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, false &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, false, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="232" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="232" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="create__graph__from__edgelist__sg_8cu_1a941410de6de4de10e0eae9d168eb2b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">cugraph::graph_t</ref>&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, int64_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">cugraph::edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">cugraph::graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; cugraph::graph_t&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, false &gt;, int64_t &gt; &gt;, std::optional&lt; cugraph::edge_property_t&lt; cugraph::graph_view_t&lt; int64_t, int64_t, true, false &gt;, int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;vertex_span, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check)</argsstring>
        <name>create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::create_graph_from_edgelist&lt; int64_t, int64_t, double, int64_t, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>vertex_span</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" line="253" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_sg.cu" declline="253" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__impl_8cuh_1af963566e3c2e3ac4bf6c08af6ffe9bee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename edge_type_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &gt; cugraph::decompress_to_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; edge_t, edge_t const  * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; edge_t, edge_type_t const  * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; vertex_t const  &gt; &gt; renumber_map, bool do_expensive_check=false)</argsstring>
        <name>decompress_to_edgelist</name>
        <qualifiedname>cugraph::decompress_to_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, edge_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, edge_type_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Construct the edge list from the graph view object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_type_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge types. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object of the graph to be decompressed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_id_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge ids for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_type_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge types for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber_map</parametername>
</parameternamelist>
<parameterdescription>
<para>If valid, return the renumbered edge list based on the provided <computeroutput>renumber_map</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of edge sources, destinations, (optional) edge weights (if <computeroutput>edge_weight_view.has_value()</computeroutput> is true) and (optional) edge ids (if <computeroutput>edge_id_view.has_value()</computeroutput> is true). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_impl.cuh" line="410" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_impl.cuh" bodystart="410" bodyend="431" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="376" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1a8eb5ff7e94e490f5a0a85e40564b8caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="22" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1a8b472854f1ab5ad5f3f40e1bc7d8a1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="36" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="36" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1a237523a7bbce8bdaca745ad29eae4b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="50" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1a39f1e463b2844431217ff731bb3d218f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="64" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1ad6d5fff540540f165262dd44d6913872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="78" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="78" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1af63b4139d698893d860f583f683a6709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="92" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1a0fb925b61f0cfac9c7cc603bedf6f2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="106" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="106" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1a4c7c4c94739431d684ae5ea641750976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="120" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="120" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1aeb78a0198e068b502146d4c165db0349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="134" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1a8aa94d82cac64a50e7d699828b63428a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="148" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="148" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1ab5e9944876b3df8d41c7fbcfa980558e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="162" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="162" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__mg_8cu_1a9dc1b684e2433798486f2b408d4ee280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" line="176" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_mg.cu" declline="176" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1a16c72433d69a22e4b7cb4e501131ab3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="22" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1a4ba7c5dca757ad37fb6b677d716ddb17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int32_t, float, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="36" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="36" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1a1b0cb9fa33653ee64433144a3ab41596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="50" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1a7ea0e03caf4328c6d8a6cc2be77ae739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int32_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int32_t, double, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="64" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1ae016d1c76926ce7e16236266974996e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="78" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="78" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1a78660df285978e0049d24c2d73e711ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int64_t, float, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="92" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1ab8c36125b8eb6d29b82c8aa9f4bc50ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="106" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="106" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1a42aa6989f15b151c6117a87ac430bfbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int32_t, int64_t, double, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="120" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="120" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1a0a99df9c180e2b182383e6cfb9ed0d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="134" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1acf976a260f34edb2b015d3d5ac7c4a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int64_t, int64_t, float, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="148" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="148" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1a8518f946734860573aab23f6abc224a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="162" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="162" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="decompress__to__edgelist__sg_8cu_1ac31efbdbe050727bed9907cca57618b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, std::optional&lt; edge_property_view_t&lt; int64_t, int64_t const * &gt; &gt; edge_id_view, std::optional&lt; edge_property_view_t&lt; int64_t, int32_t const * &gt; &gt; edge_type_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; renumber_map, bool do_expensive_check)</argsstring>
        <name>decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::decompress_to_edgelist&lt; int64_t, int64_t, double, int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int64_t const * &gt; &gt;</type>
          <declname>edge_id_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, int32_t const * &gt; &gt;</type>
          <declname>edge_type_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" line="176" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/decompress_to_edgelist_sg.cu" declline="176" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__impl_8cuh_1a941ad50a515fcb8bb61c4a628e837551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; weight_t &gt;</type>
        <definition>rmm::device_uvector&lt; weight_t &gt; cugraph::compute_in_weight_sums</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const  &amp;graph_view, edge_property_view_t&lt; edge_t, weight_t const  * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums</name>
        <qualifiedname>cugraph::compute_in_weight_sums</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
<para>Compute per-vertex incoming edge weight sums. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object of the input graph to compute per-vertex incoming edge weight sums. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>View object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Incoming edge weight sums for each vertex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_impl.cuh" line="88" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_impl.cuh" bodystart="88" bodyend="98" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="781" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__impl_8cuh_1a06bdd6bdadb2dea547bcacbddae7cf12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; weight_t &gt;</type>
        <definition>rmm::device_uvector&lt; weight_t &gt; cugraph::compute_out_weight_sums</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const  &amp;graph_view, edge_property_view_t&lt; edge_t, weight_t const  * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums</name>
        <qualifiedname>cugraph::compute_out_weight_sums</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
<para>Compute per-vertex outgoing edge weight sums. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object of the input graph to compute per-vertex outgoing edge weight sums. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>View object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Outgoing edge weight sums for each vertex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_impl.cuh" line="105" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_impl.cuh" bodystart="105" bodyend="115" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="808" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__impl_8cuh_1a5c4c338749c610c2e5da62c52d6872fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>weight_t</type>
        <definition>weight_t cugraph::compute_max_in_weight_sum</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const  &amp;graph_view, edge_property_view_t&lt; edge_t, weight_t const  * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
<para>Compute maximum per-vertex incoming edge weight sums. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object of the input graph to compute the maximum per-vertex incoming edge weight sums. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>View object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum per-vertex incoming edge weight sums. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_impl.cuh" line="122" column="10" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_impl.cuh" bodystart="122" bodyend="139" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="835" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__impl_8cuh_1af883281fc12276783303e228aec5fc22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>weight_t</type>
        <definition>weight_t cugraph::compute_max_out_weight_sum</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const  &amp;graph_view, edge_property_view_t&lt; edge_t, weight_t const  * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
<para>Compute maximum per-vertex outgoing edge weight sums. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object of the input graph to compute the maximum per-vertex outgoing edge weight sums. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>View object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum per-vertex outgoing edge weight sums. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_impl.cuh" line="146" column="10" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_impl.cuh" bodystart="146" bodyend="163" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="862" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__impl_8cuh_1a9f5701a85077add993924ea2ed043009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>weight_t</type>
        <definition>weight_t cugraph::compute_total_edge_weight</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const  &amp;graph_view, edge_property_view_t&lt; edge_t, weight_t const  * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight</name>
        <qualifiedname>cugraph::compute_total_edge_weight</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
<para>Sum the weights of the entire set of edges. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object of the input graph to sum the edge weights. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>View object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of the weights of the entire set of edges. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_impl.cuh" line="170" column="10" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_impl.cuh" bodystart="170" bodyend="183" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="888" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ab42f6d529b006b58b3fe8d74d54057ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int32_t, int32_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int32_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int32_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="24" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a73f86c249c96846c676a1ad7fffcfa74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int32_t, int32_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int32_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int32_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="29" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1acaf863845789c60b1249bf5f897f84e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int32_t, int32_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int32_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int32_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="34" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1abe65bba8c5a03baa53ba97f1f74eb867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int32_t, int32_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int32_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int32_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="39" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="39" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a8a17de5663ce86c26252d150d983de51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int32_t, int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="44" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ac77681d5a6cc1fc85022215b74ab71ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int32_t, int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="49" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a70d6eac9ed067ecd2e4b5269313c8e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int32_t, int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="54" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="54" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1afc0e127c9bbd387cd997a567c748d41f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int32_t, int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="59" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a9c825e233601f7f6bd7b2e79d788458c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int64_t, int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int64_t, int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int64_t, int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="64" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a6548d4abf1bd67cc7f17988e7df2d9bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int64_t, int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int64_t, int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int64_t, int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="69" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="69" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a57683ae451f2d943ec7f3d8a68bfae89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int64_t, int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int64_t, int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int64_t, int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="74" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a530638ba8d5477f017f1d2ad646e1ddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int64_t, int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int64_t, int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int64_t, int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="79" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="79" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a62b78c3c0c65f9ce3aa0a07e78f68565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int32_t, int32_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int32_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int32_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="86" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a654bdf0fa131e7a8da3ede67cd783388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int32_t, int32_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int32_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int32_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="91" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="91" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a2148dba88831830da1435ee223ec824b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int32_t, int32_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int32_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int32_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="96" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="96" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a0275072cd11babba1993415e71305fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int32_t, int32_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int32_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int32_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="101" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="101" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a617f26b462abf8bf81640f4dcf3a2b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int32_t, int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="106" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="106" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a14a5c65b8dbb06dda464401569efb74e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int32_t, int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="111" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="111" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a11cc9feae2dfb48f87a5631270fd74da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int32_t, int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="116" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="116" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1aa22392820d0b44ae0816ee474f90c33a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int32_t, int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="121" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="121" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ad0b0b8751c4c378a096e397045283d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int64_t, int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int64_t, int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int64_t, int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="126" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="126" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ae1f5333e81445d04d9d20d8f559b0056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int64_t, int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int64_t, int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int64_t, int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="131" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="131" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a9af1292b05c830d77de03c4298ccdfd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int64_t, int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int64_t, int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int64_t, int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="136" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="136" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a5beecb722adb4cdd71682c60300c3012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int64_t, int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int64_t, int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int64_t, int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="141" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="141" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a08bb67bfc54c55db3f6dff7f59cbf5e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int32_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="148" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="148" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a1067c0451d3f57479bf1933501659b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int32_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="153" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="153" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ae5bd77cc261f39f28295a4f212d94203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int32_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="158" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="158" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a034abf5e2dd0a45377feb50f1d6d4058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int32_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="163" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="163" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1af343a8b2274a8fd38c15bb8e03159941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="168" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="168" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1adb5a8c56a198fef4650a1929994fd2f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="173" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="173" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ab041adccc78c88c2397b38c40d592fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="178" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="178" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1aa19e7c9586e02673916753cd7bfc0a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="183" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="183" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a89761dc51a1c3f0b1fe8db8f8528b31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int64_t, int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="188" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="188" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ad3e26750905368d1a426b23310980f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int64_t, int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="193" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="193" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a16a9246e4d9a211794c70d0b10ea68e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int64_t, int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="198" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="198" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a2f28726e6dec197728b78e7aaf2b7741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int64_t, int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="203" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="203" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a3c0c5318f1d2558f83b890715f6713a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int32_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="210" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="210" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a667e42e0555c5c98f1eb5e3018f15043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int32_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="215" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="215" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a250804a6d05f86589a953d7916be5dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int32_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="220" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="220" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ac4f8b2bfa5228868f3bc0f9c97fbe1da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int32_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="225" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="225" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a9853bf6bb3a67df1773c68cb70d1687f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="230" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="230" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a610fa1f95a72e84abb42927d436b480a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="235" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="235" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1aa1c4230c17c4c424935472c1f702443c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="240" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="240" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a85f49d7e2c5f300c2ca32035105370f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="245" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="245" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ab3fe16233afeeee935d7bf358e597ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int64_t, int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="250" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="250" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a1b8f6f4e7b308400956053d6b6fc2eb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int64_t, int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="255" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="255" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a454db3ecf824b976ec9e84a07e01058f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int64_t, int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="260" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="260" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a75779978acfeb24e357eaea41df87723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int64_t, int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="265" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="265" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1afb97bf75a2c87a15b523ac7b7bf6af92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int32_t, int32_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int32_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int32_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="272" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="272" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ab20c78a9c407a6b5ab9becf2542a487a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int32_t, int32_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int32_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int32_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="277" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="277" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a4309c2516413c5611729b44ec5732517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int32_t, int32_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int32_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int32_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="282" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="282" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a1816997b5261b162f5f1345b269a36c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int32_t, int32_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int32_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int32_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="287" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="287" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ae828b34ba81c0f2d33ea10089f3949c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int32_t, int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="292" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="292" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1af6ce65221759576c1fd0ae8ea857c318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int32_t, int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="297" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="297" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a47c1f8ede35171a968702fd366e99285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int32_t, int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="302" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="302" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a05c4d8166ff9aba2b520ace39c2bcae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int32_t, int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="307" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="307" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a89d4cd8722ea011b80efde18e092a7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int64_t, int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int64_t, int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int64_t, int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="312" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="312" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a063e5cc521cc6b7024ed809044051a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int64_t, int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int64_t, int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int64_t, int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="317" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="317" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1a90c9ff3cfab22e3ff808de09b3232c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int64_t, int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int64_t, int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int64_t, int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="322" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="322" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__mg_8cu_1ae0908d8dc8ec300ddf91cae98f87becb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int64_t, int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int64_t, int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int64_t, int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" line="327" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_mg.cu" declline="327" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1ac9433260717bc1c1ad490c7c6fd2cd98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int32_t, int32_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int32_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int32_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="24" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1af25da8e816bf48daed9632a29a0f46f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int32_t, int32_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int32_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int32_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="29" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1ae66cd19aae33b2efd2d4728aa4a8929b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int32_t, int32_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int32_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int32_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="34" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a9ccb4e9e3a37639fad1ff85564c37891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int32_t, int32_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int32_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int32_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="39" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="39" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a1288031c6e7e4039e7c3a89e5708ea95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int32_t, int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="44" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1ad70e858a88758c41ad25a857221a616e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int32_t, int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="49" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1aa4ce51b129211d301199c847c31ac72d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int32_t, int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="54" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="54" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a8819ae093ff1e223c8dca5a95ebe1804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int32_t, int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int32_t, int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int32_t, int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="59" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a6bf4f04df5d2b85904d2d207066273e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int64_t, int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int64_t, int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int64_t, int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="64" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1acaa449827c5cadb82afefa2a430c14ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_in_weight_sums&lt; int64_t, int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int64_t, int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int64_t, int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="69" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="69" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1aed788a33b5622d56701f4270f6627926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int64_t, int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int64_t, int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int64_t, int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="74" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a99cd63ab33a8cd433b297eb009532cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_in_weight_sums&lt; int64_t, int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_in_weight_sums&lt; int64_t, int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_in_weight_sums&lt; int64_t, int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="79" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="79" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1ad57153b105bd4d5fd6233dc32c4dd5fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int32_t, int32_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int32_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int32_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="86" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a69b1e67dccd4d69df4b3e9ac5cb406f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int32_t, int32_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int32_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int32_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="91" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="91" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a34fcab3b5f12e3b639c78cd01af0764d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int32_t, int32_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int32_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int32_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="96" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="96" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1ad20a38525e169b968afda8078df9bf0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int32_t, int32_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int32_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int32_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="102" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="102" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1adede41262348d057109e5c9e9c434957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int32_t, int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="107" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="107" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1abaf03b000bbd905c73d1cb95765acad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int32_t, int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="112" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="112" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a30753f910c7e5fc1169cc964c154dc21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int32_t, int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="117" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="117" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1afcdfb4881be91d257c6ab7cc87f071c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int32_t, int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int32_t, int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int32_t, int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="123" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="123" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1ad89af956d6d7f5c4cb453990ab5cf33a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int64_t, int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int64_t, int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int64_t, int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="128" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="128" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1abaea94409a61085d96c43005ebb3446b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::compute_out_weight_sums&lt; int64_t, int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int64_t, int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int64_t, int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="133" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="133" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a19c322279073acdb7638836945b0ef04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int64_t, int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int64_t, int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int64_t, int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="138" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="138" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1af0c8e2111f0babf8353b0650ea848134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::compute_out_weight_sums&lt; int64_t, int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_out_weight_sums&lt; int64_t, int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_out_weight_sums&lt; int64_t, int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="144" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="144" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a09e421acc874876a064cacb2581b5e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int32_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="151" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="151" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1aa84ab269e1c5d44a66106d2ed22860c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int32_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="156" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="156" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a0b30c1a81f727d2456a268341bbf10ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int32_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="161" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="161" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1aed9efb1b1473e49319ca77f24bb00119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int32_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int32_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="166" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="166" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1aec2fad34235705f10b211f515d2b8c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="171" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="171" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1abc2c7036935de43e4aaee1792cb868ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="176" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="176" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1ad1b7f6620813d466ef57719bb6c1bf5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="181" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="181" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1aa81681f697fe5ed8a5fa28caaa99e6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int32_t, int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int32_t, int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="186" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="186" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1aaa2f1f5004c39068d2b3a872b559bd19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int64_t, int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="191" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="191" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1aad6043a64b6bc830f457c52e94133176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int64_t, int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="196" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="196" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a50e00079cedcc7bf5d8ce97f8f17153e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int64_t, int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="201" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="201" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1af53f77d7e31413b0939510401a7dfed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_in_weight_sum&lt; int64_t, int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_in_weight_sum&lt; int64_t, int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="206" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="206" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1aa8fa4738a2c5059e4dd2c548d9f23169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int32_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="213" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="213" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a1600f218c65211b010b57adfff2cff0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int32_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="218" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="218" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a4c6e3d790bfdc07c6f5a6ea8c433ad69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int32_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="223" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="223" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1ab783bdfb1d27e9a420e9f473039bfa0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int32_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int32_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="228" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="228" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a173b1c12272d0bb85f87a477be9a847f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="233" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="233" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a2f49309293641ca47c17b62bd42ae7d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="238" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="238" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a12dddd0bc7624ee9f839296de174a28d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="243" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="243" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1aa49ea0283f41b4a31f9a924b796c237d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int32_t, int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int32_t, int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="248" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="248" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a3b86fb0ffdc6ad99a895e5f6457b2907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int64_t, int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="253" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="253" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1af56e521b12e91b98edf9fe86a7f66bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int64_t, int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="258" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="258" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1af719027ca7be8fa9b4958e0e85ca4096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int64_t, int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="263" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="263" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a6c91c919596db9cd3184d604738aceb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_max_out_weight_sum&lt; int64_t, int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_max_out_weight_sum&lt; int64_t, int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="268" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="268" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1adcd720050677424e8460b0dc5b3f2984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int32_t, int32_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int32_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int32_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="275" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="275" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1afaef84981d8778b3a51e961d654bb71a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int32_t, int32_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int32_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int32_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="280" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="280" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a06af80e7cc63c421cd3e991e06f6a6a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int32_t, int32_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int32_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int32_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="285" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="285" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a30a1e053eaecd2a1b9f63b1795dda876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int32_t, int32_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int32_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int32_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="290" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="290" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1ac7090c4de961146a59db9bc253d22b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int32_t, int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="295" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="295" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1ac95bcc3ea170202c51e5f1417fd1e8a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int32_t, int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="300" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="300" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a97b33492b47227ffdbb2342ec0aab95e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int32_t, int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="305" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="305" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a33fa41704e0e862e3e52d15c514c5bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int32_t, int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int32_t, int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int32_t, int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="310" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="310" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a31bed3c6b255e4e71ffff8b9deb89ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int64_t, int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int64_t, int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int64_t, int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="315" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="315" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a28eef37f5384b48542b571888a4f43d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float cugraph::compute_total_edge_weight&lt; int64_t, int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int64_t, int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int64_t, int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="320" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="320" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a5739b7a64a7accfd115b7b14bb1baa1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int64_t, int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int64_t, int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int64_t, int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="325" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="325" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="graph__weight__utils__sg_8cu_1a7a05de9389dead190704401cfb39fb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double cugraph::compute_total_edge_weight&lt; int64_t, int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view)</argsstring>
        <name>compute_total_edge_weight&lt; int64_t, int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::compute_total_edge_weight&lt; int64_t, int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" line="330" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/graph_weight_utils_sg.cu" declline="330" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__impl_8cuh_1a57f2a5cf438883215fb24ae8bcc99c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; edge_property_view_t&lt; edge_t, weight_t const  * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const  &gt; subgraph_offsets, raft::device_span&lt; vertex_t const  &gt; subgraph_vertices, bool do_expensive_check=false)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>extract induced subgraph(s). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object, we extract induced subgraphs from <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional view object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subgraph_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Span pointing to subgraph vertex offsets </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subgraph_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Span pointing to subgraph vertices. <computeroutput>subgraph_offsets</computeroutput> and <computeroutput>subgraph_vertices</computeroutput> provide vertex sets (or local vertex sets in multi-GPU) for <computeroutput>subgraph_offsets.size()</computeroutput> - 1 subgraphs to extract. For the i&apos;th subgraph to extract, one can extract the (local-)vertex set by accessing a subset of <computeroutput>subgraph_vertices</computeroutput>, where the range of the subset is [<computeroutput>subgraph_offsetes</computeroutput>[i], <computeroutput>subgraph_offsets</computeroutput>[i + 1]). In multi-GPU, the vertex set for each subgraph is distributed in multiple-GPUs and each GPU holds only the vertices that are local to the GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Quadraplet of edge major (destination if <computeroutput>store_transposed</computeroutput> is true, source otherwise) vertices, edge minor (source if <computeroutput>store_transposed</computeroutput> is true, destination otherwise) vertices, edge weights (if <computeroutput>edge_weight_view.has_value()</computeroutput> is true), and edge offsets for each induced subgraphs (size == num_subgraphs + 1). The sizes of the edge major &amp; minor vertices are edge_offsets[num_subgraphs]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_impl.cuh" line="122" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_impl.cuh" bodystart="122" bodyend="306" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="659" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__mg_8cu_1aa19fc6d61a6738b759b1d55c8f7121e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int32_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__mg_8cu_1a4eb020e376bbeec0a99f413de2dfb0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int32_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" line="38" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__mg_8cu_1a29a96346bee41ddc73026a7a0fe7b036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int32_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" line="50" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__mg_8cu_1a45e05e87b4c0507764494e6e0ce1e412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int32_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" line="62" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__mg_8cu_1a7cb2a35bb64682a79df01f9bb3d2b6f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int64_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" line="74" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__mg_8cu_1a8e3bca10cf1bdd5e37c00e7bcd114fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int64_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" line="86" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_mg.cu" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__sg_8cu_1a6a5b68fcbf80b119cf8b7d51d4058111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int32_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__sg_8cu_1a9b8dfb26693d30cddf6dc016b49671bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int32_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int32_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" line="38" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__sg_8cu_1a97f59a855b8da53023d472842eec0f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int32_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" line="50" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__sg_8cu_1a04cc936e2b133ae4c38204045b635796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int32_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" line="62" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__sg_8cu_1a8709014ba4967bc374db40a1bf734066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, float const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int64_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" line="74" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="induced__subgraph__sg_8cu_1ab436758c9e2e4c7ccc3843ec4ade45d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::extract_induced_subgraphs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; edge_property_view_t&lt; int64_t, double const * &gt; &gt; edge_weight_view, raft::device_span&lt; size_t const &gt; subgraph_offsets, raft::device_span&lt; int64_t const &gt; subgraph_vertices, bool do_expensive_check)</argsstring>
        <name>extract_induced_subgraphs</name>
        <qualifiedname>cugraph::extract_induced_subgraphs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt; &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; size_t const &gt;</type>
          <declname>subgraph_offsets</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>subgraph_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" line="86" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/induced_subgraph_sg.cu" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="relabel__impl_8cuh_1a7e8d4a7f63d0e7e3a9b17f81acc09403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::relabel</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::tuple&lt; vertex_t const  *, vertex_t const  * &gt; old_new_label_pairs, vertex_t num_label_pairs, vertex_t *labels, vertex_t num_labels, bool skip_missing_labels, bool do_expensive_check=false)</argsstring>
        <name>relabel</name>
        <qualifiedname>cugraph::relabel</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::tuple&lt; vertex_t const *, vertex_t const * &gt;</type>
          <declname>old_new_label_pairs</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>num_label_pairs</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_missing_labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Relabel old labels to new labels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_new_label_pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pairs of an old label and the corresponding new label (each process holds only part of the entire old labels and the corresponding new labels; partitioning can be arbitrary). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_label_pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of (old, new) label pairs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Labels to be relabeled. This initially holds old labels. Old labels are updated to new labels in-place ([INOUT] parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of labels to be relabeled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip_missing_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag dictating the behavior on missing labels (<computeroutput>labels</computeroutput> contains old labels missing in <computeroutput>old_new_label_pairs</computeroutput>). If set to true, missing elements are skipped (not relabeled). If set to false, undefined behavior (if <computeroutput>do_expensive_check</computeroutput> is set to true, this function will throw an exception). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rmm::device_uvector&lt;vertex_t&gt; New labels corresponding to the <computeroutput>old_labels</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/relabel_impl.cuh" line="54" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/relabel_impl.cuh" bodystart="54" bodyend="217" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="611" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="relabel__mg_8cu_1a2aecb806b46bdbea8eb862e2922b0772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::relabel&lt; int32_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::tuple&lt; int32_t const *, int32_t const * &gt; old_new_label_pairs, int32_t num_label_pairs, int32_t *labels, int32_t num_labels, bool skip_missing_labels, bool do_expensive_check)</argsstring>
        <name>relabel&lt; int32_t, true &gt;</name>
        <qualifiedname>cugraph::relabel&lt; int32_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::tuple&lt; int32_t const *, int32_t const * &gt;</type>
          <declname>old_new_label_pairs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_label_pairs</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_missing_labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/relabel_mg.cu" line="23" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/relabel_mg.cu" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="relabel__mg_8cu_1ae9add02a528d54c342ad5b0c60b0593f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::relabel&lt; int64_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::tuple&lt; int64_t const *, int64_t const * &gt; old_new_label_pairs, int64_t num_label_pairs, int64_t *labels, int64_t num_labels, bool skip_missing_labels, bool do_expensive_check)</argsstring>
        <name>relabel&lt; int64_t, true &gt;</name>
        <qualifiedname>cugraph::relabel&lt; int64_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::tuple&lt; int64_t const *, int64_t const * &gt;</type>
          <declname>old_new_label_pairs</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_label_pairs</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_missing_labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/relabel_mg.cu" line="31" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/relabel_mg.cu" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="relabel__sg_8cu_1a0439e0f1f329cfb152f168d3b7112af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::relabel&lt; int32_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::tuple&lt; int32_t const *, int32_t const * &gt; old_new_label_pairs, int32_t num_label_pairs, int32_t *labels, int32_t num_labels, bool skip_missing_labels, bool do_expensive_check)</argsstring>
        <name>relabel&lt; int32_t, false &gt;</name>
        <qualifiedname>cugraph::relabel&lt; int32_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::tuple&lt; int32_t const *, int32_t const * &gt;</type>
          <declname>old_new_label_pairs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_label_pairs</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_missing_labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/relabel_sg.cu" line="23" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/relabel_sg.cu" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="relabel__sg_8cu_1a7b7c0282426c8f1158125f6a27c2e99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::relabel&lt; int64_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::tuple&lt; int64_t const *, int64_t const * &gt; old_new_label_pairs, int64_t num_label_pairs, int64_t *labels, int64_t num_labels, bool skip_missing_labels, bool do_expensive_check)</argsstring>
        <name>relabel&lt; int64_t, false &gt;</name>
        <qualifiedname>cugraph::relabel&lt; int64_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::tuple&lt; int64_t const *, int64_t const * &gt;</type>
          <declname>old_new_label_pairs</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_label_pairs</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_missing_labels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/relabel_sg.cu" line="32" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/relabel_sg.cu" declline="32" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="remove__multi__edges_8cu_1ad12089d78a9a8a14a871fe47478b55ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_multi_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, bool keep_min_value_edge)</argsstring>
        <name>remove_multi_edges</name>
        <qualifiedname>cugraph::remove_multi_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_min_value_edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" line="25" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" declline="25" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__multi__edges_8cu_1a225ff0f6e3cc353093f9980de3736cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_multi_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, bool keep_min_value_edge)</argsstring>
        <name>remove_multi_edges</name>
        <qualifiedname>cugraph::remove_multi_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_min_value_edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" line="38" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__multi__edges_8cu_1a90b27e5c37ef565f88ac687d8e3ada4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_multi_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, bool keep_min_value_edge)</argsstring>
        <name>remove_multi_edges</name>
        <qualifiedname>cugraph::remove_multi_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_min_value_edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" line="51" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__multi__edges_8cu_1a655c4d8d784634d1465f2de7f4099348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_multi_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, bool keep_min_value_edge)</argsstring>
        <name>remove_multi_edges</name>
        <qualifiedname>cugraph::remove_multi_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_min_value_edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" line="64" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__multi__edges_8cu_1aa532327b9235b8458f86a0f7fd376157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_multi_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, bool keep_min_value_edge)</argsstring>
        <name>remove_multi_edges</name>
        <qualifiedname>cugraph::remove_multi_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_min_value_edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" line="77" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" declline="77" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__multi__edges_8cu_1ab4e6ac13179da641f1c199a783936d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_multi_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types, bool keep_min_value_edge)</argsstring>
        <name>remove_multi_edges</name>
        <qualifiedname>cugraph::remove_multi_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_min_value_edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" line="90" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges.cu" declline="90" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__multi__edges__impl_8cuh_1a054c8c10e539be7c1d0923a4c5b477cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename edge_type_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &gt; cugraph::remove_multi_edges</definition>
        <argsstring>(raft::handle_t const  &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;edgelist_edge_types, bool keep_min_value_edge=false)</argsstring>
        <name>remove_multi_edges</name>
        <qualifiedname>cugraph::remove_multi_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_min_value_edge</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Remove all but one edge when a multi-edge exists. </para>
        </briefdescription>
        <detaileddescription>
<para>When a multi-edge exists, one of the edges will remain. If <computeroutput>keep_min_value_edge</computeroutput> is false, an arbitrary edge will be selected among the edges in the multi-edge. If <computeroutput>keep_min_value_edge</computeroutput> is true, the edge with the minimum value will be selected. The edge weights will be first compared (if <computeroutput>edgelist_weights.has_value()</computeroutput> is true); edge IDs will be compared next (if <computeroutput>edgelist_edge_ids.has_value()</computeroutput> is true); and edge types (if <computeroutput>edgelist_edge_types.has_value()</computeroutput> is true) will compared last.</para>
<para>In an MG context it is assumed that edges have been shuffled to the proper GPU, in which case any multi-edges will be on the same GPU.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weight. Currently float and double are supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_type_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge type. Needs to be an integral type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_srcs</parametername>
</parameternamelist>
<parameterdescription>
<para>List of source vertex ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_dsts</parametername>
</parameternamelist>
<parameterdescription>
<para>List of destination vertex ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of edge weights </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_edge_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of edge ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_edge_types</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of edge types </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keep_min_value_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to keep an arbitrary edge (false) or the minimum value edge (true) among the edges in a multi-edge. Relevant only if <computeroutput>edgelist_weights.has_value()</computeroutput> | <computeroutput>edgelist_edge_ids.has_value()</computeroutput> | <computeroutput>edgelist_edge_types.has_value()</computeroutput> is true. Setting this to true incurs performance overhead as this requires more comparisons. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of vectors storing edge sources, destinations, optional weights, optional edge ids, optional edge types. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges_impl.cuh" line="171" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_multi_edges_impl.cuh" bodystart="171" bodyend="326" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="1052" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__self__loops_8cu_1aeea1e726b84e2bdc51a64385cff8cb23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_self_loops</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types)</argsstring>
        <name>remove_self_loops</name>
        <qualifiedname>cugraph::remove_self_loops</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" line="25" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" declline="25" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__self__loops_8cu_1afa814a62774b4751e6ecfca2d5caff38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_self_loops</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types)</argsstring>
        <name>remove_self_loops</name>
        <qualifiedname>cugraph::remove_self_loops</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" line="37" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__self__loops_8cu_1ad5f185deb1cd2db12c3d7c25e79875c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_self_loops</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types)</argsstring>
        <name>remove_self_loops</name>
        <qualifiedname>cugraph::remove_self_loops</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" line="49" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__self__loops_8cu_1a7b4768085c41f8ccd35af3bd2b204d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_self_loops</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types)</argsstring>
        <name>remove_self_loops</name>
        <qualifiedname>cugraph::remove_self_loops</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" line="61" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" declline="61" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__self__loops_8cu_1a61477d422aa600cc90dbff11a4d104e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_self_loops</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types)</argsstring>
        <name>remove_self_loops</name>
        <qualifiedname>cugraph::remove_self_loops</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" line="73" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" declline="73" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__self__loops_8cu_1a8d3bb9b5beba8db906e86ed4a3f56f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::remove_self_loops</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edgelist_edge_types)</argsstring>
        <name>remove_self_loops</name>
        <qualifiedname>cugraph::remove_self_loops</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" line="85" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops.cu" declline="85" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="remove__self__loops__impl_8cuh_1aa896e8aca09380b382020ae639f55d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename edge_type_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &gt; cugraph::remove_self_loops</definition>
        <argsstring>(raft::handle_t const  &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;edgelist_edge_types)</argsstring>
        <name>remove_self_loops</name>
        <qualifiedname>cugraph::remove_self_loops</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <briefdescription>
<para>Remove self loops from an edge list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weight. Currently float and double are supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_type_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge type. Needs to be an integral type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_srcs</parametername>
</parameternamelist>
<parameterdescription>
<para>List of source vertex ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_dsts</parametername>
</parameternamelist>
<parameterdescription>
<para>List of destination vertex ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of edge weights </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_edge_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of edge ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_edge_types</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of edge types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of vectors storing edge sources, destinations, optional weights, optional edge ids, optional edge types. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops_impl.cuh" line="41" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/remove_self_loops_impl.cuh" bodystart="41" bodyend="93" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="1006" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__edgelist__impl_8cuh_1a2978c950d76183965fc744d68cc8972c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; multi_gpu, std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, <ref refid="structcugraph_1_1renumber__meta__t" kindref="compound">renumber_meta_t</ref>&lt; vertex_t, edge_t, multi_gpu &gt; &gt; &gt;</type>
        <definition>std::enable_if_t&lt; multi_gpu, std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, renumber_meta_t&lt; vertex_t, edge_t, multi_gpu &gt; &gt; &gt; cugraph::renumber_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;local_vertices, std::vector&lt; vertex_t * &gt; const  &amp;edgelist_srcs, std::vector&lt; vertex_t * &gt; const  &amp;edgelist_dsts, std::vector&lt; edge_t &gt; const  &amp;edgelist_edge_counts, std::optional&lt; std::vector&lt; std::vector&lt; edge_t &gt; &gt; &gt; const  &amp;edgelist_intra_partition_segment_offsets, bool store_transposed, bool do_expensive_check=false)</argsstring>
        <name>renumber_edgelist</name>
        <qualifiedname>cugraph::renumber_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;</type>
          <declname>local_vertices</declname>
        </param>
        <param>
          <type>std::vector&lt; vertex_t * &gt; const &amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>std::vector&lt; vertex_t * &gt; const &amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::vector&lt; edge_t &gt; const &amp;</type>
          <declname>edgelist_edge_counts</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; std::vector&lt; edge_t &gt; &gt; &gt; const &amp;</type>
          <declname>edgelist_intra_partition_segment_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>store_transposed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>renumber edgelist (multi-GPU) </para>
        </briefdescription>
        <detaileddescription>
<para>This function assumes that vertices are pre-shuffled to their target processes and edges are pre-shuffled to their target processess and edge partitions using compute_gpu_id_from_vertex_t and compute_gpu_id_from_ext_edge_endpoints_t &amp; compute_partition_id_from_ext_edge_endpoints_t functors, respectively.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>If valid, part of the entire set of vertices in the graph to be renumbered. This parameter can be used to include isolated vertices. Applying the compute_gpu_id_from_vertex_t to every vertex should return the local GPU ID for this function to work (vertices should be pre-shuffled). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_srcs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointers (one pointer per local edge partition assigned to this process) to edge source vertex IDs. Source IDs are updated in-place ([INOUT] parameter). Applying the compute_gpu_id_from_ext_edge_endpoints_t functor to every (destination ID, source ID) pair (if store_transposed = true) or (source ID, destination ID) pair (if store_transposed = false) should return the local GPU ID for this function to work (edges should be pre-shuffled). Applying the compute_partition_id_from_ext_edge_endpoints_t to every (destination ID, source ID) pair (if store_transposed = true) or (source ID, destination ID) pair (if store_transposed = false) should also return the corresponding edge partition ID. The best way to enforce this is to use shuffle_ext_vertex_pairs_to_local_gpu_by_edge_partitioning &amp; groupby_and_count_edgelist_by_local_partition_id. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_dsts</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointers (one pointer per local edge partition assigned to this process) to edge destination vertex IDs. Destination IDs are updated in-place ([INOUT] parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_edge_counts</parametername>
</parameternamelist>
<parameterdescription>
<para>Edge counts (one count per local edge partition assigned to this process). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_intra_partition_segment_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>If valid, store segment offsets within a local edge partition; a local edge partition can be further segmented by applying the compute_gpu_id_from_vertex_t function to edge minor vertex IDs. This optinoal information is used for further memory footprint optimization if provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Should be true if renumbered edges will be used to create a graph with store_transposed = true. Should be false if the edges will be used to create a graph with store_transposed = false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, renumber_meta_t&lt;vertex_t, edge_t, multi_gpu&gt;&gt; Tuple of labels (vertex IDs before renumbering) for the entire set of vertices (assigned to this process in multi-GPU) and meta-data collected while renumbering. The meta-data includes total number of vertices, total number of edges, <ref refid="classcugraph_1_1partition__t" kindref="compound">partition_t</ref> object storing graph partitioning information, vertex partition segment offsets (a vertex partition is partitioned to multiple segments based on vertex degrees), and the number of local unique edge major &amp; minor vertex IDs. This meta-data is expected to be used in graph construction &amp; graph primitives. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_impl.cuh" line="826" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_impl.cuh" bodystart="826" bodyend="1054" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__edgelist__impl_8cuh_1a1433186c5d48e9dd94da289b927c75f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; !multi_gpu, std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, <ref refid="structcugraph_1_1renumber__meta__t" kindref="compound">renumber_meta_t</ref>&lt; vertex_t, edge_t, multi_gpu &gt; &gt; &gt;</type>
        <definition>std::enable_if_t&lt; !multi_gpu, std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, renumber_meta_t&lt; vertex_t, edge_t, multi_gpu &gt; &gt; &gt; cugraph::renumber_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;vertices, vertex_t *edgelist_srcs, vertex_t *edgelist_dsts, edge_t num_edgelist_edges, bool store_transposed, bool do_expensive_check=false)</argsstring>
        <name>renumber_edgelist</name>
        <qualifiedname>cugraph::renumber_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>edge_t</type>
          <declname>num_edgelist_edges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>store_transposed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>renumber edgelist (single-GPU) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>If valid, vertices in the graph to be renumbered. This parameter can be used to include isolated vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_srcs</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to edge source vertex IDs. Source IDs are updated in-place ([INOUT] parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_dsts</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to edge destination vertex IDs. Destination IDs are updated in-place ([INOUT] parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_edgelist_edges</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of edges in the edgelist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Should be true if renumbered edges will be used to create a graph with store_transposed = true. Should be false if the edges will be used to create a graph with store_transposed = false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, renumber_meta_t&lt;vertex_t, edge_t, multi_gpu&gt;&gt; Tuple of labels (vertex IDs before renumbering) for the entire set of vertices and meta-data collected while renumbering. The meta-data includes vertex partition segment offsets (a vertex partition is partitioned to multiple segments based on vertex degrees). This meta-data is expected to be used in graph construction &amp; graph primitives. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_impl.cuh" line="1060" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_impl.cuh" bodystart="1060" bodyend="1104" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__edgelist__mg_8cu_1ac913071304bd1f595d78456471ef099f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, <ref refid="structcugraph_1_1renumber__meta__t" kindref="compound">renumber_meta_t</ref>&lt; int32_t, int32_t, true &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, renumber_meta_t&lt; int32_t, int32_t, true &gt; &gt; cugraph::renumber_edgelist&lt; int32_t, int32_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;local_vertices, std::vector&lt; int32_t * &gt; const &amp;edgelist_srcs, std::vector&lt; int32_t * &gt; const &amp;edgelist_dsts, std::vector&lt; int32_t &gt; const &amp;edgelist_edge_counts, std::optional&lt; std::vector&lt; std::vector&lt; int32_t &gt; &gt; &gt; const &amp;edgelist_intra_partition_segment_offsets, bool store_transposed, bool do_expensive_check)</argsstring>
        <name>renumber_edgelist&lt; int32_t, int32_t, true &gt;</name>
        <qualifiedname>cugraph::renumber_edgelist&lt; int32_t, int32_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>local_vertices</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t * &gt; const &amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t * &gt; const &amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t &gt; const &amp;</type>
          <declname>edgelist_edge_counts</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; std::vector&lt; int32_t &gt; &gt; &gt; const &amp;</type>
          <declname>edgelist_intra_partition_segment_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>store_transposed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_mg.cu" line="22" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_mg.cu" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__edgelist__mg_8cu_1ab3affb2135b04a259255c368662956db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, <ref refid="structcugraph_1_1renumber__meta__t" kindref="compound">renumber_meta_t</ref>&lt; int32_t, int64_t, true &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, renumber_meta_t&lt; int32_t, int64_t, true &gt; &gt; cugraph::renumber_edgelist&lt; int32_t, int64_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;local_vertices, std::vector&lt; int32_t * &gt; const &amp;edgelist_srcs, std::vector&lt; int32_t * &gt; const &amp;edgelist_dsts, std::vector&lt; int64_t &gt; const &amp;edgelist_edge_counts, std::optional&lt; std::vector&lt; std::vector&lt; int64_t &gt; &gt; &gt; const &amp;edgelist_intra_partition_segment_offsets, bool store_transposed, bool do_expensive_check)</argsstring>
        <name>renumber_edgelist&lt; int32_t, int64_t, true &gt;</name>
        <qualifiedname>cugraph::renumber_edgelist&lt; int32_t, int64_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>local_vertices</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t * &gt; const &amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t * &gt; const &amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const &amp;</type>
          <declname>edgelist_edge_counts</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; std::vector&lt; int64_t &gt; &gt; &gt; const &amp;</type>
          <declname>edgelist_intra_partition_segment_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>store_transposed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_mg.cu" line="33" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_mg.cu" declline="33" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__edgelist__mg_8cu_1ac6099088f7c09c523c44974e197b3417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, <ref refid="structcugraph_1_1renumber__meta__t" kindref="compound">renumber_meta_t</ref>&lt; int64_t, int64_t, true &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, renumber_meta_t&lt; int64_t, int64_t, true &gt; &gt; cugraph::renumber_edgelist&lt; int64_t, int64_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;local_vertices, std::vector&lt; int64_t * &gt; const &amp;edgelist_srcs, std::vector&lt; int64_t * &gt; const &amp;edgelist_dsts, std::vector&lt; int64_t &gt; const &amp;edgelist_edge_counts, std::optional&lt; std::vector&lt; std::vector&lt; int64_t &gt; &gt; &gt; const &amp;edgelist_intra_partition_segment_offsets, bool store_transposed, bool do_expensive_check)</argsstring>
        <name>renumber_edgelist&lt; int64_t, int64_t, true &gt;</name>
        <qualifiedname>cugraph::renumber_edgelist&lt; int64_t, int64_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>local_vertices</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t * &gt; const &amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t * &gt; const &amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const &amp;</type>
          <declname>edgelist_edge_counts</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; std::vector&lt; int64_t &gt; &gt; &gt; const &amp;</type>
          <declname>edgelist_intra_partition_segment_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>store_transposed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_mg.cu" line="44" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_mg.cu" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__edgelist__sg_8cu_1a666cb159df6e378be82ee3ba489af3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, <ref refid="structcugraph_1_1renumber__meta__t" kindref="compound">renumber_meta_t</ref>&lt; int32_t, int32_t, false &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, renumber_meta_t&lt; int32_t, int32_t, false &gt; &gt; cugraph::renumber_edgelist&lt; int32_t, int32_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertices, int32_t *edgelist_srcs, int32_t *edgelist_dsts, int32_t num_edgelist_edges, bool store_transposed, bool do_expensive_check)</argsstring>
        <name>renumber_edgelist&lt; int32_t, int32_t, false &gt;</name>
        <qualifiedname>cugraph::renumber_edgelist&lt; int32_t, int32_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_edgelist_edges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>store_transposed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_sg.cu" line="22" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_sg.cu" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__edgelist__sg_8cu_1a7426213c0da0d50669309cdd1201c01c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, <ref refid="structcugraph_1_1renumber__meta__t" kindref="compound">renumber_meta_t</ref>&lt; int32_t, int64_t, false &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, renumber_meta_t&lt; int32_t, int64_t, false &gt; &gt; cugraph::renumber_edgelist&lt; int32_t, int64_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;vertices, int32_t *edgelist_srcs, int32_t *edgelist_dsts, int64_t num_edgelist_edges, bool store_transposed, bool do_expensive_check)</argsstring>
        <name>renumber_edgelist&lt; int32_t, int64_t, false &gt;</name>
        <qualifiedname>cugraph::renumber_edgelist&lt; int32_t, int64_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_edgelist_edges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>store_transposed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_sg.cu" line="31" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_sg.cu" declline="31" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__edgelist__sg_8cu_1ac91505e32e9640cde1082f5a66ce18b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, <ref refid="structcugraph_1_1renumber__meta__t" kindref="compound">renumber_meta_t</ref>&lt; int64_t, int64_t, false &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, renumber_meta_t&lt; int64_t, int64_t, false &gt; &gt; cugraph::renumber_edgelist&lt; int64_t, int64_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;vertices, int64_t *edgelist_srcs, int64_t *edgelist_dsts, int64_t num_edgelist_edges, bool store_transposed, bool do_expensive_check)</argsstring>
        <name>renumber_edgelist&lt; int64_t, int64_t, false &gt;</name>
        <qualifiedname>cugraph::renumber_edgelist&lt; int64_t, int64_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_edgelist_edges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>store_transposed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_sg.cu" line="40" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_edgelist_sg.cu" declline="40" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__impl_8cuh_1a431a64199aca6af92b8f9a5b62d0168f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::renumber_ext_vertices</definition>
        <argsstring>(raft::handle_t const  &amp;handle, vertex_t *vertices, size_t num_vertices, vertex_t const  *renumber_map_labels, vertex_t local_int_vertex_first, vertex_t local_int_vertex_last, bool do_expensive_check=false)</argsstring>
        <name>renumber_ext_vertices</name>
        <qualifiedname>cugraph::renumber_ext_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Renumber external vertices to internal vertices based on the provided <computeroutput>renumber_map_labels</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note cugraph::invalid_id&lt;vertex_t&gt;::value remains unchanged.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the vertices to be renumbered. The input external vertices are renumbered to internal vertices in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices to be renumbered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber_map_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the external vertices corresponding to the internal vertices in the range [<computeroutput>local_int_vertex_first</computeroutput>, <computeroutput>local_int_vertex_last</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_int_vertex_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first local internal vertex (inclusive, assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_int_vertex_last</parametername>
</parameternamelist>
<parameterdescription>
<para>The last local internal vertex (exclusive, assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" line="344" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" bodystart="344" bodyend="449" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="174" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__impl_8cuh_1a92774376fe8db9017e0dc07993c0a00d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::renumber_local_ext_vertices</definition>
        <argsstring>(raft::handle_t const  &amp;handle, vertex_t *vertices, size_t num_vertices, vertex_t const  *renumber_map_labels, vertex_t local_int_vertex_first, vertex_t local_int_vertex_last, bool do_expensive_check=false)</argsstring>
        <name>renumber_local_ext_vertices</name>
        <qualifiedname>cugraph::renumber_local_ext_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Renumber local external vertices to internal vertices based on the provided <computeroutput>renumber_map_labels</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note cugraph::invalid_id&lt;vertex_t&gt;::value remains unchanged.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the vertices to be renumbered. The input external vertices are renumbered to internal vertices in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices to be renumbered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber_map_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the external vertices corresponding to the internal vertices in the range [<computeroutput>local_int_vertex_first</computeroutput>, <computeroutput>local_int_vertex_last</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_int_vertex_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first local internal vertex (inclusive, assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_int_vertex_last</parametername>
</parameternamelist>
<parameterdescription>
<para>The last local internal vertex (exclusive, assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" line="452" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" bodystart="452" bodyend="502" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="334" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__impl_8cuh_1ab2d2829de3b33d7f394c8a1ff5169ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::unrenumber_local_int_vertices</definition>
        <argsstring>(raft::handle_t const  &amp;handle, vertex_t *vertices, size_t num_vertices, vertex_t const  *renumber_map_labels, vertex_t local_int_vertex_first, vertex_t local_int_vertex_last, bool do_expensive_check=false)</argsstring>
        <name>unrenumber_local_int_vertices</name>
        <qualifiedname>cugraph::unrenumber_local_int_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Unrenumber local internal vertices to external vertices based on the providied <computeroutput>renumber_map_labels</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note cugraph::invalid_id&lt;vertex_t&gt;::value remains unchanged.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the local internal vertices to be unrenumbered. Each input element should be in [<computeroutput>local_int_vertex_first</computeroutput>, <computeroutput>local_int_vertex_last</computeroutput>). The input internal vertices are renumbered to external vertices in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices to be unrenumbered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber_map_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the external vertices corresponding to the internal vertices in the range [<computeroutput>local_int_vertex_first</computeroutput>, <computeroutput>local_int_vertex_last</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_int_vertex_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first local internal vertex (inclusive, assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_int_vertex_last</parametername>
</parameternamelist>
<parameterdescription>
<para>The last local internal vertex (exclusive, assigned to this process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" line="505" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" bodystart="505" bodyend="536" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__impl_8cuh_1a684545dbb07a8981e1b6fcafaa369376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::unrenumber_int_vertices</definition>
        <argsstring>(raft::handle_t const  &amp;handle, vertex_t *vertices, size_t num_vertices, vertex_t const  *renumber_map_labels, std::vector&lt; vertex_t &gt; const  &amp;vertex_partition_range_lasts, bool do_expensive_check=false)</argsstring>
        <name>unrenumber_int_vertices</name>
        <qualifiedname>cugraph::unrenumber_int_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; vertex_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Unrenumber (possibly non-local) internal vertices to external vertices based on the providied <computeroutput>renumber_map_labels</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note cugraph::invalid_id&lt;vertex_t&gt;::value remains unchanged.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the internal vertices to be unrenumbered. The input internal vertices are renumbered to external vertices in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices to be unrenumbered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber_map_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the external vertices corresponding to the internal vertices in the range [<computeroutput>local_int_vertex_first</computeroutput>, <computeroutput>local_int_vertex_last</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_partition_range_lasts</parametername>
</parameternamelist>
<parameterdescription>
<para>Last local internal vertices (exclusive, assigned to each process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" line="539" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" bodystart="539" bodyend="622" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="234" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__impl_8cuh_1ab708a6bde84c6ee3499d72800ed44bf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; multi_gpu, void &gt;</type>
        <definition>std::enable_if_t&lt; multi_gpu, void &gt; cugraph::unrenumber_local_int_edges</definition>
        <argsstring>(raft::handle_t const  &amp;handle, std::vector&lt; vertex_t * &gt; const  &amp;edgelist_srcs, std::vector&lt; vertex_t * &gt; const  &amp;edgelist_dsts, std::vector&lt; size_t &gt; const  &amp;edgelist_edge_counts, vertex_t const  *renumber_map_labels, std::vector&lt; vertex_t &gt; const  &amp;vertex_partition_range_lasts, std::optional&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; const  &amp;edgelist_intra_partition_segment_offsets, bool do_expensive_check=false)</argsstring>
        <name>unrenumber_local_int_edges</name>
        <qualifiedname>cugraph::unrenumber_local_int_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; vertex_t * &gt; const &amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>std::vector&lt; vertex_t * &gt; const &amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>edgelist_edge_counts</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; vertex_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; const &amp;</type>
          <declname>edgelist_intra_partition_segment_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Unrenumber local edges&apos; internal source &amp; destination IDs to external IDs based on the provided <computeroutput>renumber_map_labels</computeroutput> (multi-GPU). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. @params edgelist_srcs Pointers (one pointer per local edge partition assigned to this process) to the local internal source vertex IDs to be unrenumbered. The input source vertex IDs are renumbered to external IDs in-place. @params edgelist_dsts Pointers (one pointer per local edge partition assigned to this process) to the local internal destination vertex IDs to be unrenumbered. The input destination vertex IDs are renumbered to external IDs in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_edge_counts</parametername>
</parameternamelist>
<parameterdescription>
<para>Edge counts (one count per local edge partition assigned to this process). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber_map_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the external vertices corresponding to the internal vertices in the range assigned to this process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_partition_range_lasts</parametername>
</parameternamelist>
<parameterdescription>
<para>Last local internal vertices (exclusive, assigned to each process in multi-GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_intra_partition_segment_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>If valid, store segment offsets within a local edge partition; a local edge partition can be further segmented by applying the compute_gpu_id_from_vertex_t function to edge minor vertex IDs. This optinoal information is used for further memory footprint optimization if provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" line="625" column="18" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" bodystart="625" bodyend="643" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="271" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__impl_8cuh_1ac18d945222b132c054d2bc748d144872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!multi_gpu, void &gt;</type>
        <definition>std::enable_if_t&lt;!multi_gpu, void &gt; cugraph::unrenumber_local_int_edges</definition>
        <argsstring>(raft::handle_t const  &amp;handle, vertex_t *edgelist_srcs, vertex_t *edgelist_dsts, size_t num_edgelist_edges, vertex_t const  *renumber_map_labels, vertex_t num_vertices, bool do_expensive_check=false)</argsstring>
        <name>unrenumber_local_int_edges</name>
        <qualifiedname>cugraph::unrenumber_local_int_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edgelist_edges</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Unrenumber local edges&apos; internal source &amp; destination IDs to external IDs based on the provided <computeroutput>renumber_map_labels</computeroutput> (single-GPU). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. @params edgelist_srcs Pointer to the local internal source vertex IDs to be unrenumbered. The input source vertex IDs are renumbered to external IDs in-place. @params edgelist_dsts Pointer to the local internal destination vertex IDs to be unrenumbered. The input destination vertex IDs are renumbered to external IDs in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_edgelist_edges</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of edges in the edge list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber_map_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the external vertices corresponding to the internal vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices to be unrenumbered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" line="646" column="18" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_impl.cuh" bodystart="646" bodyend="668" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="303" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__mg_8cu_1a5dd3dee8293c1467ff30339c62700464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::renumber_ext_vertices&lt; int32_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t *vertices, size_t num_vertices, int32_t const *renumber_map_labels, int32_t local_int_vertex_first, int32_t local_int_vertex_last, bool do_expensive_check)</argsstring>
        <name>renumber_ext_vertices&lt; int32_t, true &gt;</name>
        <qualifiedname>cugraph::renumber_ext_vertices&lt; int32_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" line="23" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__mg_8cu_1ae859d1ed97c02f23797c0fbf53e3a1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::renumber_ext_vertices&lt; int64_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t *vertices, size_t num_vertices, int64_t const *renumber_map_labels, int64_t local_int_vertex_first, int64_t local_int_vertex_last, bool do_expensive_check)</argsstring>
        <name>renumber_ext_vertices&lt; int64_t, true &gt;</name>
        <qualifiedname>cugraph::renumber_ext_vertices&lt; int64_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" line="31" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__mg_8cu_1a5bda15e9a31781baa3c3fc7548d54e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::renumber_local_ext_vertices&lt; int32_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t *vertices, size_t num_vertices, int32_t const *renumber_map_labels, int32_t local_int_vertex_first, int32_t local_int_vertex_last, bool do_expensive_check)</argsstring>
        <name>renumber_local_ext_vertices&lt; int32_t, true &gt;</name>
        <qualifiedname>cugraph::renumber_local_ext_vertices&lt; int32_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" line="39" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__mg_8cu_1a84c74be5c961091ce110b5f1a45623c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::renumber_local_ext_vertices&lt; int64_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t *vertices, size_t num_vertices, int64_t const *renumber_map_labels, int64_t local_int_vertex_first, int64_t local_int_vertex_last, bool do_expensive_check)</argsstring>
        <name>renumber_local_ext_vertices&lt; int64_t, true &gt;</name>
        <qualifiedname>cugraph::renumber_local_ext_vertices&lt; int64_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" line="47" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" declline="47" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__mg_8cu_1af051e47abd4b1b9c5d153e021a98689f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_int_vertices&lt; int32_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t *vertices, size_t num_vertices, int32_t const *renumber_map_labels, std::vector&lt; int32_t &gt; const &amp;vertex_partition_range_lasts, bool do_expensive_check)</argsstring>
        <name>unrenumber_int_vertices&lt; int32_t, true &gt;</name>
        <qualifiedname>cugraph::unrenumber_int_vertices&lt; int32_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" line="55" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" declline="55" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__mg_8cu_1a2adf93ea0417d08643ae03c9c3023732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_int_vertices&lt; int64_t, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t *vertices, size_t num_vertices, int64_t const *renumber_map_labels, std::vector&lt; int64_t &gt; const &amp;vertex_partition_range_lasts, bool do_expensive_check)</argsstring>
        <name>unrenumber_int_vertices&lt; int64_t, true &gt;</name>
        <qualifiedname>cugraph::unrenumber_int_vertices&lt; int64_t, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" line="63" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" declline="63" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__mg_8cu_1a096783f5f37ca9b3f3ba126057a9afaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_local_int_edges&lt; int32_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; int32_t * &gt; const &amp;edgelist_srcs, std::vector&lt; int32_t * &gt; const &amp;edgelist_dsts, std::vector&lt; size_t &gt; const &amp;edgelist_edge_counts, int32_t const *renumber_map_labels, std::vector&lt; int32_t &gt; const &amp;vertex_partition_range_lasts, std::optional&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; const &amp;edgelist_intra_partition_segment_offsets, bool do_expensive_check)</argsstring>
        <name>unrenumber_local_int_edges&lt; int32_t, false, true &gt;</name>
        <qualifiedname>cugraph::unrenumber_local_int_edges&lt; int32_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t * &gt; const &amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t * &gt; const &amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>edgelist_edge_counts</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; const &amp;</type>
          <declname>edgelist_intra_partition_segment_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" line="71" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" declline="71" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__mg_8cu_1ae780240049308f987083eb0111245ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_local_int_edges&lt; int32_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; int32_t * &gt; const &amp;edgelist_srcs, std::vector&lt; int32_t * &gt; const &amp;edgelist_dsts, std::vector&lt; size_t &gt; const &amp;edgelist_edge_counts, int32_t const *renumber_map_labels, std::vector&lt; int32_t &gt; const &amp;vertex_partition_range_lasts, std::optional&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; const &amp;edgelist_intra_partition_segment_offsets, bool do_expensive_check)</argsstring>
        <name>unrenumber_local_int_edges&lt; int32_t, true, true &gt;</name>
        <qualifiedname>cugraph::unrenumber_local_int_edges&lt; int32_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t * &gt; const &amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t * &gt; const &amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>edgelist_edge_counts</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; const &amp;</type>
          <declname>edgelist_intra_partition_segment_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" line="81" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" declline="81" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__mg_8cu_1a7f3b27025788db17365c497e02b499f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_local_int_edges&lt; int64_t, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; int64_t * &gt; const &amp;edgelist_srcs, std::vector&lt; int64_t * &gt; const &amp;edgelist_dsts, std::vector&lt; size_t &gt; const &amp;edgelist_edge_counts, int64_t const *renumber_map_labels, std::vector&lt; int64_t &gt; const &amp;vertex_partition_range_lasts, std::optional&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; const &amp;edgelist_intra_partition_segment_offsets, bool do_expensive_check)</argsstring>
        <name>unrenumber_local_int_edges&lt; int64_t, false, true &gt;</name>
        <qualifiedname>cugraph::unrenumber_local_int_edges&lt; int64_t, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t * &gt; const &amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t * &gt; const &amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>edgelist_edge_counts</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; const &amp;</type>
          <declname>edgelist_intra_partition_segment_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" line="91" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" declline="91" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__mg_8cu_1afdb38145b2eca0368d3174fc0ec47f51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_local_int_edges&lt; int64_t, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::vector&lt; int64_t * &gt; const &amp;edgelist_srcs, std::vector&lt; int64_t * &gt; const &amp;edgelist_dsts, std::vector&lt; size_t &gt; const &amp;edgelist_edge_counts, int64_t const *renumber_map_labels, std::vector&lt; int64_t &gt; const &amp;vertex_partition_range_lasts, std::optional&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; const &amp;edgelist_intra_partition_segment_offsets, bool do_expensive_check)</argsstring>
        <name>unrenumber_local_int_edges&lt; int64_t, true, true &gt;</name>
        <qualifiedname>cugraph::unrenumber_local_int_edges&lt; int64_t, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t * &gt; const &amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t * &gt; const &amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>edgelist_edge_counts</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; const &amp;</type>
          <declname>edgelist_intra_partition_segment_offsets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" line="101" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_mg.cu" declline="101" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1a4273686dad5e75b2259572d9df76498f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::renumber_ext_vertices&lt; int32_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t *vertices, size_t num_vertices, int32_t const *renumber_map_labels, int32_t local_int_vertex_first, int32_t local_int_vertex_last, bool do_expensive_check)</argsstring>
        <name>renumber_ext_vertices&lt; int32_t, false &gt;</name>
        <qualifiedname>cugraph::renumber_ext_vertices&lt; int32_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="23" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1aa832ebc8abc03052b9733390a81c9710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::renumber_ext_vertices&lt; int64_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t *vertices, size_t num_vertices, int64_t const *renumber_map_labels, int64_t local_int_vertex_first, int64_t local_int_vertex_last, bool do_expensive_check)</argsstring>
        <name>renumber_ext_vertices&lt; int64_t, false &gt;</name>
        <qualifiedname>cugraph::renumber_ext_vertices&lt; int64_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="31" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1a27a32a427340e4617e12e8164cbf2490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::renumber_local_ext_vertices&lt; int32_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t *vertices, size_t num_vertices, int32_t const *renumber_map_labels, int32_t local_int_vertex_first, int32_t local_int_vertex_last, bool do_expensive_check)</argsstring>
        <name>renumber_local_ext_vertices&lt; int32_t, false &gt;</name>
        <qualifiedname>cugraph::renumber_local_ext_vertices&lt; int32_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="39" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1a75d65bf76fbc19fd680163b104469110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::renumber_local_ext_vertices&lt; int64_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t *vertices, size_t num_vertices, int64_t const *renumber_map_labels, int64_t local_int_vertex_first, int64_t local_int_vertex_last, bool do_expensive_check)</argsstring>
        <name>renumber_local_ext_vertices&lt; int64_t, false &gt;</name>
        <qualifiedname>cugraph::renumber_local_ext_vertices&lt; int64_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="47" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="47" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1a7704e28548abdbfc38c7f0f573cb5433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_local_int_vertices&lt; int32_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t *vertices, size_t num_vertices, int32_t const *renumber_map_labels, int32_t local_int_vertex_first, int32_t local_int_vertex_last, bool do_expensive_check)</argsstring>
        <name>unrenumber_local_int_vertices&lt; int32_t &gt;</name>
        <qualifiedname>cugraph::unrenumber_local_int_vertices&lt; int32_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="55" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="55" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1a178fe19d7f0e51393c4f6f569f7489d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_local_int_vertices&lt; int64_t &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t *vertices, size_t num_vertices, int64_t const *renumber_map_labels, int64_t local_int_vertex_first, int64_t local_int_vertex_last, bool do_expensive_check)</argsstring>
        <name>unrenumber_local_int_vertices&lt; int64_t &gt;</name>
        <qualifiedname>cugraph::unrenumber_local_int_vertices&lt; int64_t &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>local_int_vertex_first</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>local_int_vertex_last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="63" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="63" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1afaf7f83b8c629c75ae8d3947069fb1ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_int_vertices&lt; int32_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t *vertices, size_t num_vertices, int32_t const *renumber_map_labels, std::vector&lt; int32_t &gt; const &amp;vertex_partition_range_lasts, bool do_expensive_check)</argsstring>
        <name>unrenumber_int_vertices&lt; int32_t, false &gt;</name>
        <qualifiedname>cugraph::unrenumber_int_vertices&lt; int32_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; int32_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="71" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="71" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1a1e717d0b5000ea66ef3c98f96c394448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_int_vertices&lt; int64_t, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t *vertices, size_t num_vertices, int64_t const *renumber_map_labels, std::vector&lt; int64_t &gt; const &amp;vertex_partition_range_lasts, bool do_expensive_check)</argsstring>
        <name>unrenumber_int_vertices&lt; int64_t, false &gt;</name>
        <qualifiedname>cugraph::unrenumber_int_vertices&lt; int64_t, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="79" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="79" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1adc1092cacb9614a3ee25edde2e376362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_local_int_edges&lt; int32_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t *edgelist_srcs, int32_t *edgelist_dsts, size_t num_edgelist_edges, int32_t const *renumber_map_labels, int32_t num_vertices, bool do_expensive_check)</argsstring>
        <name>unrenumber_local_int_edges&lt; int32_t, false, false &gt;</name>
        <qualifiedname>cugraph::unrenumber_local_int_edges&lt; int32_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edgelist_edges</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="87" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="87" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1ad48c87a5f52412bea0cfc1de8f54c69d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_local_int_edges&lt; int32_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t *edgelist_srcs, int32_t *edgelist_dsts, size_t num_edgelist_edges, int32_t const *renumber_map_labels, int32_t num_vertices, bool do_expensive_check)</argsstring>
        <name>unrenumber_local_int_edges&lt; int32_t, true, false &gt;</name>
        <qualifiedname>cugraph::unrenumber_local_int_edges&lt; int32_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edgelist_edges</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="96" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="96" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1ac9b6b83f72602342eda60db498028787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_local_int_edges&lt; int64_t, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t *edgelist_srcs, int64_t *edgelist_dsts, size_t num_edgelist_edges, int64_t const *renumber_map_labels, int64_t num_vertices, bool do_expensive_check)</argsstring>
        <name>unrenumber_local_int_edges&lt; int64_t, false, false &gt;</name>
        <qualifiedname>cugraph::unrenumber_local_int_edges&lt; int64_t, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edgelist_edges</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="104" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="104" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="renumber__utils__sg_8cu_1a119984d389db77de6887861579959742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::unrenumber_local_int_edges&lt; int64_t, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t *edgelist_srcs, int64_t *edgelist_dsts, size_t num_edgelist_edges, int64_t const *renumber_map_labels, int64_t num_vertices, bool do_expensive_check)</argsstring>
        <name>unrenumber_local_int_edges&lt; int64_t, true, false &gt;</name>
        <qualifiedname>cugraph::unrenumber_local_int_edges&lt; int64_t, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_edgelist_edges</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>renumber_map_labels</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" line="113" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/renumber_utils_sg.cu" declline="113" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__impl_8hpp_1aed4de9f596c1b91dc20f5091a359d641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; vertex_t &gt;</type>
        <definition>rmm::device_uvector&lt; vertex_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const  &amp;graph_view, std::optional&lt; raft::device_span&lt; vertex_t const  &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check=false)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Select random vertices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object of the input graph to select random vertices from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>given_set</parametername>
</parameternamelist>
<parameterdescription>
<para>Distributed set to sample from. If <computeroutput>given_set</computeroutput> is not specified, sample from the entire vertex range provided by <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The RngState instance holding pseudo-random number generator state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>select_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of vertices to select from the graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_replacement</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, select with replacement, if false select without replacement </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sort_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, return the sorted vertices (in the ascending order). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device vector of selected vertices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_impl.hpp" line="49" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_impl.hpp" bodystart="49" bodyend="257" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="915" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__mg_8cu_1a51e4a46e90365adbcb0436ac7cfdac77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" line="21" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" declline="21" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__mg_8cu_1a3c65da5cf91c3d55666a0611a434e782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" line="31" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" declline="31" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__mg_8cu_1aa2481c341c2f3ad50ca059f738a9f8cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int64_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int64_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" line="41" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" declline="41" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__mg_8cu_1a1b6fc8f449a820f817552faaf5b16296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, true &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" line="51" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" declline="51" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__mg_8cu_1ab04ada020939f412ff050bb8c517059f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" line="61" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" declline="61" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__mg_8cu_1acc87d741f2fbd9a7b1832598f98e5b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int64_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int64_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, true &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" line="71" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_mg.cu" declline="71" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__sg_8cu_1aa73aabc5631a53bfdbe6dd17ba6aed4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" line="21" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" declline="21" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__sg_8cu_1afb7991331224b1e9d466d8f1d750b4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" line="31" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" declline="31" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__sg_8cu_1a2320856e022815f4ef58167189bad461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int64_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int64_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" line="41" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" declline="41" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__sg_8cu_1a266bf0175aa1de8ad015781b2d601faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, true, false &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" line="51" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" declline="51" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__sg_8cu_1af761ea28f51487a209fbfcb36e5c200b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int32_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" line="61" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" declline="61" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="select__random__vertices__sg_8cu_1a7c2541cf585f14c8ba5e0e75996b29e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int64_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int64_t &gt; cugraph::select_random_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, true, false &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt; given_set, raft::random::RngState &amp;rng_state, size_t select_count, bool with_replacement, bool sort_vertices, bool do_expensive_check)</argsstring>
        <name>select_random_vertices</name>
        <qualifiedname>cugraph::select_random_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; int64_t const &gt; &gt;</type>
          <declname>given_set</declname>
        </param>
        <param>
          <type>raft::random::RngState &amp;</type>
          <declname>rng_state</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>select_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_replacement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_vertices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" line="71" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/select_random_vertices_sg.cu" declline="71" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__impl_8cuh_1a4c51f15185892bf602499b2f3e6532a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &gt; cugraph::symmetrize_edgelist</definition>
        <argsstring>(raft::handle_t const  &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist</name>
        <qualifiedname>cugraph::symmetrize_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
<para>Symmetrize edgelist. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_srcs</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge source vertex IDs. If multi-GPU, applying the compute_gpu_id_from_ext_edge_endpoints_t to every edge should return the local GPU ID for this function to work (edges should be pre-shuffled). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_dsts</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge destination vertex IDs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge weights. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reciprocal</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to keep (if set to <computeroutput>false</computeroutput>) or discard (if set to <computeroutput>true</computeroutput>) edges that appear only in one direction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, rmm::device_uvector&lt;vertex_t&gt;, std::optional&lt;rmm::device_uvector&lt;weight_t&gt;&gt;&gt; Tuple of symmetrized sources, destinations, and optional weights (if <computeroutput>edgelist_weights</computeroutput> is valid). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_impl.cuh" line="557" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_impl.cuh" bodystart="557" bodyend="576" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="411" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__mg_8cu_1a0677f64518041ce62b21e1c17e6d4333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int32_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int32_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int32_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" line="22" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__mg_8cu_1ad1735a1d25582c0dfd26380d097837d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int32_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int32_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int32_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" line="32" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__mg_8cu_1a84f81f431acd18bb3efada12cb2df3c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int32_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int32_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int32_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" line="42" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__mg_8cu_1a15d7ee1f1a03545254c6458bd232f72c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int32_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int32_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int32_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" line="52" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__mg_8cu_1af95a9f7b50465e6c7569ec27adc08641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int64_t, float, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int64_t, float, false, true &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int64_t, float, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" line="62" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__mg_8cu_1abf1c8088e31cba7b0a241d02fd8f9a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int64_t, float, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int64_t, float, true, true &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int64_t, float, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" line="72" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__mg_8cu_1adf90fd4ef2651c429036c1f85e828220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int64_t, double, false, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int64_t, double, false, true &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int64_t, double, false, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" line="82" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" declline="82" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__mg_8cu_1a6b771500a4e2882fd893b2560c03bbe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int64_t, double, true, true &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int64_t, double, true, true &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int64_t, double, true, true &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" line="92" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_mg.cu" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__sg_8cu_1a5d4fd08bfd5b79449e1efcfcd6eb7c67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int32_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int32_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int32_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" line="22" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__sg_8cu_1a38061e3ec5eac91a3ff0362db0e3ed72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int32_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int32_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int32_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" line="32" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__sg_8cu_1a9864175af7b9abc18c608a977a74a1c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int32_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int32_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int32_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" line="42" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__sg_8cu_1ae7b30b6873f2eb5263da5f1fe918229f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int32_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int32_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int32_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" line="52" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__sg_8cu_1ac10c42f2b5d5abdb2df7d76fd3105ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int64_t, float, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int64_t, float, false, false &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int64_t, float, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" line="62" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__sg_8cu_1afbee3df0dae8761b16552b7d32cd525a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int64_t, float, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int64_t, float, true, false &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int64_t, float, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" line="72" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__sg_8cu_1a2eecaae9bde58d6d72c34bdd08c98d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int64_t, double, false, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int64_t, double, false, false &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int64_t, double, false, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" line="82" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" declline="82" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__edgelist__sg_8cu_1a7bc7b20cad46d43a1579e6a30c7f4f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &gt; cugraph::symmetrize_edgelist&lt; int64_t, double, true, false &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;edgelist_weights, bool reciprocal)</argsstring>
        <name>symmetrize_edgelist&lt; int64_t, double, true, false &gt;</name>
        <qualifiedname>cugraph::symmetrize_edgelist&lt; int64_t, double, true, false &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" line="92" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_edgelist_sg.cu" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__impl_8cuh_1a550d037c9c692501d3c03f4ceec9f5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; graph_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal=false, bool do_expensive_check=false)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Symmetrize the input graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph object to be symmetrized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional owning object holding edge weights for <computeroutput>graph</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Renumber map to recover the original vertex IDs from the renumbered vertex IDs. This should be valid if multi-GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reciprocal</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, an edge is kept only when the reversed edge also exists. If false, keep (and symmetrize) all the edges that appear only in one direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return a symmetrized graph, an owning object holding edge weights (if <computeroutput>edge_weights.has_value()</computeroutput> is true) and a new renumber map (to recover the original vertex IDs, if <computeroutput>renumber_map.has_value()</computeroutput> is true). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_impl.cuh" line="242" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_impl.cuh" bodystart="242" bodyend="257" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="450" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a439e98a39d551cd7f1c3e3507c3455c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a6e13562e372378d770a731a168709220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="38" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a1c4575d2b6e636067e70a15e2ab41240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="50" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a96ccb3b8dd28b1d6d906abbfb4ac65bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="62" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a52010c54ffe0f29b6bc2435971cc2a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="74" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a5a23523e43bf10ebbe70ab8143e1bdf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="86" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a54a36c7b345cecc4576cfe40ad91ed53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="98" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="98" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a9544daa65c8d04dbbc9e5fef8c04978c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="110" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="110" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a2c901d1a4e3feb2c11dcff1752ad08b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="123" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="123" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a5a1cfff853153e5f11941174b96a1a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="135" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="135" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1a138b689d205d5f99e2e8a270030e394e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="148" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="148" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__mg_8cu_1ad1997a2e93c8486f0fc84b48c13a6e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" line="160" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_mg.cu" declline="160" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1a66d9fb8cf445363ec9884b864fa5b3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1afaa6f0a7c417a691cd6a9d2fbf3578d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="38" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1a2781cc49711249814c9721a9ec128f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="51" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1a1bd8fc8e202a5bfaf260551b3f6e374e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="63" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="63" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1a36cbb09175cd1d8658946f2a6dc4666b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="76" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="76" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1a0f958f77446774aedfe63546e412c6fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="88" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="88" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1aae1b60e46db95805e313a3f717e026e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="101" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="101" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1a628dc2987af3bbe31825e6b10851ca50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="114" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="114" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1a067e26fecec4adb8f013d5f84d35ac2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="127" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="127" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1a54f4d2b4401dcbbd05d85869cd87a9fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="140" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="140" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1a827dabfb92b9ee74264794a436738408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="153" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="153" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="symmetrize__graph__sg_8cu_1a1bf12a469130ed33a902c5c73ee67871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::symmetrize_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool reciprocal, bool do_expensive_check)</argsstring>
        <name>symmetrize_graph</name>
        <qualifiedname>cugraph::symmetrize_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reciprocal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" line="166" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/symmetrize_graph_sg.cu" declline="166" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__impl_8cuh_1a75b1fcf870229a9068689bc2cf80303a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; graph_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check=false)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Transpose the input graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph object to be transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional owning object holding edge weights for <computeroutput>graph</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Renumber map to recover the original vertex IDs from the renumbered vertex IDs. This should be valid if multi-GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return a transposed graph, an owning object holding edge weights (if <computeroutput>edge_weights.has_value()</computeroutput> is true) and a new renumber map (to recover the original vertex IDs, if <computeroutput>renumber_map.has_value()</computeroutput> is true). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_impl.cuh" line="239" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_impl.cuh" bodystart="239" bodyend="250" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="490" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1a61045c3b04360aae44c682c4f1ce2761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1ad5af545b7bc2ae9468921f249c5d032f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="37" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1aff6addd20883202b625c5fae0aa81dc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="48" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1a4bc3c6aaea135c7f32cd1e619ba15fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="59" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1a6b52af2f71fa9b871eba4747926f490a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="70" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1ac9a6fa8d55ed13030db88fc8556a27a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="81" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1a8cffd6695e2083355bdc6657c1713df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="92" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1ab202c895f146b5d45a8be487999ea149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="103" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1a88f6e15c82f9fa4beb19eb3fce42e11c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="115" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="115" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1ac2aff6f97e5035c3e06c1ac430202b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="126" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="126" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1a417f51f86dc4d8819d40fe6969650181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="138" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="138" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__mg_8cu_1a3c8f79e7754e382075e6462728f0e1c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" line="149" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_mg.cu" declline="149" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1ad5faa683b769017453c7b9897aa9d437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1a76d09743a6906740b9daaacb2fe9152c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="37" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1aef8367fc5660551fba22bd24e0ee52a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="49" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1a9cc836a7a5fcea8337aff79be08481ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="60" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="60" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1af8691d8f6c9b7662f3309ae994ed9185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="72" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1af173bbd1bc51b6d0d8ed05436f5df0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="83" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="83" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1a68faa615bf77aad617328c14ac8f41d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="95" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1a3508d43b47efb735329a542df1451f26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="107" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="107" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1aba03fbd8b750e29213cb617c30f0d04c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="119" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="119" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1a73412fcb2cdb0fed854f2130f2c85c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="131" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="131" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1a990fcd61ca04e28704741ffd2b821e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="143" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__sg_8cu_1a995e5f2ea1484049a84db3ac7de9fc2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph</name>
        <qualifiedname>cugraph::transpose_graph</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" line="155" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_sg.cu" declline="155" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__impl_8cuh_1a69f83cbad56379783f5cac4fa334ee30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; vertex_t, edge_t, !store_transposed, multi_gpu &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, !store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; graph_t&lt; vertex_t, edge_t, !store_transposed, multi_gpu &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, !store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check=false)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Transpose the storage format (no change in an actual graph topology). </para>
        </briefdescription>
        <detaileddescription>
<para>In SG, convert between CSR and CSC. In multi-GPU, currently convert between CSR + DCSR hybrid and CSC + DCSC hybrid (but the internal representation in multi-GPU is subject to change).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph object to transpose its storage format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional owning object holding edge weights for <computeroutput>graph</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Renumber map to recover the original vertex IDs from the renumbered vertex IDs. This should be valid if multi-GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;<ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt;vertex_t, edge_t, weight_t, !store_transposed, multi_gpu&gt;, </para>
</simplesect>
<simplesect kind="return"><para>Return a storage transposed graph, an owning object holding edge weights (if <computeroutput>edge_weights.has_value()</computeroutput> is true) and a new renumber map (to recover the original vertex IDs, if <computeroutput>renumber_map.has_value()</computeroutput> is true). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_impl.cuh" line="249" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_impl.cuh" bodystart="249" bodyend="260" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="533" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1aba3a44f056a9431b2b8ffc7638eeee16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1a492924af50f573d1663be107464caa0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="37" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1abe745349a19ddbab8d5ebe7b1d9ecd1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="48" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1a744c227278ad3d88c8c0fcdcf36e88f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="59" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1a6157b45a3fed2b3e681900b444a58bf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="70" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1a4c8d280574d080cc5e9f7dbc812ae61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="81" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1a1b4307933952161d88d9d61129fe3078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="92" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1a583a311887ef784ce55d412ae3fa83f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="103" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1aec5fc25473a54b14247858ba98c160d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="115" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="115" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1af8fb6fa42be47decaeecc75a5b0f2a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="126" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="126" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1a9c7918d871ccd25c42b8c235fed96ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="138" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="138" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__mg_8cu_1a158e3a5de578a6d00bdde3ed38fe6c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, true &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, true &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, true &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, true &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" line="149" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_mg.cu" declline="149" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1abd486f314b1b5b228b35f48eec023aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="26" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1ad845ff86618457c4f72b9af7b15f489e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="37" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1ae612cd34f738433ac2c0851c1468a838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="49" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1accc963d531ff4ea072ebdab5fa76928b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="60" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="60" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1a0d880dd563e0868e48ac1df733159301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="72" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1aaea1b43859bfd82eadd898cf909917fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, float &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="83" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="83" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1a7db3cd99e7a508785ca442e6f91dccb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="95" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1a4cd89966b71d9e69d489bf6b36ac5642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int32_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int32_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int32_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="107" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="107" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1aa38b31f58b20f5e37d5c351ef494e1ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="119" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="119" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1ab9fcaaf4dbd89ef164eb5023c68462d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int32_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int32_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int32_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="131" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="131" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1a3aabb0db572feba515f2d4c549d28549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, false, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, true, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="143" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transpose__graph__storage__sg_8cu_1ad932e6a546d5fc1da27c36b85c38387e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; graph_t&lt; int64_t, int64_t, true, false &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, true, false &gt;, double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &gt; cugraph::transpose_graph_storage</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_t&lt; int64_t, int64_t, false, false &gt; &amp;&amp;graph, std::optional&lt; edge_property_t&lt; graph_view_t&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;renumber_map, bool do_expensive_check)</argsstring>
        <name>transpose_graph_storage</name>
        <qualifiedname>cugraph::transpose_graph_storage</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; int64_t, int64_t, false, false &gt; &amp;&amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt;, double &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>renumber_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" line="155" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/transpose_graph_storage_sg.cu" declline="155" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="bfs__impl_8cuh_1afc485fb91b0b36ce7250b5115ac8c4d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::bfs</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, vertex_t *distances, vertex_t *predecessors, vertex_t const  *sources, size_t n_sources=1, bool direction_optimizing=false, vertex_t depth_limit=std::numeric_limits&lt; vertex_t &gt;::max(), bool do_expensive_check=false)</argsstring>
        <name>bfs</name>
        <qualifiedname>cugraph::bfs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_sources</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>direction_optimizing</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>depth_limit</declname>
          <defval>std::numeric_limits&lt; vertex_t &gt;::max()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Run breadth-first search to find the distances (and predecessors) from the source vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the distances (minimum number of hops to reach the vertex) from the source vertex. If <computeroutput>predecessors</computeroutput> is not <computeroutput>nullptr</computeroutput>, this function calculates the predecessor of each vertex (parent vertex in the breadth-first search tree) as well.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on erroneous input arguments.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output distance array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predecessors</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output predecessor array or <computeroutput>nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sources</parametername>
</parameternamelist>
<parameterdescription>
<para>Source vertices to start breadth-first search (root vertex of the breath-first search tree). If more than one source is passed, there must be a single source per component. In a multi-gpu context the source vertices should be local to this GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_sources</parametername>
</parameternamelist>
<parameterdescription>
<para>number of sources (one source per component at most). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction_optimizing</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to true, this algorithm switches between the push based breadth-first search and pull based breadth-first search depending on the size of the breadth-first search frontier (currently unsupported). This option is valid only for symmetric input graphs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets the maximum number of breadth-first search iterations. Any vertices farther than <computeroutput>depth_limit</computeroutput> hops from <computeroutput>source_vertex</computeroutput> will be marked as unreachable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_impl.cuh" line="292" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_impl.cuh" bodystart="292" bodyend="323" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1091" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="bfs__mg_8cu_1a9b29c7a76f737d20b0f16cc67d203e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::bfs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, int32_t *distances, int32_t *predecessors, int32_t const *sources, size_t n_sources, bool direction_optimizing, int32_t depth_limit, bool do_expensive_check)</argsstring>
        <name>bfs</name>
        <qualifiedname>cugraph::bfs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>direction_optimizing</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>depth_limit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_mg.cu" line="23" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_mg.cu" declline="23" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="bfs__mg_8cu_1a25d0eb43a5cb8cd18b4e99ec40cdb627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::bfs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, int32_t *distances, int32_t *predecessors, int32_t const *sources, size_t n_sources, bool direction_optimizing, int32_t depth_limit, bool do_expensive_check)</argsstring>
        <name>bfs</name>
        <qualifiedname>cugraph::bfs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>direction_optimizing</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>depth_limit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_mg.cu" line="33" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_mg.cu" declline="33" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="bfs__mg_8cu_1a22e82fbb263169436b60e690bbf64134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::bfs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, int64_t *distances, int64_t *predecessors, int64_t const *sources, size_t n_sources, bool direction_optimizing, int64_t depth_limit, bool do_expensive_check)</argsstring>
        <name>bfs</name>
        <qualifiedname>cugraph::bfs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>direction_optimizing</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>depth_limit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_mg.cu" line="43" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_mg.cu" declline="43" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="bfs__sg_8cu_1a8ae0048f089bc00ea30bfb01ff0f63fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::bfs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, int32_t *distances, int32_t *predecessors, int32_t const *sources, size_t n_sources, bool direction_optimizing, int32_t depth_limit, bool do_expensive_check)</argsstring>
        <name>bfs</name>
        <qualifiedname>cugraph::bfs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>direction_optimizing</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>depth_limit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_sg.cu" line="23" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_sg.cu" declline="23" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="bfs__sg_8cu_1a7e3f3064536630c45fdd3cfcee4b84a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::bfs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, int32_t *distances, int32_t *predecessors, int32_t const *sources, size_t n_sources, bool direction_optimizing, int32_t depth_limit, bool do_expensive_check)</argsstring>
        <name>bfs</name>
        <qualifiedname>cugraph::bfs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>direction_optimizing</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>depth_limit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_sg.cu" line="33" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_sg.cu" declline="33" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="bfs__sg_8cu_1af0407fc8e0176feb2da8e73a0216d829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::bfs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, int64_t *distances, int64_t *predecessors, int64_t const *sources, size_t n_sources, bool direction_optimizing, int64_t depth_limit, bool do_expensive_check)</argsstring>
        <name>bfs</name>
        <qualifiedname>cugraph::bfs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>direction_optimizing</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>depth_limit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_sg.cu" line="43" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/bfs_sg.cu" declline="43" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="extract__bfs__paths__impl_8cuh_1a9688660e812edb6bfda1375d0b63b5e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, vertex_t &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, vertex_t &gt; cugraph::extract_bfs_paths</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, vertex_t const  *distances, vertex_t const  *predecessors, vertex_t const  *destinations, size_t n_destinations)</argsstring>
        <name>extract_bfs_paths</name>
        <qualifiedname>cugraph::extract_bfs_paths</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_destinations</declname>
        </param>
        <briefdescription>
<para>Extract paths from breadth-first search output. </para>
        </briefdescription>
        <detaileddescription>
<para>This function extracts paths from the BFS output. BFS outputs distances and predecessors. The path from a vertex v back to the original source vertex can be extracted by recursively looking up the predecessor vertex until you arrive back at the original source vertex.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on erroneous input arguments.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the distance array constructed by bfs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predecessors</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the predecessor array constructed by bfs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destinations</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination vertices, extract path from source to each of these destinations In a multi-gpu context the destination vertex should be local to this GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_destinations</parametername>
</parameternamelist>
<parameterdescription>
<para>number of destinations (one source per component at most).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;rmm::device_uvector&lt;vertex_t&gt;, vertex_t&gt; pair containing the paths as a dense matrix in the vector and the maximum path length. Unused elements in the paths will be set to <ref refid="structcugraph_1_1invalid__vertex__id" kindref="compound">invalid_vertex_id</ref> (-1 for a signed vertex_t, std::numeric_limits&lt;vertex_t&gt;::max() for an unsigned vertex_t type). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_impl.cuh" line="142" column="12" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_impl.cuh" bodystart="142" bodyend="248" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1130" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="extract__bfs__paths__mg_8cu_1aa2a5aadbb05f6e23bed5a87063fdc855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, int32_t &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, int32_t &gt; cugraph::extract_bfs_paths</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, int32_t const *distances, int32_t const *predecessors, int32_t const *destinations, size_t n_destinations)</argsstring>
        <name>extract_bfs_paths</name>
        <qualifiedname>cugraph::extract_bfs_paths</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_destinations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_mg.cu" line="23" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_mg.cu" declline="23" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="extract__bfs__paths__mg_8cu_1a4f7528ec39136bafba4121882bbd0dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, int32_t &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, int32_t &gt; cugraph::extract_bfs_paths</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, int32_t const *distances, int32_t const *predecessors, int32_t const *destinations, size_t n_destinations)</argsstring>
        <name>extract_bfs_paths</name>
        <qualifiedname>cugraph::extract_bfs_paths</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_destinations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_mg.cu" line="31" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_mg.cu" declline="31" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="extract__bfs__paths__mg_8cu_1acc0fa46b4afbbf0cb66995282ee725d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, int64_t &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, int64_t &gt; cugraph::extract_bfs_paths</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, int64_t const *distances, int64_t const *predecessors, int64_t const *destinations, size_t n_destinations)</argsstring>
        <name>extract_bfs_paths</name>
        <qualifiedname>cugraph::extract_bfs_paths</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_destinations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_mg.cu" line="39" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_mg.cu" declline="39" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="extract__bfs__paths__sg_8cu_1a9c59ab9dcd04838219ca9162754d6b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, int32_t &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, int32_t &gt; cugraph::extract_bfs_paths</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, int32_t const *distances, int32_t const *predecessors, int32_t const *destinations, size_t n_destinations)</argsstring>
        <name>extract_bfs_paths</name>
        <qualifiedname>cugraph::extract_bfs_paths</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_destinations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_sg.cu" line="23" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_sg.cu" declline="23" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="extract__bfs__paths__sg_8cu_1ac670d84c6bb7cf3cddae23b12cce6cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, int32_t &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, int32_t &gt; cugraph::extract_bfs_paths</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, int32_t const *distances, int32_t const *predecessors, int32_t const *destinations, size_t n_destinations)</argsstring>
        <name>extract_bfs_paths</name>
        <qualifiedname>cugraph::extract_bfs_paths</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_destinations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_sg.cu" line="31" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_sg.cu" declline="31" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="extract__bfs__paths__sg_8cu_1a8d958d530b27e87d614b5dc14ad7b608" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, int64_t &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, int64_t &gt; cugraph::extract_bfs_paths</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, int64_t const *distances, int64_t const *predecessors, int64_t const *destinations, size_t n_destinations)</argsstring>
        <name>extract_bfs_paths</name>
        <qualifiedname>cugraph::extract_bfs_paths</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_destinations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_sg.cu" line="39" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/extract_bfs_paths_sg.cu" declline="39" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="k__hop__nbrs__impl_8cuh_1a9c8b6b9a16f2a72cbb64f00013451819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::k_hop_nbrs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view, raft::device_span&lt; vertex_t const &gt; start_vertices, size_t k, bool do_expensive_check)</argsstring>
        <name>k_hop_nbrs</name>
        <qualifiedname>cugraph::k_hop_nbrs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_impl.cuh" line="229" column="12" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_impl.cuh" bodystart="229" bodyend="237" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="2337" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="k__hop__nbrs__mg_8cu_1aec895047f36bffe13de7746117a962b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::k_hop_nbrs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t k, bool do_expensive_check)</argsstring>
        <name>k_hop_nbrs</name>
        <qualifiedname>cugraph::k_hop_nbrs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_mg.cu" line="22" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_mg.cu" declline="22" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="k__hop__nbrs__mg_8cu_1a84c532a0169e87923425f812604da075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::k_hop_nbrs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t k, bool do_expensive_check)</argsstring>
        <name>k_hop_nbrs</name>
        <qualifiedname>cugraph::k_hop_nbrs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_mg.cu" line="29" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_mg.cu" declline="29" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="k__hop__nbrs__mg_8cu_1a345807c29b9742fb70d4b0759825d8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::k_hop_nbrs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t k, bool do_expensive_check)</argsstring>
        <name>k_hop_nbrs</name>
        <qualifiedname>cugraph::k_hop_nbrs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_mg.cu" line="36" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_mg.cu" declline="36" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="k__hop__nbrs__sg_8cu_1a0c5f26e257fd9f0b02bd7f72eb3101c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::k_hop_nbrs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t k, bool do_expensive_check)</argsstring>
        <name>k_hop_nbrs</name>
        <qualifiedname>cugraph::k_hop_nbrs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_sg.cu" line="22" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_sg.cu" declline="22" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="k__hop__nbrs__sg_8cu_1a36d3374a87abb48891523a5083de6df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::k_hop_nbrs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, raft::device_span&lt; int32_t const &gt; start_vertices, size_t k, bool do_expensive_check)</argsstring>
        <name>k_hop_nbrs</name>
        <qualifiedname>cugraph::k_hop_nbrs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_sg.cu" line="29" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_sg.cu" declline="29" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="k__hop__nbrs__sg_8cu_1a6568524e2fe7210eae9680b77bd16359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; size_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::k_hop_nbrs</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, raft::device_span&lt; int64_t const &gt; start_vertices, size_t k, bool do_expensive_check)</argsstring>
        <name>k_hop_nbrs</name>
        <qualifiedname>cugraph::k_hop_nbrs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_sg.cu" line="36" column="21" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/k_hop_nbrs_sg.cu" declline="36" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="od__shortest__distances__impl_8cuh_1a12ef1aa16657c5d1224d66455f013323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; weight_t &gt;</type>
        <definition>rmm::device_uvector&lt; weight_t &gt; cugraph::od_shortest_distances</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;graph_view, edge_property_view_t&lt; edge_t, weight_t const * &gt; edge_weight_view, raft::device_span&lt; vertex_t const &gt; origins, raft::device_span&lt; vertex_t const &gt; destinations, weight_t cutoff, bool do_expensive_check)</argsstring>
        <name>od_shortest_distances</name>
        <qualifiedname>cugraph::od_shortest_distances</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>origins</declname>
        </param>
        <param>
          <type>raft::device_span&lt; vertex_t const &gt;</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>weight_t</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_impl.cuh" line="1041" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_impl.cuh" bodystart="1041" bodyend="1091" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1205" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="od__shortest__distances__sg_8cu_1aab7840de119adf96d3059f498afb9928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::od_shortest_distances</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; origins, raft::device_span&lt; int32_t const &gt; destinations, float cutoff, bool do_expensive_check)</argsstring>
        <name>od_shortest_distances</name>
        <qualifiedname>cugraph::od_shortest_distances</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>origins</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" line="22" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" declline="22" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="od__shortest__distances__sg_8cu_1af092638b4cf3d2f8ed0d8ec95232173a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::od_shortest_distances</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; origins, raft::device_span&lt; int32_t const &gt; destinations, double cutoff, bool do_expensive_check)</argsstring>
        <name>od_shortest_distances</name>
        <qualifiedname>cugraph::od_shortest_distances</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>origins</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" line="31" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" declline="31" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="od__shortest__distances__sg_8cu_1af1dc940fe72d6c707cfcfcce3559e04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::od_shortest_distances</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; origins, raft::device_span&lt; int32_t const &gt; destinations, float cutoff, bool do_expensive_check)</argsstring>
        <name>od_shortest_distances</name>
        <qualifiedname>cugraph::od_shortest_distances</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>origins</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" line="40" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" declline="40" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="od__shortest__distances__sg_8cu_1abcad0ca58ee443b5c2c4b23709cb4cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::od_shortest_distances</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view, raft::device_span&lt; int32_t const &gt; origins, raft::device_span&lt; int32_t const &gt; destinations, double cutoff, bool do_expensive_check)</argsstring>
        <name>od_shortest_distances</name>
        <qualifiedname>cugraph::od_shortest_distances</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>origins</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int32_t const &gt;</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" line="49" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" declline="49" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="od__shortest__distances__sg_8cu_1a2c920f9bd73d66bf6b5ce2a1d016f35a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; float &gt;</type>
        <definition>template rmm::device_uvector&lt; float &gt; cugraph::od_shortest_distances</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; origins, raft::device_span&lt; int64_t const &gt; destinations, float cutoff, bool do_expensive_check)</argsstring>
        <name>od_shortest_distances</name>
        <qualifiedname>cugraph::od_shortest_distances</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>origins</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" line="58" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" declline="58" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="od__shortest__distances__sg_8cu_1ac881c1bcb45d5d2b0fecfadc497ec244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; double &gt;</type>
        <definition>template rmm::device_uvector&lt; double &gt; cugraph::od_shortest_distances</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view, raft::device_span&lt; int64_t const &gt; origins, raft::device_span&lt; int64_t const &gt; destinations, double cutoff, bool do_expensive_check)</argsstring>
        <name>od_shortest_distances</name>
        <qualifiedname>cugraph::od_shortest_distances</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>origins</declname>
        </param>
        <param>
          <type>raft::device_span&lt; int64_t const &gt;</type>
          <declname>destinations</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" line="67" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/od_shortest_distances_sg.cu" declline="67" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="sssp__impl_8cuh_1ac70ece89a76d8e22cb3c0125702af748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const  &amp;handle, graph_view_t&lt; vertex_t, edge_t, false, multi_gpu &gt; const  &amp;graph_view, edge_property_view_t&lt; edge_t, weight_t const  * &gt; edge_weight_view, weight_t *distances, vertex_t *predecessors, vertex_t source_vertex, weight_t cutoff=std::numeric_limits&lt; weight_t &gt;::max(), bool do_expensive_check=false)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, false, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, weight_t const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>weight_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>vertex_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>weight_t</type>
          <declname>cutoff</declname>
          <defval>std::numeric_limits&lt; weight_t &gt;::max()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Run single-source shortest-path to compute the minimum distances (and predecessors) from the source vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the distances (minimum edge weight sums) from the source vertex. If <computeroutput>predecessors</computeroutput> is not <computeroutput>nullptr</computeroutput>, this function calculates the predecessor of each vertex in the shortest-path as well. Graph edge weights should be non-negative.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on erroneous input arguments.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Graph view object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weight_view</parametername>
</parameternamelist>
<parameterdescription>
<para>View object holding edge weights for <computeroutput>graph_view</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output distance array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predecessors</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output predecessor array or <computeroutput>nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Source vertex to start single-source shortest-path. In a multi-gpu context the source vertex should be local to this GPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cutoff</parametername>
</parameternamelist>
<parameterdescription>
<para>Single-source shortest-path terminates if no more vertices are reachable within the distance of <computeroutput>cutoff</computeroutput>. Any vertex farther than <computeroutput>cutoff</computeroutput> will be marked as unreachable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_impl.cuh" line="273" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_impl.cuh" bodystart="273" bodyend="301" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="1166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sssp__mg_8cu_1af1d2d7ab0b1b9176229b20e54e8091b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view, float *distances, int32_t *predecessors, int32_t source_vertex, float cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" line="22" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" declline="22" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__mg_8cu_1a869cce9ad916040f27c42916075d318a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view, double *distances, int32_t *predecessors, int32_t source_vertex, double cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" line="31" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" declline="31" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__mg_8cu_1a22d4287334a7ee5611a4a418fad28e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view, float *distances, int32_t *predecessors, int32_t source_vertex, float cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" line="40" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" declline="40" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__mg_8cu_1a346dae7af865f132c378ada1af341433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view, double *distances, int32_t *predecessors, int32_t source_vertex, double cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" line="49" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" declline="49" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__mg_8cu_1a691d201ecb51d392902b6f2eacb1158a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view, float *distances, int64_t *predecessors, int64_t source_vertex, float cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" line="58" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" declline="58" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__mg_8cu_1adb32488e136daedba66b05eb94799576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, true &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view, double *distances, int64_t *predecessors, int64_t source_vertex, double cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, true &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" line="67" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_mg.cu" declline="67" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__sg_8cu_1ab2f394b2de334aec596627256eae963b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, float const * &gt; edge_weight_view, float *distances, int32_t *predecessors, int32_t source_vertex, float cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" line="22" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" declline="22" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__sg_8cu_1a6961962df1364f09a791513b072238ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int32_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int32_t, double const * &gt; edge_weight_view, double *distances, int32_t *predecessors, int32_t source_vertex, double cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int32_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int32_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" line="31" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" declline="31" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__sg_8cu_1adfe446a1650e56717cab1cfd4a931d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view, float *distances, int32_t *predecessors, int32_t source_vertex, float cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" line="40" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" declline="40" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__sg_8cu_1a517d8b517738198359977197ed26ad01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int32_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view, double *distances, int32_t *predecessors, int32_t source_vertex, double cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int32_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" line="49" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" declline="49" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__sg_8cu_1a3dfcf32f3c5b026fca8e9a6d48097648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, float const * &gt; edge_weight_view, float *distances, int64_t *predecessors, int64_t source_vertex, float cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, float const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" line="58" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" declline="58" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="sssp__sg_8cu_1a3a566d23df2cff4fad516387ac650afe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::sssp</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; int64_t, int64_t, false, false &gt; const &amp;graph_view, edge_property_view_t&lt; int64_t, double const * &gt; edge_weight_view, double *distances, int64_t *predecessors, int64_t source_vertex, double cutoff, bool do_expensive_check)</argsstring>
        <name>sssp</name>
        <qualifiedname>cugraph::sssp</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; int64_t, int64_t, false, false &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; int64_t, double const * &gt;</type>
          <declname>edge_weight_view</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>predecessors</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>source_vertex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" line="67" column="15" declfile="/home/nfs/abarghi/cugraph6/cpp/src/traversal/sssp_sg.cu" declline="67" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="mst_8cu_1a329cb6ba9642a7619a2a8205d96b5388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="classcugraph_1_1legacy_1_1GraphCOO" kindref="compound">legacy::GraphCOO</ref>&lt; vertex_t, edge_t, weight_t &gt; &gt;</type>
        <definition>std::unique_ptr&lt; legacy::GraphCOO&lt; vertex_t, edge_t, weight_t &gt; &gt; cugraph::minimum_spanning_tree</definition>
        <argsstring>(raft::handle_t const  &amp;handle, legacy::GraphCSRView&lt; vertex_t, edge_t, weight_t &gt; const  &amp;graph, rmm::device_async_resource_ref mr=rmm::mr::get_current_device_resource())</argsstring>
        <name>minimum_spanning_tree</name>
        <qualifiedname>cugraph::minimum_spanning_tree</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; vertex_t, edge_t, weight_t &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>rmm::device_async_resource_ref</type>
          <declname>mr</declname>
          <defval>rmm::mr::get_current_device_resource()</defval>
        </param>
        <briefdescription>
<para>Generate edges in a minimum spanning forest of an undirected weighted graph. </para>
        </briefdescription>
        <detaileddescription>
<para>A minimum spanning tree is a subgraph of the graph (a tree) with the minimum sum of edge weights. A spanning forest is a union of the spanning trees for each connected component of the graph. If the graph is connected it returns the minimum spanning tree.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported values : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph_csr</parametername>
</parameternamelist>
<parameterdescription>
<para>input graph object (CSR) expected to be symmetric </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory resource used to allocate the returned graph </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out_graph Unique pointer to MSF subgraph in COO format </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/tree/legacy/mst.cu" line="67" column="17" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/tree/legacy/mst.cu" bodystart="67" bodyend="73" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="832" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="mst_8cu_1a338d937a296473f7639f2e2bc2bb25db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::unique_ptr&lt; <ref refid="classcugraph_1_1legacy_1_1GraphCOO" kindref="compound">legacy::GraphCOO</ref>&lt; int, int, float &gt; &gt;</type>
        <definition>template std::unique_ptr&lt; legacy::GraphCOO&lt; int, int, float &gt; &gt; cugraph::minimum_spanning_tree&lt; int, int, float &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, legacy::GraphCSRView&lt; int, int, float &gt; const &amp;graph, rmm::device_async_resource_ref mr)</argsstring>
        <name>minimum_spanning_tree&lt; int, int, float &gt;</name>
        <qualifiedname>cugraph::minimum_spanning_tree&lt; int, int, float &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int, int, float &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>rmm::device_async_resource_ref</type>
          <declname>mr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/tree/legacy/mst.cu" line="75" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/tree/legacy/mst.cu" declline="75" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="mst_8cu_1ae2000b3de4291b175ae62847a73924e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::unique_ptr&lt; <ref refid="classcugraph_1_1legacy_1_1GraphCOO" kindref="compound">legacy::GraphCOO</ref>&lt; int, int, double &gt; &gt;</type>
        <definition>template std::unique_ptr&lt; legacy::GraphCOO&lt; int, int, double &gt; &gt; cugraph::minimum_spanning_tree&lt; int, int, double &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, legacy::GraphCSRView&lt; int, int, double &gt; const &amp;graph, rmm::device_async_resource_ref mr)</argsstring>
        <name>minimum_spanning_tree&lt; int, int, double &gt;</name>
        <qualifiedname>cugraph::minimum_spanning_tree&lt; int, int, double &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; int, int, double &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>rmm::device_async_resource_ref</type>
          <declname>mr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/tree/legacy/mst.cu" line="79" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/tree/legacy/mst.cu" declline="79" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="collect__comm_8cuh_1a19b04a9f6c734ba5dc55de0b321751a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KVStoreViewType</type>
          </param>
          <param>
            <type>typename KeyIterator</type>
          </param>
          <param>
            <type>typename KeyToGPUIdOp</type>
          </param>
        </templateparamlist>
        <type>decltype(allocate_dataframe_buffer&lt; typename KVStoreViewType::value_type &gt;(0, rmm::cuda_stream_view{}))</type>
        <definition>decltype(allocate_dataframe_buffer&lt; typename KVStoreViewType::value_type &gt;(0, rmm::cuda_stream_view{})) cugraph::collect_values_for_keys</definition>
        <argsstring>(raft::handle_t const &amp;handle, KVStoreViewType kv_store_view, KeyIterator collect_key_first, KeyIterator collect_key_last, KeyToGPUIdOp key_to_gpu_id_op)</argsstring>
        <name>collect_values_for_keys</name>
        <qualifiedname>cugraph::collect_values_for_keys</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>KVStoreViewType</type>
          <declname>kv_store_view</declname>
        </param>
        <param>
          <type>KeyIterator</type>
          <declname>collect_key_first</declname>
        </param>
        <param>
          <type>KeyIterator</type>
          <declname>collect_key_last</declname>
        </param>
        <param>
          <type>KeyToGPUIdOp</type>
          <declname>key_to_gpu_id_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/collect_comm.cuh" line="57" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/collect_comm.cuh" bodystart="57" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="collect__comm_8cuh_1a95c30a7417b54a4096c1bffd34e91cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KVStoreViewType</type>
          </param>
          <param>
            <type>typename KeyToGPUIdOp</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; typename KVStoreViewType::key_type &gt;, decltype(allocate_dataframe_buffer&lt; typename KVStoreViewType::value_type &gt;(0, cudaStream_t{nullptr}))&gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; typename KVStoreViewType::key_type &gt;, decltype(allocate_dataframe_buffer&lt; typename KVStoreViewType::value_type &gt;( 0, cudaStream_t{nullptr}))&gt; cugraph::collect_values_for_unique_keys</definition>
        <argsstring>(raft::handle_t const &amp;handle, KVStoreViewType kv_store_view, rmm::device_uvector&lt; typename KVStoreViewType::key_type &gt; &amp;&amp;collect_unique_keys, KeyToGPUIdOp key_to_gpu_id_op)</argsstring>
        <name>collect_values_for_unique_keys</name>
        <qualifiedname>cugraph::collect_values_for_unique_keys</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>KVStoreViewType</type>
          <declname>kv_store_view</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; typename KVStoreViewType::key_type &gt; &amp;&amp;</type>
          <declname>collect_unique_keys</declname>
        </param>
        <param>
          <type>KeyToGPUIdOp</type>
          <declname>key_to_gpu_id_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/collect_comm.cuh" line="165" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/collect_comm.cuh" bodystart="165" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="collect__comm_8cuh_1a8470395f26c1a182410bb6a935f4cf7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename ValueIterator</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, decltype(allocate_dataframe_buffer&lt; typename thrust::iterator_traits&lt; ValueIterator &gt;::value_type &gt;(0, cudaStream_t{nullptr}))&gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, decltype(allocate_dataframe_buffer&lt; typename thrust::iterator_traits&lt; ValueIterator &gt;::value_type &gt;( 0, cudaStream_t{nullptr}))&gt; cugraph::collect_values_for_unique_int_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;collect_unique_int_vertices, ValueIterator local_value_first, std::vector&lt; vertex_t &gt; const &amp;vertex_partition_range_lasts)</argsstring>
        <name>collect_values_for_unique_int_vertices</name>
        <qualifiedname>cugraph::collect_values_for_unique_int_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>collect_unique_int_vertices</declname>
        </param>
        <param>
          <type>ValueIterator</type>
          <declname>local_value_first</declname>
        </param>
        <param>
          <type>std::vector&lt; vertex_t &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/collect_comm.cuh" line="206" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/collect_comm.cuh" bodystart="206" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="collect__comm_8cuh_1a3fac3b1bc91db8acbfb06dcd445013fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VertexIterator</type>
          </param>
          <param>
            <type>typename ValueIterator</type>
          </param>
        </templateparamlist>
        <type>decltype(allocate_dataframe_buffer&lt; typename thrust::iterator_traits&lt; ValueIterator &gt;::value_type &gt;(0, cudaStream_t{nullptr}))</type>
        <definition>decltype(allocate_dataframe_buffer&lt; typename thrust::iterator_traits&lt; ValueIterator &gt;::value_type &gt;( 0, cudaStream_t{nullptr})) cugraph::collect_values_for_int_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, VertexIterator collect_vertex_first, VertexIterator collect_vertex_last, ValueIterator local_value_first, std::vector&lt; typename thrust::iterator_traits&lt; VertexIterator &gt;::value_type &gt; const &amp;vertex_partition_range_lasts)</argsstring>
        <name>collect_values_for_int_vertices</name>
        <qualifiedname>cugraph::collect_values_for_int_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>collect_vertex_first</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>collect_vertex_last</declname>
        </param>
        <param>
          <type>ValueIterator</type>
          <declname>local_value_first</declname>
        </param>
        <param>
          <type>std::vector&lt; typename thrust::iterator_traits&lt; VertexIterator &gt;::value_type &gt; const &amp;</type>
          <declname>vertex_partition_range_lasts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/collect_comm.cuh" line="270" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/collect_comm.cuh" bodystart="270" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="collect__comm_8cuh_1a86deee20e0896494b8478a15ad470c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; T &gt;</type>
        <definition>rmm::device_uvector&lt; T &gt; cugraph::device_allgatherv</definition>
        <argsstring>(raft::handle_t const &amp;handle, raft::comms::comms_t const &amp;comms, raft::device_span&lt; T const &gt; d_input)</argsstring>
        <name>device_allgatherv</name>
        <qualifiedname>cugraph::device_allgatherv</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comms</declname>
        </param>
        <param>
          <type>raft::device_span&lt; T const &gt;</type>
          <declname>d_input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/collect_comm.cuh" line="318" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/collect_comm.cuh" bodystart="318" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="path__retrieval_8cu_1a41a71fac845f1af9f992e9857cf9f942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::get_traversed_cost</definition>
        <argsstring>(raft::handle_t const  &amp;handle, vertex_t const  *vertices, vertex_t const  *preds, weight_t const  *info_weights, weight_t *out, vertex_t stop_vertex, vertex_t num_vertices)</argsstring>
        <name>get_traversed_cost</name>
        <qualifiedname>cugraph::get_traversed_cost</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>preds</declname>
        </param>
        <param>
          <type>weight_t const *</type>
          <declname>info_weights</declname>
        </param>
        <param>
          <type>weight_t *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>stop_vertex</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>num_vertices</declname>
        </param>
        <briefdescription>
<para>Takes the results of BFS or SSSP function call and sums the given weights along the path to the starting vertex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Needs to be a floating point type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. Must have at least one worker stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to vertex ids. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preds</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to predecessors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary weights along the edge from predecessor to vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Contains for each index the sum of weights along the path unfolding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of vertices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/path_retrieval.cu" line="91" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/path_retrieval.cu" bodystart="91" bodyend="103" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/path_retrieval.hpp" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="path__retrieval_8cu_1a0a1ea0ebaa6d020cbe75218ceacc3407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::get_traversed_cost&lt; int32_t, float &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t const *vertices, int32_t const *preds, float const *info_weights, float *out, int32_t stop_vertex, int32_t num_vertices)</argsstring>
        <name>get_traversed_cost&lt; int32_t, float &gt;</name>
        <qualifiedname>cugraph::get_traversed_cost&lt; int32_t, float &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>preds</declname>
        </param>
        <param>
          <type>float const *</type>
          <declname>info_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>stop_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/path_retrieval.cu" line="105" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/path_retrieval.cu" declline="105" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="path__retrieval_8cu_1ab8d6554f98dc75a902c445d930f6db6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::get_traversed_cost&lt; int32_t, double &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int32_t const *vertices, int32_t const *preds, double const *info_weights, double *out, int32_t stop_vertex, int32_t num_vertices)</argsstring>
        <name>get_traversed_cost&lt; int32_t, double &gt;</name>
        <qualifiedname>cugraph::get_traversed_cost&lt; int32_t, double &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>int32_t const *</type>
          <declname>preds</declname>
        </param>
        <param>
          <type>double const *</type>
          <declname>info_weights</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>stop_vertex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/path_retrieval.cu" line="113" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/path_retrieval.cu" declline="113" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="path__retrieval_8cu_1a93dbff34f1cdabe885afe72b31c2c20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::get_traversed_cost&lt; int64_t, float &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t const *vertices, int64_t const *preds, float const *info_weights, float *out, int64_t stop_vertex, int64_t num_vertices)</argsstring>
        <name>get_traversed_cost&lt; int64_t, float &gt;</name>
        <qualifiedname>cugraph::get_traversed_cost&lt; int64_t, float &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>preds</declname>
        </param>
        <param>
          <type>float const *</type>
          <declname>info_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>stop_vertex</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/path_retrieval.cu" line="121" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/path_retrieval.cu" declline="121" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="path__retrieval_8cu_1a3baa4799c8c1aa3dd6711f257f5483b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cugraph::get_traversed_cost&lt; int64_t, double &gt;</definition>
        <argsstring>(raft::handle_t const &amp;handle, int64_t const *vertices, int64_t const *preds, double const *info_weights, double *out, int64_t stop_vertex, int64_t num_vertices)</argsstring>
        <name>get_traversed_cost&lt; int64_t, double &gt;</name>
        <qualifiedname>cugraph::get_traversed_cost&lt; int64_t, double &gt;</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>preds</declname>
        </param>
        <param>
          <type>double const *</type>
          <declname>info_weights</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>stop_vertex</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/path_retrieval.cu" line="129" column="10" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/path_retrieval.cu" declline="129" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertex__pairs_8cu_1a8400c0d6f3449062ef6c4d986a2bc24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename edge_type_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt;, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &gt; cugraph::shuffle_external_edges</definition>
        <argsstring>(raft::handle_t const  &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edge_srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edge_dsts, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;edge_weights, std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt; &amp;&amp;edge_ids, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;edge_types)</argsstring>
        <name>shuffle_external_edges</name>
        <qualifiedname>cugraph::shuffle_external_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edge_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edge_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_types</declname>
        </param>
        <briefdescription>
<para>Shuffle external edges to the proper GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weight. Currently float and double are supported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_srcs</parametername>
</parameternamelist>
<parameterdescription>
<para>List of source vertex ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_dsts</parametername>
</parameternamelist>
<parameterdescription>
<para>List of destination vertex ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of edge weights </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of edge ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_types</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of edge types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of vectors storing edge sources, destinations, optional weights, optional edge ids, optional edge types mapped to this GPU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" line="529" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" bodystart="529" bodyend="550" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="1116" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertex__pairs_8cu_1a20fa96de68db755a02c194df72f68924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::shuffle_external_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;majors, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;minors, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edge_types)</argsstring>
        <name>shuffle_external_edges</name>
        <qualifiedname>cugraph::shuffle_external_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>majors</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>minors</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" line="557" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" declline="557" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertex__pairs_8cu_1aca44d8004eefbad132f0f3e1d2822a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::shuffle_external_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;majors, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;minors, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;weights, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edge_types)</argsstring>
        <name>shuffle_external_edges</name>
        <qualifiedname>cugraph::shuffle_external_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>majors</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>minors</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" line="569" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" declline="569" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertex__pairs_8cu_1a8b7d8bcd797bcf19f93e08df8c49d719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::shuffle_external_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;majors, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;minors, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edge_types)</argsstring>
        <name>shuffle_external_edges</name>
        <qualifiedname>cugraph::shuffle_external_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>majors</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>minors</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" line="581" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" declline="581" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertex__pairs_8cu_1a0e58fa449bd3462c7b619ff36eb3d09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::shuffle_external_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;majors, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;minors, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edge_types)</argsstring>
        <name>shuffle_external_edges</name>
        <qualifiedname>cugraph::shuffle_external_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>majors</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>minors</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" line="593" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" declline="593" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertex__pairs_8cu_1a4f9358c04db4029ebbb2d5b1c3ccaf3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::shuffle_external_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;majors, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;minors, std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edge_types)</argsstring>
        <name>shuffle_external_edges</name>
        <qualifiedname>cugraph::shuffle_external_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>majors</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>minors</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; float &gt; &gt; &amp;&amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" line="605" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" declline="605" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertex__pairs_8cu_1ad9e0be4c4e692165f1d7e83dcb4eb33d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt;, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &gt; cugraph::shuffle_external_edges</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;majors, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;minors, std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;weights, std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;edge_ids, std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;edge_types)</argsstring>
        <name>shuffle_external_edges</name>
        <qualifiedname>cugraph::shuffle_external_edges</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>majors</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>minors</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; double &gt; &gt; &amp;&amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int64_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; int32_t &gt; &gt; &amp;&amp;</type>
          <declname>edge_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" line="617" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertex_pairs.cu" declline="617" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1ab7cf53d150c52bd1670e1bf6494bfc74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename value_t</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; value_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; value_t &gt; &gt; cugraph::shuffle_external_vertex_value_pairs</definition>
        <argsstring>(raft::handle_t const  &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;vertices, rmm::device_uvector&lt; value_t &gt; &amp;&amp;values)</argsstring>
        <name>shuffle_external_vertex_value_pairs</name>
        <qualifiedname>cugraph::shuffle_external_vertex_value_pairs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; value_t &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Shuffle external vertex ids and values to the proper GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of values. currently supported types are int32_t, int64_t, size_t, float and double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>List of vertex ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>List of values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of vectors storing vertex ids and values mapped to this GPU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="255" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" bodystart="255" bodyend="261" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="1089" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1a5ba14240ab1c595d103f190f40030124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::shuffle_external_vertex_value_pairs</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;vertices, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;values)</argsstring>
        <name>shuffle_external_vertex_value_pairs</name>
        <qualifiedname>cugraph::shuffle_external_vertex_value_pairs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="264" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="264" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1a5f2d0356ba15f3da17ba672b649f2515" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::shuffle_external_vertex_value_pairs</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;vertices, rmm::device_uvector&lt; size_t &gt; &amp;&amp;values)</argsstring>
        <name>shuffle_external_vertex_value_pairs</name>
        <qualifiedname>cugraph::shuffle_external_vertex_value_pairs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; size_t &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="269" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="269" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1a2b138bc76b2c43b6e7db849a8b483a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::shuffle_external_vertex_value_pairs</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;vertices, rmm::device_uvector&lt; float &gt; &amp;&amp;values)</argsstring>
        <name>shuffle_external_vertex_value_pairs</name>
        <qualifiedname>cugraph::shuffle_external_vertex_value_pairs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; float &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="274" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="274" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1a4fd161e39ee8aa4fe6d679c190682154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int32_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::shuffle_external_vertex_value_pairs</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;vertices, rmm::device_uvector&lt; double &gt; &amp;&amp;values)</argsstring>
        <name>shuffle_external_vertex_value_pairs</name>
        <qualifiedname>cugraph::shuffle_external_vertex_value_pairs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; double &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="279" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="279" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1a8f9868b01199df5c4abd930ca209de57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int32_t &gt; &gt; cugraph::shuffle_external_vertex_value_pairs</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;vertices, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;values)</argsstring>
        <name>shuffle_external_vertex_value_pairs</name>
        <qualifiedname>cugraph::shuffle_external_vertex_value_pairs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="284" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="284" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1a15f168926de9771d9aeda398e42cf56c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; int64_t &gt; &gt; cugraph::shuffle_external_vertex_value_pairs</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;vertices, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;values)</argsstring>
        <name>shuffle_external_vertex_value_pairs</name>
        <qualifiedname>cugraph::shuffle_external_vertex_value_pairs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="289" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="289" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1ac0f41378057e449b2367801ddaf72360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; size_t &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; size_t &gt; &gt; cugraph::shuffle_external_vertex_value_pairs</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;vertices, rmm::device_uvector&lt; size_t &gt; &amp;&amp;values)</argsstring>
        <name>shuffle_external_vertex_value_pairs</name>
        <qualifiedname>cugraph::shuffle_external_vertex_value_pairs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; size_t &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="294" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="294" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1aae185a0c5e22615ac27b4959fd81ffd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; float &gt; &gt; cugraph::shuffle_external_vertex_value_pairs</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;vertices, rmm::device_uvector&lt; float &gt; &amp;&amp;values)</argsstring>
        <name>shuffle_external_vertex_value_pairs</name>
        <qualifiedname>cugraph::shuffle_external_vertex_value_pairs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; float &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="299" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="299" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1a1edb283ea2fc402aa813498b1a592116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt;</type>
        <definition>template std::tuple&lt; rmm::device_uvector&lt; int64_t &gt;, rmm::device_uvector&lt; double &gt; &gt; cugraph::shuffle_external_vertex_value_pairs</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;vertices, rmm::device_uvector&lt; double &gt; &amp;&amp;values)</argsstring>
        <name>shuffle_external_vertex_value_pairs</name>
        <qualifiedname>cugraph::shuffle_external_vertex_value_pairs</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; double &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="304" column="1" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="304" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1a95c902134971662b4253ef8b80b8a206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; vertex_t &gt;</type>
        <definition>rmm::device_uvector&lt; vertex_t &gt; cugraph::shuffle_external_vertices</definition>
        <argsstring>(raft::handle_t const  &amp;handle, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;vertices)</argsstring>
        <name>shuffle_external_vertices</name>
        <qualifiedname>cugraph::shuffle_external_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <briefdescription>
<para>Shuffle external vertex ids to the proper GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>List of vertex ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector of vertex ids mapped to this GPU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="309" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" bodystart="309" bodyend="314" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="1071" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1a43a0ffed0fd7b4f081f077ec19009fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int32_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int32_t &gt; cugraph::shuffle_external_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int32_t &gt; &amp;&amp;d_vertices)</argsstring>
        <name>shuffle_external_vertices</name>
        <qualifiedname>cugraph::shuffle_external_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int32_t &gt; &amp;&amp;</type>
          <declname>d_vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="316" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="316" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__vertices_8cu_1af3a9eef4ed67e12fcdb049b2b2df5343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template rmm::device_uvector&lt; int64_t &gt;</type>
        <definition>template rmm::device_uvector&lt; int64_t &gt; cugraph::shuffle_external_vertices</definition>
        <argsstring>(raft::handle_t const &amp;handle, rmm::device_uvector&lt; int64_t &gt; &amp;&amp;d_vertices)</argsstring>
        <name>shuffle_external_vertices</name>
        <qualifiedname>cugraph::shuffle_external_vertices</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; int64_t &gt; &amp;&amp;</type>
          <declname>d_vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" line="319" column="30" declfile="/home/nfs/abarghi/cugraph6/cpp/src/utilities/shuffle_vertices.cu" declline="319" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8hpp_1a945c78c75346c6ea3dffcb6bcf7639c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VT</type>
          </param>
          <param>
            <type>typename ET</type>
          </param>
          <param>
            <type>typename WT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::jaccard</definition>
        <argsstring>(legacy::GraphCSRView&lt; VT, ET, WT &gt; const &amp;graph, WT const *weights, WT *result)</argsstring>
        <name>jaccard</name>
        <qualifiedname>cugraph::jaccard</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; VT, ET, WT &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>WT const *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>WT *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Compute jaccard similarity coefficient for all vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the Jaccard similarity coefficient for every pair of vertices in the graph which are connected by an edge.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ET</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported value : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The input graph object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights</parametername>
</parameternamelist>
<parameterdescription>
<para>device pointer to input vertex weights for weighted Jaccard, may be NULL for unweighted Jaccard. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to result values, memory needs to be pre-allocated by caller </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" line="64" column="6" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8hpp_1adff99efcf9dec5c5ff61fd895863e7e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VT</type>
          </param>
          <param>
            <type>typename ET</type>
          </param>
          <param>
            <type>typename WT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::jaccard_list</definition>
        <argsstring>(legacy::GraphCSRView&lt; VT, ET, WT &gt; const &amp;graph, WT const *weights, ET num_pairs, VT const *first, VT const *second, WT *result)</argsstring>
        <name>jaccard_list</name>
        <qualifiedname>cugraph::jaccard_list</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; VT, ET, WT &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>WT const *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>ET</type>
          <declname>num_pairs</declname>
        </param>
        <param>
          <type>VT const *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>VT const *</type>
          <declname>second</declname>
        </param>
        <param>
          <type>WT *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Compute jaccard similarity coefficient for selected vertex pairs. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the Jaccard similarity coefficient for each pair of specified vertices. Vertices are specified as pairs where pair[n] = (first[n], second[n])</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ET</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported value : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The input graph object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vertex weights for weighted Jaccard, may be NULL for unweighted Jaccard. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of vertex ID pairs specified </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to first vertex ID of each pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">second</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to second vertex ID of each pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to result values, memory needs to be pre-allocated by caller </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" line="88" column="6" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8hpp_1a8d40b4ba4404ae2afa070a827ef35a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VT</type>
          </param>
          <param>
            <type>typename ET</type>
          </param>
          <param>
            <type>typename WT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::overlap</definition>
        <argsstring>(legacy::GraphCSRView&lt; VT, ET, WT &gt; const &amp;graph, WT const *weights, WT *result)</argsstring>
        <name>overlap</name>
        <qualifiedname>cugraph::overlap</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; VT, ET, WT &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>WT const *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>WT *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Compute overlap coefficient for all vertices in the graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the Overlap Coefficient for every pair of vertices in the graph which are connected by an edge.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ET</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported value : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The input graph object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights</parametername>
</parameternamelist>
<parameterdescription>
<para>device pointer to input vertex weights for weighted overlap, may be NULL for unweighted overlap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to result values, memory needs to be pre-allocated by caller </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" line="114" column="6" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8hpp_1a500eea3a8fec7b7ad7da6654aaa31097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VT</type>
          </param>
          <param>
            <type>typename ET</type>
          </param>
          <param>
            <type>typename WT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::overlap_list</definition>
        <argsstring>(legacy::GraphCSRView&lt; VT, ET, WT &gt; const &amp;graph, WT const *weights, ET num_pairs, VT const *first, VT const *second, WT *result)</argsstring>
        <name>overlap_list</name>
        <qualifiedname>cugraph::overlap_list</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; VT, ET, WT &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>WT const *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>ET</type>
          <declname>num_pairs</declname>
        </param>
        <param>
          <type>VT const *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>VT const *</type>
          <declname>second</declname>
        </param>
        <param>
          <type>WT *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Compute overlap coefficient for select pairs of vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the overlap coefficient for each pair of specified vertices. Vertices are specified as pairs where pair[n] = (first[n], second[n])</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ET</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported value : float or double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The input graph object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights</parametername>
</parameternamelist>
<parameterdescription>
<para>device pointer to input vertex weights for weighted overlap, may be NULL for unweighted overlap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of vertex ID pairs specified </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to first vertex ID of each pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">second</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to second vertex ID of each pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pointer to result values, memory needs to be pre-allocated by caller </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" line="138" column="6" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="138" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8hpp_1a42aeebf62efa9b7bd283823312fadd07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename result_t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, legacy::GraphCSRView&lt; vertex_t, edge_t, weight_t &gt; const &amp;graph, result_t *result, bool normalized=true, bool endpoints=false, weight_t const *weight=nullptr, vertex_t k=0, vertex_t const *vertices=nullptr)</argsstring>
        <name>betweenness_centrality</name>
        <qualifiedname>cugraph::betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; vertex_t, edge_t, weight_t &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>result_t *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalized</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>endpoints</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>weight_t const *</type>
          <declname>weight</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>k</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>vertices</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute betweenness centrality for a graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Betweenness centrality for a vertex is the sum of the fraction of all pairs shortest paths that pass through the vertex.</para>
<para>The current implementation does not support a weighted graph.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>result == nullptr</computeroutput> or <computeroutput>number_of_sources &lt; 0</computeroutput> or <computeroutput>number_of_sources !=0 and sources == nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported values : float or double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of computed result. Supported values : float or double </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, the multi GPU version will be selected. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>cuGRAPH graph descriptor, should contain the connectivity information as a CSR </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Device array of centrality scores </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">normalized</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, return normalized scores, if false return unnormalized scores. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">endpoints</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, include endpoints of paths in score, if false do not </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weight</parametername>
</parameternamelist>
<parameterdescription>
<para>If specified, device array of weights for each edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">k</parametername>
</parameternamelist>
<parameterdescription>
<para>If specified, number of vertex samples defined in the vertices array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>If specified, host array of vertex ids to estimate betweenness these vertices will serve as sources for the traversal algorihtm to obtain shortest path counters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">total_number_of_source_used</parametername>
</parameternamelist>
<parameterdescription>
<para>If specified use this number to normalize results when using subsampling, it allows accumulation of results across multiple calls. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" line="256" column="6" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="256" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8hpp_1af4d401722a6b2bcf236d5a8f5670cc25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename result_t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::edge_betweenness_centrality</definition>
        <argsstring>(const raft::handle_t &amp;handle, legacy::GraphCSRView&lt; vertex_t, edge_t, weight_t &gt; const &amp;graph, result_t *result, bool normalized=true, weight_t const *weight=nullptr, vertex_t k=0, vertex_t const *vertices=nullptr)</argsstring>
        <name>edge_betweenness_centrality</name>
        <qualifiedname>cugraph::edge_betweenness_centrality</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1legacy_1_1GraphCSRView" kindref="compound">legacy::GraphCSRView</ref>&lt; vertex_t, edge_t, weight_t &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>result_t *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalized</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>weight_t const *</type>
          <declname>weight</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>k</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>vertex_t const *</type>
          <declname>vertices</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute edge betweenness centrality for a graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Betweenness centrality of an edge is the sum of the fraction of all-pairs shortest paths that pass through this edge. The weight parameter is currenlty not supported</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>result == nullptr</computeroutput> or <computeroutput>number_of_sources &lt; 0</computeroutput> or <computeroutput>number_of_sources !=0 and sources == nullptr</computeroutput> or <computeroutput>endpoints == true</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Supported value : int (signed, 32-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weights. Supported values : float or double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of computed result. Supported values : float or double </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, the multi GPU version will be selected. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>cuGraph graph descriptor, should contain the connectivity information as a CSR </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Device array of centrality scores </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">normalized</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, return normalized scores, if false return unnormalized scores. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weight</parametername>
</parameternamelist>
<parameterdescription>
<para>If specified, device array of weights for each edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">k</parametername>
</parameternamelist>
<parameterdescription>
<para>If specified, number of vertex samples defined in the vertices array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>If specified, host array of vertex ids to estimate betweenness these vertices will serve as sources for the traversal algorihtm to obtain shortest path counters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">total_number_of_source_used</parametername>
</parameternamelist>
<parameterdescription>
<para>If specified use this number to normalize results when using subsampling, it allows accumulation of results across multiple calls. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" line="300" column="6" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="300" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8hpp_1a14ff99325a9b1360a3ae2a3b3ff30c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename graph_view_t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::flatten_dendrogram</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t const &amp;graph_view, Dendrogram&lt; typename graph_view_t::vertex_type &gt; const &amp;dendrogram, typename graph_view_t::vertex_type *clustering)</argsstring>
        <name>flatten_dendrogram</name>
        <qualifiedname>cugraph::flatten_dendrogram</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref> const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref>&lt; typename graph_view_t::vertex_type &gt; const &amp;</type>
          <declname>dendrogram</declname>
        </param>
        <param>
          <type>typename graph_view_t::vertex_type *</type>
          <declname>clustering</declname>
        </param>
        <briefdescription>
<para>Flatten a <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref> at a particular level. </para>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="classcugraph_1_1Dendrogram" kindref="compound">Dendrogram</ref> represents a hierarchical clustering/partitioning of a graph. This function will flatten the hierarchical clustering into a label for each vertex representing the final cluster/partition to which it is assigned</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type of graph</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle (RAFT). If a communicator is set in the handle, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>input graph object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dendrogram</parametername>
</parameternamelist>
<parameterdescription>
<para>input dendrogram object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">clustering</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device array where the clustering should be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" line="620" column="6" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/algorithms.hpp" declline="620" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="edge__property_8hpp_1a1abfb5d05a0045e1aa47a6b528d20f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Iters</declname>
            <defname>Iters</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::view_concat</definition>
        <argsstring>(edge_property_view_t&lt; edge_t, Iters, Types &gt; const &amp;... views)</argsstring>
        <name>view_concat</name>
        <qualifiedname>cugraph::view_concat</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1edge__property__view__t" kindref="compound">edge_property_view_t</ref>&lt; edge_t, Iters, Types &gt; const &amp;...</type>
          <declname>views</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/edge_property.hpp" line="164" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/edge_property.hpp" bodystart="164" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="edge__src__dst__property_8hpp_1a471798a0e359e72c8992c4b318911539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Iters</declname>
            <defname>Iters</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::view_concat</definition>
        <argsstring>(detail::edge_major_property_view_t&lt; vertex_t, Iters, Types &gt; const &amp;... views)</argsstring>
        <name>view_concat</name>
        <qualifiedname>cugraph::view_concat</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1detail_1_1edge__major__property__view__t" kindref="compound">detail::edge_major_property_view_t</ref>&lt; vertex_t, Iters, Types &gt; const &amp;...</type>
          <declname>views</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/edge_src_dst_property.hpp" line="573" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/edge_src_dst_property.hpp" bodystart="573" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="edge__src__dst__property_8hpp_1ab62f4afcb46c23e8f316e05f249dbe80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Iters</declname>
            <defname>Iters</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::view_concat</definition>
        <argsstring>(detail::edge_minor_property_view_t&lt; vertex_t, Iters, Types &gt; const &amp;... views)</argsstring>
        <name>view_concat</name>
        <qualifiedname>cugraph::view_concat</qualifiedname>
        <param>
          <type><ref refid="classcugraph_1_1detail_1_1edge__minor__property__view__t" kindref="compound">detail::edge_minor_property_view_t</ref>&lt; vertex_t, Iters, Types &gt; const &amp;...</type>
          <declname>views</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/edge_src_dst_property.hpp" line="601" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/edge_src_dst_property.hpp" bodystart="601" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="include_2cugraph_2graph_8hpp_1a51aa0b4f773055570833adc3467cc627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ std::enable_if_t&lt; std::is_signed&lt; vertex_t &gt;::value, bool &gt;</type>
        <definition>__host__ __device__ std::enable_if_t&lt; std::is_signed&lt; vertex_t &gt;::value, bool &gt; cugraph::is_valid_vertex</definition>
        <argsstring>(vertex_t num_vertices, vertex_t v)</argsstring>
        <name>is_valid_vertex</name>
        <qualifiedname>cugraph::is_valid_vertex</qualifiedname>
        <param>
          <type>vertex_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph.hpp" line="329" column="39" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph.hpp" bodystart="329" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="include_2cugraph_2graph_8hpp_1a4b415fa26750aaffdd6d8f228e07569b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ std::enable_if_t&lt; std::is_unsigned&lt; vertex_t &gt;::value, bool &gt;</type>
        <definition>__host__ __device__ std::enable_if_t&lt; std::is_unsigned&lt; vertex_t &gt;::value, bool &gt; cugraph::is_valid_vertex</definition>
        <argsstring>(vertex_t num_vertices, vertex_t v)</argsstring>
        <name>is_valid_vertex</name>
        <qualifiedname>cugraph::is_valid_vertex</qualifiedname>
        <param>
          <type>vertex_t</type>
          <declname>num_vertices</declname>
        </param>
        <param>
          <type>vertex_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph.hpp" line="336" column="39" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph.hpp" bodystart="336" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="include_2cugraph_2graph__functions_8hpp_1ad3041c0c3f7531e5f51a22880541fe8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>typename weight_t</type>
          </param>
          <param>
            <type>typename edge_id_t</type>
          </param>
          <param>
            <type>typename edge_type_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classcugraph_1_1graph__t" kindref="compound">graph_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, edge_id_t &gt; &gt;, std::optional&lt; <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref>&lt; <ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt;</type>
        <definition>std::tuple&lt; graph_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, weight_t &gt; &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, edge_id_t &gt; &gt;, std::optional&lt; edge_property_t&lt; graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt;, edge_type_t &gt; &gt;, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &gt; cugraph::create_graph_from_edgelist</definition>
        <argsstring>(raft::handle_t const &amp;handle, std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;vertices, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_srcs, rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;edgelist_dsts, std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;edgelist_weights, std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt; &amp;&amp;edgelist_edge_ids, std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;edgelist_edge_types, graph_properties_t graph_properties, bool renumber, bool do_expensive_check=false)</argsstring>
        <name>create_graph_from_edgelist</name>
        <qualifiedname>cugraph::create_graph_from_edgelist</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; vertex_t &gt; &gt; &amp;&amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_srcs</declname>
        </param>
        <param>
          <type>rmm::device_uvector&lt; vertex_t &gt; &amp;&amp;</type>
          <declname>edgelist_dsts</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; weight_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_weights</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_id_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_ids</declname>
        </param>
        <param>
          <type>std::optional&lt; rmm::device_uvector&lt; edge_type_t &gt; &gt; &amp;&amp;</type>
          <declname>edgelist_edge_types</declname>
        </param>
        <param>
          <type><ref refid="structcugraph_1_1graph__properties__t" kindref="compound">graph_properties_t</ref></type>
          <declname>graph_properties</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>renumber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_expensive_check</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a graph from (the optional vertex list and) the given edge list (with optional edge IDs and types). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge weight. Needs to be floating point type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_id_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge id. Needs to be an integral type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_type_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge type. Needs to be an integral type, currently only int32_t is supported </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>If valid, part of the entire set of vertices in the graph to be renumbered. This parameter can be used to include isolated vertices. If <computeroutput>renumber</computeroutput> is false and <computeroutput>vertices</computeroutput> is valid, <computeroutput>vertices</computeroutput> elements should be consecutive integers starting from 0. If multi-GPU, applying the compute_gpu_id_from_vertex_t to every vertex should return the local GPU ID for this function to work (vertices should be pre-shuffled). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_srcs</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge source vertex IDs. If multi-GPU, applying the compute_gpu_id_from_ext_edge_endpoints_t to every edge should return the local GPU ID for this function to work (edges should be pre-shuffled). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_dsts</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge destination vertex IDs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of weight values for edges </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_edge_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge_id values for edges </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgelist_edge_types</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of edge_type values for edges </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph_properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Properties of the graph represented by the input (optional vertex list and) edge list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to renumber vertices or not (must be true if <computeroutput>multi_gpu</computeroutput> is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_expensive_check</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to run expensive checks for input arguments (if set to <computeroutput>true</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of the generated graph and optional <ref refid="classcugraph_1_1edge__property__t" kindref="compound">edge_property_t</ref> objects storing the provided edge properties and a renumber map (if <computeroutput>renumber</computeroutput> is true). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" line="722" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/structure/create_graph_from_edgelist_impl.cuh" bodystart="1171" bodyend="1198" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="722" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="include_2cugraph_2graph__functions_8hpp_1afbd2fa1aa4c11bdd4b6807e1002f3e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_t</type>
          </param>
          <param>
            <type>typename edge_t</type>
          </param>
          <param>
            <type>bool</type>
            <declname>store_transposed</declname>
            <defname>store_transposed</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>multi_gpu</declname>
            <defname>multi_gpu</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt;</type>
        <definition>std::tuple&lt; rmm::device_uvector&lt; vertex_t &gt;, rmm::device_uvector&lt; vertex_t &gt; &gt; cugraph::get_two_hop_neighbors</definition>
        <argsstring>(raft::handle_t const &amp;handle, graph_view_t&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;graph_view, std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt; start_vertices)</argsstring>
        <name>get_two_hop_neighbors</name>
        <qualifiedname>cugraph::get_two_hop_neighbors</qualifiedname>
        <param>
          <type>raft::handle_t const &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="classcugraph_1_1graph__view__t" kindref="compound">graph_view_t</ref>&lt; vertex_t, edge_t, store_transposed, multi_gpu &gt; const &amp;</type>
          <declname>graph_view</declname>
        </param>
        <param>
          <type>std::optional&lt; raft::device_span&lt; vertex_t const &gt; &gt;</type>
          <declname>start_vertices</declname>
        </param>
        <briefdescription>
<para>Find all 2-hop neighbors in the graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Find pairs of vertices in the input graph such that each pair is connected by a path that is two hops in length.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>vertex_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vertex identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of edge identifiers. Needs to be an integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_transposed</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use sources (if false) or destinations (if true) as major indices in storing edges using a 2D sparse matrix. transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multi_gpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether template instantiation should target single-GPU (false) or multi-GPU (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>RAFT handle object to encapsulate resources (e.g. CUDA stream, communicator, and handles to various CUDA libraries) to run graph algorithms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The input graph object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of starting vertices to discover two-hop neighbors of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple containing pairs of vertices that are 2-hops apart. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" line="754" column="12" declfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/graph_functions.hpp" declline="754" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="functions_8hpp_1a3ea68fa26fc144e25e2bb392903c4ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename value_t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::comms_bcast</definition>
        <argsstring>(const raft::handle_t &amp;handle, value_t *value, size_t count)</argsstring>
        <name>comms_bcast</name>
        <qualifiedname>cugraph::comms_bcast</qualifiedname>
        <param>
          <type>const raft::handle_t &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>value_t *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Broadcast using handle communicator. </para>
        </briefdescription>
        <detaileddescription>
<para>Use handle&apos;s communicator to operate broadcasting.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structcugraph_1_1logic__error" kindref="compound">cugraph::logic_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when an error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>value_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the data to broadcast</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Point to the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to broadcast </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/legacy/functions.hpp" line="65" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/legacy/functions.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1acd7535fdd04304a986be6ee8c2d9c2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; thrust::detail::is_discard_iterator&lt; Iterator &gt;::value, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; thrust::detail::is_discard_iterator&lt; Iterator &gt;::value, void &gt; cugraph::atomic_and</definition>
        <argsstring>(Iterator iter, T value)</argsstring>
        <name>atomic_and</name>
        <qualifiedname>cugraph::atomic_and</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="92" column="30" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1a4b03f689fcc11a74fcdca306756155d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt; &amp;&amp;std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt;</type>
        <definition>__device__ std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt; &amp;&amp; std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt; cugraph::atomic_and</definition>
        <argsstring>(Iterator iter, T value)</argsstring>
        <name>atomic_and</name>
        <qualifiedname>cugraph::atomic_and</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="103" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1a86472f43b32bf870a1fec415f6822433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; T &gt;::value &amp;&amp;std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt;</type>
        <definition>__device__ std::enable_if_t&lt; is_thrust_tuple&lt; T &gt;::value &amp;&amp; std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt; cugraph::atomic_and</definition>
        <argsstring>(Iterator iter, T value)</argsstring>
        <name>atomic_and</name>
        <qualifiedname>cugraph::atomic_and</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="113" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1a061e874719fe7e12c33a64b9e1aa1567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; thrust::detail::is_discard_iterator&lt; Iterator &gt;::value, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; thrust::detail::is_discard_iterator&lt; Iterator &gt;::value, void &gt; cugraph::atomic_or</definition>
        <argsstring>(Iterator iter, T value)</argsstring>
        <name>atomic_or</name>
        <qualifiedname>cugraph::atomic_or</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="120" column="30" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1a0e9174c76e0ff74b258aeb7bc27a6b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt; &amp;&amp;std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt;</type>
        <definition>__device__ std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt; &amp;&amp; std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt; cugraph::atomic_or</definition>
        <argsstring>(Iterator iter, T value)</argsstring>
        <name>atomic_or</name>
        <qualifiedname>cugraph::atomic_or</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="131" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1a673028994f34a8f72f1cf9a046479bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; T &gt;::value &amp;&amp;std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt;</type>
        <definition>__device__ std::enable_if_t&lt; is_thrust_tuple&lt; T &gt;::value &amp;&amp; std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt; cugraph::atomic_or</definition>
        <argsstring>(Iterator iter, T value)</argsstring>
        <name>atomic_or</name>
        <qualifiedname>cugraph::atomic_or</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="141" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="141" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1abcedb59eebf2f6bb521c8627099e8cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; thrust::detail::is_discard_iterator&lt; Iterator &gt;::value, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; thrust::detail::is_discard_iterator&lt; Iterator &gt;::value, void &gt; cugraph::atomic_add</definition>
        <argsstring>(Iterator iter, T value)</argsstring>
        <name>atomic_add</name>
        <qualifiedname>cugraph::atomic_add</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="148" column="30" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1a46452df8d466d01e1982bb33e5a753c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt; &amp;&amp;std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt; &amp;&amp; std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, void &gt; cugraph::atomic_add</definition>
        <argsstring>(Iterator iter, T value)</argsstring>
        <name>atomic_add</name>
        <qualifiedname>cugraph::atomic_add</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="159" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1af7e9efca5bf3dfbbbef8addc36e46719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; T &gt;::value, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; is_thrust_tuple&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; T &gt;::value, void &gt; cugraph::atomic_add</definition>
        <argsstring>(Iterator iter, T value)</argsstring>
        <name>atomic_add</name>
        <qualifiedname>cugraph::atomic_add</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="169" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="169" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1af3dff761168ec38c87218007047ec945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt; &amp;&amp;std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt;</type>
        <definition>__device__ std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt; &amp;&amp; std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt; cugraph::elementwise_atomic_cas</definition>
        <argsstring>(Iterator iter, T compare, T value)</argsstring>
        <name>elementwise_atomic_cas</name>
        <qualifiedname>cugraph::elementwise_atomic_cas</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="182" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1a53763b49e22dedb01e93ac1588b6e3c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; T &gt;::value &amp;&amp;std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt;</type>
        <definition>__device__ std::enable_if_t&lt; is_thrust_tuple&lt; T &gt;::value &amp;&amp; std::is_same_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;, T &gt; cugraph::elementwise_atomic_cas</definition>
        <argsstring>(Iterator iter, T compare, T value)</argsstring>
        <name>elementwise_atomic_cas</name>
        <qualifiedname>cugraph::elementwise_atomic_cas</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="192" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1a7a3f0c37ca5e90a033868daa61b18b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; thrust::detail::is_discard_iterator&lt; Iterator &gt;::value, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; thrust::detail::is_discard_iterator&lt; Iterator &gt;::value, void &gt; cugraph::elementwise_atomic_min</definition>
        <argsstring>(Iterator iter, T const &amp;value)</argsstring>
        <name>elementwise_atomic_min</name>
        <qualifiedname>cugraph::elementwise_atomic_min</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="200" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1a97fc6c20df4c2b94fafff253c71ab1ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; std::is_same&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;::value &amp;&amp;std::is_arithmetic&lt; T &gt;::value, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; std::is_same&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;::value &amp;&amp; std::is_arithmetic&lt; T &gt;::value, void &gt; cugraph::elementwise_atomic_min</definition>
        <argsstring>(Iterator iter, T const &amp;value)</argsstring>
        <name>elementwise_atomic_min</name>
        <qualifiedname>cugraph::elementwise_atomic_min</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="210" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1aafe79a606b8687e3269d89a611037fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; T &gt;::value, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; is_thrust_tuple&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; T &gt;::value, void &gt; cugraph::elementwise_atomic_min</definition>
        <argsstring>(Iterator iter, T const &amp;value)</argsstring>
        <name>elementwise_atomic_min</name>
        <qualifiedname>cugraph::elementwise_atomic_min</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="220" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="220" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1aef5c74ea4d4f5c65dd1c50cbc0f5fa96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; thrust::detail::is_discard_iterator&lt; Iterator &gt;::value, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; thrust::detail::is_discard_iterator&lt; Iterator &gt;::value, void &gt; cugraph::elementwise_atomic_max</definition>
        <argsstring>(Iterator iter, T const &amp;value)</argsstring>
        <name>elementwise_atomic_max</name>
        <qualifiedname>cugraph::elementwise_atomic_max</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="230" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1a0761d2c8c04c681078a4e991c011b215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; std::is_same&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;::value &amp;&amp;std::is_arithmetic&lt; T &gt;::value, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; std::is_same&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type, T &gt;::value &amp;&amp; std::is_arithmetic&lt; T &gt;::value, void &gt; cugraph::elementwise_atomic_max</definition>
        <argsstring>(Iterator iter, T const &amp;value)</argsstring>
        <name>elementwise_atomic_max</name>
        <qualifiedname>cugraph::elementwise_atomic_max</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="240" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="atomic__ops_8cuh_1aa92792ac8582f70b4d2ced84a07687eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; T &gt;::value, void &gt;</type>
        <definition>__device__ std::enable_if_t&lt; is_thrust_tuple&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; T &gt;::value, void &gt; cugraph::elementwise_atomic_max</definition>
        <argsstring>(Iterator iter, T const &amp;value)</argsstring>
        <name>elementwise_atomic_max</name>
        <qualifiedname>cugraph::elementwise_atomic_max</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" line="250" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/atomic_ops.cuh" bodystart="250" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="dataframe__buffer_8hpp_1a2ce89e5d593f13eb44ab8e4007755bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::allocate_dataframe_buffer</definition>
        <argsstring>(size_t buffer_size, rmm::cuda_stream_view stream_view)</argsstring>
        <name>allocate_dataframe_buffer</name>
        <qualifiedname>cugraph::allocate_dataframe_buffer</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" line="90" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="dataframe__buffer_8hpp_1a362a3b3e7c57c27b3c8089d1a2daac1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BufferType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::reserve_dataframe_buffer</definition>
        <argsstring>(BufferType &amp;buffer, size_t new_buffer_capacity, rmm::cuda_stream_view stream_view)</argsstring>
        <name>reserve_dataframe_buffer</name>
        <qualifiedname>cugraph::reserve_dataframe_buffer</qualifiedname>
        <param>
          <type>BufferType &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>new_buffer_capacity</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" line="104" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" bodystart="104" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="dataframe__buffer_8hpp_1acfa65fc67522027a6424711f02b3f202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BufferType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::resize_dataframe_buffer</definition>
        <argsstring>(BufferType &amp;buffer, size_t new_buffer_size, rmm::cuda_stream_view stream_view)</argsstring>
        <name>resize_dataframe_buffer</name>
        <qualifiedname>cugraph::resize_dataframe_buffer</qualifiedname>
        <param>
          <type>BufferType &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>new_buffer_size</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" line="120" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" bodystart="120" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="dataframe__buffer_8hpp_1a51e1b7a5ca9e2791584d17c7cb24495e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BufferType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cugraph::shrink_to_fit_dataframe_buffer</definition>
        <argsstring>(BufferType &amp;buffer, rmm::cuda_stream_view stream_view)</argsstring>
        <name>shrink_to_fit_dataframe_buffer</name>
        <qualifiedname>cugraph::shrink_to_fit_dataframe_buffer</qualifiedname>
        <param>
          <type>BufferType &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" line="136" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="dataframe__buffer_8hpp_1aecd35cc311d39c39b7381d149356ed01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BufferType</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t cugraph::size_dataframe_buffer</definition>
        <argsstring>(BufferType &amp;buffer)</argsstring>
        <name>size_dataframe_buffer</name>
        <qualifiedname>cugraph::size_dataframe_buffer</qualifiedname>
        <param>
          <type>BufferType &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" line="148" column="8" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" bodystart="148" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="dataframe__buffer_8hpp_1a1a13cfe35c2549879a48877d66a34ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BufferType</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; is_arithmetic_vector&lt; std::remove_cv_t&lt; BufferType &gt;, rmm::device_uvector &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::get_dataframe_buffer_begin</definition>
        <argsstring>(BufferType &amp;buffer)</argsstring>
        <name>get_dataframe_buffer_begin</name>
        <qualifiedname>cugraph::get_dataframe_buffer_begin</qualifiedname>
        <param>
          <type>BufferType &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" line="162" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="dataframe__buffer_8hpp_1a50cab22cd2eefc87f9e07916a619aa2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BufferType</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; is_arithmetic_vector&lt; std::remove_cv_t&lt; BufferType &gt;, rmm::device_uvector &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::get_dataframe_buffer_cbegin</definition>
        <argsstring>(BufferType &amp;buffer)</argsstring>
        <name>get_dataframe_buffer_cbegin</name>
        <qualifiedname>cugraph::get_dataframe_buffer_cbegin</qualifiedname>
        <param>
          <type>BufferType &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" line="179" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="dataframe__buffer_8hpp_1a3b890d432029fab0c2dc52eb9c1ef710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BufferType</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; is_arithmetic_vector&lt; std::remove_cv_t&lt; BufferType &gt;, rmm::device_uvector &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::get_dataframe_buffer_end</definition>
        <argsstring>(BufferType &amp;buffer)</argsstring>
        <name>get_dataframe_buffer_end</name>
        <qualifiedname>cugraph::get_dataframe_buffer_end</qualifiedname>
        <param>
          <type>BufferType &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" line="196" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="dataframe__buffer_8hpp_1a14856cd86bdfe4721ff556c53ca10239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BufferType</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; is_arithmetic_vector&lt; std::remove_cv_t&lt; BufferType &gt;, rmm::device_uvector &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::get_dataframe_buffer_cend</definition>
        <argsstring>(BufferType &amp;buffer)</argsstring>
        <name>get_dataframe_buffer_cend</name>
        <qualifiedname>cugraph::get_dataframe_buffer_cend</qualifiedname>
        <param>
          <type>BufferType &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" line="213" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/dataframe_buffer.hpp" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1ae3fa85931dd0ce3f32e1f8e18dbc04e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_isend</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, size_t count, int dst, int base_tag, raft::comms::request_t *requests)</argsstring>
        <name>device_isend</name>
        <qualifiedname>cugraph::device_isend</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base_tag</declname>
        </param>
        <param>
          <type>raft::comms::request_t *</type>
          <declname>requests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="697" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="697" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a729e2749d42314e749bc10f5f174864b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_isend</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, size_t count, int dst, int base_tag, raft::comms::request_t *requests)</argsstring>
        <name>device_isend</name>
        <qualifiedname>cugraph::device_isend</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base_tag</declname>
        </param>
        <param>
          <type>raft::comms::request_t *</type>
          <declname>requests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="714" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="714" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a2b1b5b732e302425b214377ff459b944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_irecv</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, OutputIterator output_first, size_t count, int src, int base_tag, raft::comms::request_t *requests)</argsstring>
        <name>device_irecv</name>
        <qualifiedname>cugraph::device_irecv</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base_tag</declname>
        </param>
        <param>
          <type>raft::comms::request_t *</type>
          <declname>requests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="737" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="737" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1aac592e7f6a80a2860e1ebd1d19d3c798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_irecv</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, OutputIterator output_first, size_t count, int src, int base_tag, raft::comms::request_t *requests)</argsstring>
        <name>device_irecv</name>
        <qualifiedname>cugraph::device_irecv</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base_tag</declname>
        </param>
        <param>
          <type>raft::comms::request_t *</type>
          <declname>requests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="753" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="753" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a68d6a0abcfd55f5e899611588c04204b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_sendrecv</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, size_t tx_count, int dst, OutputIterator output_first, size_t rx_count, int src, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_sendrecv</name>
        <qualifiedname>cugraph::device_sendrecv</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tx_count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rx_count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="776" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="776" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a9552ef0a768551caf7e5717bf216331e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_sendrecv</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, size_t tx_count, int dst, OutputIterator output_first, size_t rx_count, int src, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_sendrecv</name>
        <qualifiedname>cugraph::device_sendrecv</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tx_count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rx_count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="794" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="794" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1ac341abe1c845dc56111a447b8d6b823b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_multicast_sendrecv</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, std::vector&lt; size_t &gt; const &amp;tx_counts, std::vector&lt; size_t &gt; const &amp;tx_offsets, std::vector&lt; int &gt; const &amp;tx_dst_ranks, OutputIterator output_first, std::vector&lt; size_t &gt; const &amp;rx_counts, std::vector&lt; size_t &gt; const &amp;rx_offsets, std::vector&lt; int &gt; const &amp;rx_src_ranks, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_multicast_sendrecv</name>
        <qualifiedname>cugraph::device_multicast_sendrecv</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>tx_counts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>tx_offsets</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>tx_dst_ranks</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>rx_counts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>rx_offsets</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rx_src_ranks</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="821" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="821" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a8ee1ca9a599ecfa0df1afeed80303f1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_multicast_sendrecv</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, std::vector&lt; size_t &gt; const &amp;tx_counts, std::vector&lt; size_t &gt; const &amp;tx_offsets, std::vector&lt; int &gt; const &amp;tx_dst_ranks, OutputIterator output_first, std::vector&lt; size_t &gt; const &amp;rx_counts, std::vector&lt; size_t &gt; const &amp;rx_offsets, std::vector&lt; int &gt; const &amp;rx_src_ranks, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_multicast_sendrecv</name>
        <qualifiedname>cugraph::device_multicast_sendrecv</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>tx_counts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>tx_offsets</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>tx_dst_ranks</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>rx_counts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>rx_offsets</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rx_src_ranks</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="849" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="849" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a9a85eee390c4a28e7cc578908f16d70b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_bcast</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, OutputIterator output_first, size_t count, int root, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_bcast</name>
        <qualifiedname>cugraph::device_bcast</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="887" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="887" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a870e4e8113dbe3f813fade9e5daa413c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_bcast</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, OutputIterator output_first, size_t count, int root, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_bcast</name>
        <qualifiedname>cugraph::device_bcast</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="902" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="902" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1ac53f1cf73d8d2808e99c0b94fbe454f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_allreduce</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, OutputIterator output_first, size_t count, raft::comms::op_t op, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_allreduce</name>
        <qualifiedname>cugraph::device_allreduce</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>raft::comms::op_t</type>
          <declname>op</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="925" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="925" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1ae24a133fa933cc198af45b483d8b4a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_allreduce</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, OutputIterator output_first, size_t count, raft::comms::op_t op, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_allreduce</name>
        <qualifiedname>cugraph::device_allreduce</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>raft::comms::op_t</type>
          <declname>op</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="940" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="940" bodyend="959"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a7cad7f8b32e6494f7e5bad699617da11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_reduce</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, OutputIterator output_first, size_t count, raft::comms::op_t op, int root, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_reduce</name>
        <qualifiedname>cugraph::device_reduce</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>raft::comms::op_t</type>
          <declname>op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="965" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="965" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1af20b3336ea8982dad458eef2fe53a11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_reduce</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, OutputIterator output_first, size_t count, raft::comms::op_t op, int root, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_reduce</name>
        <qualifiedname>cugraph::device_reduce</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>raft::comms::op_t</type>
          <declname>op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="981" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="981" bodyend="1001"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a3a87b2b8d84c48637ddda5ae6f3427b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_allgatherv</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, OutputIterator output_first, std::vector&lt; size_t &gt; const &amp;recvcounts, std::vector&lt; size_t &gt; const &amp;displacements, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_allgatherv</name>
        <qualifiedname>cugraph::device_allgatherv</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>recvcounts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>displacements</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="1007" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="1007" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1aaff58a7243ff162d40945ed1e83390f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_allgatherv</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, OutputIterator output_first, std::vector&lt; size_t &gt; const &amp;recvcounts, std::vector&lt; size_t &gt; const &amp;displacements, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_allgatherv</name>
        <qualifiedname>cugraph::device_allgatherv</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>recvcounts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>displacements</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="1023" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="1023" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a7acb714bc3dfb766b26e331c7088a982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_gatherv</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, OutputIterator output_first, size_t sendcount, std::vector&lt; size_t &gt; const &amp;recvcounts, std::vector&lt; size_t &gt; const &amp;displacements, int root, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_gatherv</name>
        <qualifiedname>cugraph::device_gatherv</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sendcount</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>recvcounts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>displacements</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="1048" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="1048" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a2497a201020dc7d90d82ca6f1fca4457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">is_thrust_tuple_of_arithmetic</ref>&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp;<ref refid="structcugraph_1_1is__thrust__tuple" kindref="compound">is_thrust_tuple</ref>&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; is_thrust_tuple_of_arithmetic&lt; typename std::iterator_traits&lt; InputIterator &gt;::value_type &gt;::value &amp;&amp; is_thrust_tuple&lt; typename std::iterator_traits&lt; OutputIterator &gt;::value_type &gt;::value, void &gt; cugraph::device_gatherv</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, InputIterator input_first, OutputIterator output_first, size_t sendcount, std::vector&lt; size_t &gt; const &amp;recvcounts, std::vector&lt; size_t &gt; const &amp;displacements, int root, rmm::cuda_stream_view stream_view)</argsstring>
        <name>device_gatherv</name>
        <qualifiedname>cugraph::device_gatherv</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>input_first</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output_first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sendcount</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>recvcounts</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>displacements</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="1066" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="1066" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a7bf304388ba5b044d214ff9943ca28aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::device_group_start</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm)</argsstring>
        <name>device_group_start</name>
        <qualifiedname>cugraph::device_group_start</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="1089" column="13" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="1089" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="device__comm_8hpp_1a4ddbfe42d14764e63c4ec3ca2d15f057" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::device_group_end</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm)</argsstring>
        <name>device_group_end</name>
        <qualifiedname>cugraph::device_group_end</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" line="1091" column="13" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/device_comm.hpp" bodystart="1091" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1ac4ef5941effb8eac9e1d23471e987823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt; cugraph::host_scalar_allreduce</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, T input, raft::comms::op_t op, cudaStream_t stream)</argsstring>
        <name>host_scalar_allreduce</name>
        <qualifiedname>cugraph::host_scalar_allreduce</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type>raft::comms::op_t</type>
          <declname>op</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="127" column="19" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="127" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1a0aecfbd296a0b51848aad03f298be2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">cugraph::is_thrust_tuple_of_arithmetic</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>std::enable_if_t&lt; cugraph::is_thrust_tuple_of_arithmetic&lt; T &gt;::value, T &gt; cugraph::host_scalar_allreduce</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, T input, raft::comms::op_t op, cudaStream_t stream)</argsstring>
        <name>host_scalar_allreduce</name>
        <qualifiedname>cugraph::host_scalar_allreduce</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type>raft::comms::op_t</type>
          <declname>op</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="141" column="19" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="141" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1aaa5e7e80bdc696a5efeea02fca62c29f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt; cugraph::host_scalar_reduce</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, T input, raft::comms::op_t op, int root, cudaStream_t stream)</argsstring>
        <name>host_scalar_reduce</name>
        <qualifiedname>cugraph::host_scalar_reduce</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type>raft::comms::op_t</type>
          <declname>op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="167" column="19" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="167" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1a8e1b2fa4cf531582a7f06265b97b4e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">cugraph::is_thrust_tuple_of_arithmetic</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>std::enable_if_t&lt; cugraph::is_thrust_tuple_of_arithmetic&lt; T &gt;::value, T &gt; cugraph::host_scalar_reduce</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, T input, raft::comms::op_t op, int root, cudaStream_t stream)</argsstring>
        <name>host_scalar_reduce</name>
        <qualifiedname>cugraph::host_scalar_reduce</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type>raft::comms::op_t</type>
          <declname>op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="182" column="19" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="182" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1a3477f122b6806fe68749ef99da83a198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt; cugraph::host_scalar_bcast</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, T input, int root, cudaStream_t stream)</argsstring>
        <name>host_scalar_bcast</name>
        <qualifiedname>cugraph::host_scalar_bcast</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="211" column="19" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="211" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1adb1712d5db64b056ebfe2c44973cd6a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">cugraph::is_thrust_tuple_of_arithmetic</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>std::enable_if_t&lt; cugraph::is_thrust_tuple_of_arithmetic&lt; T &gt;::value, T &gt; cugraph::host_scalar_bcast</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, T input, int root, cudaStream_t stream)</argsstring>
        <name>host_scalar_bcast</name>
        <qualifiedname>cugraph::host_scalar_bcast</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="225" column="19" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="225" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1a99cb37e34d6f55d8de0b5dd806a562d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, std::vector&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, std::vector&lt; T &gt; &gt; cugraph::host_scalar_allgather</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, T input, cudaStream_t stream)</argsstring>
        <name>host_scalar_allgather</name>
        <qualifiedname>cugraph::host_scalar_allgather</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="255" column="19" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="255" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1a8c1515a2440fb2f134c36f79ca5caadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">cugraph::is_thrust_tuple_of_arithmetic</ref>&lt; T &gt;::value, std::vector&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; cugraph::is_thrust_tuple_of_arithmetic&lt; T &gt;::value, std::vector&lt; T &gt; &gt; cugraph::host_scalar_allgather</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, T input, cudaStream_t stream)</argsstring>
        <name>host_scalar_allgather</name>
        <qualifiedname>cugraph::host_scalar_allgather</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="270" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="270" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1a950cf9c6f934b9f4cf99b0327ccd62ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, T &gt; cugraph::host_scalar_scatter</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, std::vector&lt; T &gt; const &amp;inputs, int root, cudaStream_t stream)</argsstring>
        <name>host_scalar_scatter</name>
        <qualifiedname>cugraph::host_scalar_scatter</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="308" column="19" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="308" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1a8a30c728c002d1a350c885004af11161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">cugraph::is_thrust_tuple_of_arithmetic</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>std::enable_if_t&lt; cugraph::is_thrust_tuple_of_arithmetic&lt; T &gt;::value, T &gt; cugraph::host_scalar_scatter</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, std::vector&lt; T &gt; const &amp;inputs, int root, cudaStream_t stream)</argsstring>
        <name>host_scalar_scatter</name>
        <qualifiedname>cugraph::host_scalar_scatter</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="331" column="19" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="331" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1a352f7a7f6f2105d3caebde7417de9fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, std::vector&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, std::vector&lt; T &gt; &gt; cugraph::host_scalar_gather</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, T input, int root, cudaStream_t stream)</argsstring>
        <name>host_scalar_gather</name>
        <qualifiedname>cugraph::host_scalar_gather</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="374" column="19" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="374" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="host__scalar__comm_8hpp_1afa6434015c72eb7b58a73f6c97f213ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structcugraph_1_1is__thrust__tuple__of__arithmetic" kindref="compound">cugraph::is_thrust_tuple_of_arithmetic</ref>&lt; T &gt;::value, std::vector&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; cugraph::is_thrust_tuple_of_arithmetic&lt; T &gt;::value, std::vector&lt; T &gt; &gt; cugraph::host_scalar_gather</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, T input, int root, cudaStream_t stream)</argsstring>
        <name>host_scalar_gather</name>
        <qualifiedname>cugraph::host_scalar_gather</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" line="400" column="1" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/host_scalar_comm.hpp" bodystart="400" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="packed__bool__utils_8hpp_1ae65027a0eacf96c91ba0fd1dc6fb1c35" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueIterator</type>
          </param>
          <param>
            <type>typename value_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool cugraph::is_packed_bool</definition>
        <argsstring>()</argsstring>
        <name>is_packed_bool</name>
        <qualifiedname>cugraph::is_packed_bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" line="51" column="16" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="packed__bool__utils_8hpp_1abdf5e2b8ba0881ebbb59c65139bfc526" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueIterator</type>
          </param>
          <param>
            <type>typename value_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool cugraph::has_packed_bool_element</definition>
        <argsstring>()</argsstring>
        <name>has_packed_bool_element</name>
        <qualifiedname>cugraph::has_packed_bool_element</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" line="59" column="16" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" bodystart="59" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="packed__bool__utils_8hpp_1a6416a63854b12c3ea538bfad4dc1cf8e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t cugraph::packed_bools_per_word</definition>
        <argsstring>()</argsstring>
        <name>packed_bools_per_word</name>
        <qualifiedname>cugraph::packed_bools_per_word</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" line="80" column="18" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="packed__bool__utils_8hpp_1acdc30450ed908565e9a72031ee926c91" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t cugraph::packed_bool_size</definition>
        <argsstring>(size_t bool_size)</argsstring>
        <name>packed_bool_size</name>
        <qualifiedname>cugraph::packed_bool_size</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>bool_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" line="82" column="18" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="packed__bool__utils_8hpp_1a24c9ee6d71bad32c296298b02b20cad4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t cugraph::packed_bool_mask</definition>
        <argsstring>(T bool_offset)</argsstring>
        <name>packed_bool_mask</name>
        <qualifiedname>cugraph::packed_bool_mask</qualifiedname>
        <param>
          <type>T</type>
          <declname>bool_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" line="88" column="20" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="packed__bool__utils_8hpp_1a84911121832f6afc35140c78ef4e5e6c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t cugraph::packed_bool_full_mask</definition>
        <argsstring>()</argsstring>
        <name>packed_bool_full_mask</name>
        <qualifiedname>cugraph::packed_bool_full_mask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" line="93" column="20" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="packed__bool__utils_8hpp_1ad588d272b809b136500f505bff4ac6c1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t cugraph::packed_bool_partial_mask</definition>
        <argsstring>(T num_set_bits)</argsstring>
        <name>packed_bool_partial_mask</name>
        <qualifiedname>cugraph::packed_bool_partial_mask</qualifiedname>
        <param>
          <type>T</type>
          <declname>num_set_bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" line="96" column="20" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="packed__bool__utils_8hpp_1aadd4eb326b917a6b741612e2ab2515f7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t cugraph::packed_bool_empty_mask</definition>
        <argsstring>()</argsstring>
        <name>packed_bool_empty_mask</name>
        <qualifiedname>cugraph::packed_bool_empty_mask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" line="102" column="20" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="packed__bool__utils_8hpp_1a26962954badcd87658037267926f53ed" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T cugraph::packed_bool_offset</definition>
        <argsstring>(T bool_offset)</argsstring>
        <name>packed_bool_offset</name>
        <qualifiedname>cugraph::packed_bool_offset</qualifiedname>
        <param>
          <type>T</type>
          <declname>bool_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" line="105" column="13" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/packed_bool_utils.hpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__comm_8cuh_1aded8f5f4384550587c7c9f80f38d953d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueIterator</type>
          </param>
          <param>
            <type>typename ValueToGroupIdOp</type>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; size_t &gt;</type>
        <definition>rmm::device_uvector&lt; size_t &gt; cugraph::groupby_and_count</definition>
        <argsstring>(ValueIterator tx_value_first, ValueIterator tx_value_last, ValueToGroupIdOp value_to_group_id_op, int num_groups, size_t mem_frugal_threshold, rmm::cuda_stream_view stream_view)</argsstring>
        <name>groupby_and_count</name>
        <qualifiedname>cugraph::groupby_and_count</qualifiedname>
        <param>
          <type>ValueIterator</type>
          <declname>tx_value_first</declname>
        </param>
        <param>
          <type>ValueIterator</type>
          <declname>tx_value_last</declname>
        </param>
        <param>
          <type>ValueToGroupIdOp</type>
          <declname>value_to_group_id_op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_groups</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mem_frugal_threshold</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/shuffle_comm.cuh" line="754" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/shuffle_comm.cuh" bodystart="754" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__comm_8cuh_1ad587422547b22b90e45d4e319859004f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VertexIterator</type>
          </param>
          <param>
            <type>typename ValueIterator</type>
          </param>
          <param>
            <type>typename KeyToGroupIdOp</type>
          </param>
        </templateparamlist>
        <type>rmm::device_uvector&lt; size_t &gt;</type>
        <definition>rmm::device_uvector&lt; size_t &gt; cugraph::groupby_and_count</definition>
        <argsstring>(VertexIterator tx_key_first, VertexIterator tx_key_last, ValueIterator tx_value_first, KeyToGroupIdOp key_to_group_id_op, int num_groups, size_t mem_frugal_threshold, rmm::cuda_stream_view stream_view)</argsstring>
        <name>groupby_and_count</name>
        <qualifiedname>cugraph::groupby_and_count</qualifiedname>
        <param>
          <type>VertexIterator</type>
          <declname>tx_key_first</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>tx_key_last</declname>
        </param>
        <param>
          <type>ValueIterator</type>
          <declname>tx_value_first</declname>
        </param>
        <param>
          <type>KeyToGroupIdOp</type>
          <declname>key_to_group_id_op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_groups</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mem_frugal_threshold</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/shuffle_comm.cuh" line="787" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/shuffle_comm.cuh" bodystart="787" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__comm_8cuh_1a6e3c14a1a95d309bd59b553ee781f641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TxValueIterator</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::shuffle_values</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, TxValueIterator tx_value_first, std::vector&lt; size_t &gt; const &amp;tx_value_counts, rmm::cuda_stream_view stream_view)</argsstring>
        <name>shuffle_values</name>
        <qualifiedname>cugraph::shuffle_values</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>TxValueIterator</type>
          <declname>tx_value_first</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>tx_value_counts</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/shuffle_comm.cuh" line="821" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/shuffle_comm.cuh" bodystart="821" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__comm_8cuh_1aec90c0343f837f98f7fffd2d52b76721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueIterator</type>
          </param>
          <param>
            <type>typename ValueToGPUIdOp</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::groupby_gpu_id_and_shuffle_values</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, ValueIterator tx_value_first, ValueIterator tx_value_last, ValueToGPUIdOp value_to_gpu_id_op, rmm::cuda_stream_view stream_view)</argsstring>
        <name>groupby_gpu_id_and_shuffle_values</name>
        <qualifiedname>cugraph::groupby_gpu_id_and_shuffle_values</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>ValueIterator</type>
          <declname>tx_value_first</declname>
        </param>
        <param>
          <type>ValueIterator</type>
          <declname>tx_value_last</declname>
        </param>
        <param>
          <type>ValueToGPUIdOp</type>
          <declname>value_to_gpu_id_op</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/shuffle_comm.cuh" line="870" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/shuffle_comm.cuh" bodystart="870" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="shuffle__comm_8cuh_1a7ead4e131a11892a97c2607a1f691529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VertexIterator</type>
          </param>
          <param>
            <type>typename ValueIterator</type>
          </param>
          <param>
            <type>typename KeyToGPUIdOp</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::groupby_gpu_id_and_shuffle_kv_pairs</definition>
        <argsstring>(raft::comms::comms_t const &amp;comm, VertexIterator tx_key_first, VertexIterator tx_key_last, ValueIterator tx_value_first, KeyToGPUIdOp key_to_gpu_id_op, rmm::cuda_stream_view stream_view)</argsstring>
        <name>groupby_gpu_id_and_shuffle_kv_pairs</name>
        <qualifiedname>cugraph::groupby_gpu_id_and_shuffle_kv_pairs</qualifiedname>
        <param>
          <type>raft::comms::comms_t const &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>tx_key_first</declname>
        </param>
        <param>
          <type>VertexIterator</type>
          <declname>tx_key_last</declname>
        </param>
        <param>
          <type>ValueIterator</type>
          <declname>tx_value_first</declname>
        </param>
        <param>
          <type>KeyToGPUIdOp</type>
          <declname>key_to_gpu_id_op</declname>
        </param>
        <param>
          <type>rmm::cuda_stream_view</type>
          <declname>stream_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/shuffle_comm.cuh" line="922" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/shuffle_comm.cuh" bodystart="922" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1a0245bd0e128228e02eac7a3bde8b0ba1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TupleType</type>
          </param>
        </templateparamlist>
        <type>constexpr size_t</type>
        <definition>constexpr size_t cugraph::sum_thrust_tuple_element_sizes</definition>
        <argsstring>()</argsstring>
        <name>sum_thrust_tuple_element_sizes</name>
        <qualifiedname>cugraph::sum_thrust_tuple_element_sizes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="165" column="18" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1a4d3a3284bd3057d7a1b9aa0ca776a409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TupleType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::thrust_tuple_to_std_tuple</definition>
        <argsstring>(TupleType tup)</argsstring>
        <name>thrust_tuple_to_std_tuple</name>
        <qualifiedname>cugraph::thrust_tuple_to_std_tuple</qualifiedname>
        <param>
          <type>TupleType</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="172" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1ac25bdab55d4ee691bfaf133ca54198e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TupleType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::std_tuple_to_thrust_tuple</definition>
        <argsstring>(TupleType tup)</argsstring>
        <name>std_tuple_to_thrust_tuple</name>
        <qualifiedname>cugraph::std_tuple_to_thrust_tuple</qualifiedname>
        <param>
          <type>TupleType</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="179" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="179" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1ab2b3451b8490897c53520fb4ae8f40aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::to_thrust_tuple</definition>
        <argsstring>(T scalar_value)</argsstring>
        <name>to_thrust_tuple</name>
        <qualifiedname>cugraph::to_thrust_tuple</qualifiedname>
        <param>
          <type>T</type>
          <declname>scalar_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="188" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1a91cf9fdc02a1a7a16fd6ded273ab81ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::to_thrust_tuple</definition>
        <argsstring>(thrust::tuple&lt; Ts... &gt; tuple_value)</argsstring>
        <name>to_thrust_tuple</name>
        <qualifiedname>cugraph::to_thrust_tuple</qualifiedname>
        <param>
          <type>thrust::tuple&lt; Ts... &gt;</type>
          <declname>tuple_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="194" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1a37cd22d7e968f9ceca24727b96056d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; std::is_arithmetic_v&lt; typename std::iterator_traits&lt; Iterator &gt;::value_type &gt; &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::to_thrust_iterator_tuple</definition>
        <argsstring>(Iterator iter)</argsstring>
        <name>to_thrust_iterator_tuple</name>
        <qualifiedname>cugraph::to_thrust_iterator_tuple</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="202" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1a1594453172a808f08f3a69b13595fb5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt; &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::thrust_tuple_get_or_identity</definition>
        <argsstring>(T val)</argsstring>
        <name>thrust_tuple_get_or_identity</name>
        <qualifiedname>cugraph::thrust_tuple_get_or_identity</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="220" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1a821b363c5140d50d5f18f0eb6319ebfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; std::is_arithmetic_v&lt; typename thrust::iterator_traits&lt; Iterator &gt;::value_type &gt; &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::thrust_tuple_get_or_identity</definition>
        <argsstring>(Iterator val)</argsstring>
        <name>thrust_tuple_get_or_identity</name>
        <qualifiedname>cugraph::thrust_tuple_get_or_identity</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="245" column="3" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1adeb3d1993597fd08242aeacaec37f581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>TupleTypes</declname>
            <defname>TupleTypes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cugraph::thrust_tuple_cat</definition>
        <argsstring>(TupleTypes... tups)</argsstring>
        <name>thrust_tuple_cat</name>
        <qualifiedname>cugraph::thrust_tuple_cat</qualifiedname>
        <param>
          <type>TupleTypes...</type>
          <declname>tups</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="265" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1ae2f9ef06581d6d25bb276ef3c8b5ef1d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TupleType</type>
          </param>
        </templateparamlist>
        <type>constexpr TupleType</type>
        <definition>constexpr TupleType cugraph::thrust_tuple_of_arithmetic_numeric_limits_lowest</definition>
        <argsstring>()</argsstring>
        <name>thrust_tuple_of_arithmetic_numeric_limits_lowest</name>
        <qualifiedname>cugraph::thrust_tuple_of_arithmetic_numeric_limits_lowest</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="271" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="271" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1ae95774a4c66433284e07ae8f80c039fa" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TupleType</type>
          </param>
        </templateparamlist>
        <type>constexpr TupleType</type>
        <definition>constexpr TupleType cugraph::thrust_tuple_of_arithmetic_numeric_limits_max</definition>
        <argsstring>()</argsstring>
        <name>thrust_tuple_of_arithmetic_numeric_limits_max</name>
        <qualifiedname>cugraph::thrust_tuple_of_arithmetic_numeric_limits_max</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="278" column="21" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="278" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="thrust__tuple__utils_8hpp_1a88772449c7620ccd6fe5eec688facdcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) cugraph::get_first_of_pack</definition>
        <argsstring>(T &amp;&amp;t, Ts &amp;&amp;...)</argsstring>
        <name>get_first_of_pack</name>
        <qualifiedname>cugraph::get_first_of_pack</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Ts &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" line="293" column="10" bodyfile="/home/nfs/abarghi/cugraph6/cpp/include/cugraph/utilities/thrust_tuple_utils.hpp" bodystart="293" bodyend="296"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/nfs/abarghi/cugraph6/cpp/src/c_api/abstract_functor.hpp" line="24" column="1"/>
  </compounddef>
</doxygen>
