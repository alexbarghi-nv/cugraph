<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespaceMLCommon" kind="namespace" language="C++">
    <compoundname>MLCommon</compoundname>
    <innerclass refid="classMLCommon_1_1Exception" prot="public">MLCommon::Exception</innerclass>
    <innernamespace refid="namespaceMLCommon_1_1Sparse">MLCommon::Sparse</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="utils_8h_1afd611e92a01811c35ec733fd18112064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void MLCommon::copy</definition>
        <argsstring>(Type *dst, const Type *src, size_t len, cudaStream_t stream)</argsstring>
        <name>copy</name>
        <qualifiedname>MLCommon::copy</qualifiedname>
        <param>
          <type>Type *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Type *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Generic copy method for all kinds of transfers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>data type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>lenth of the src/dst buffers in terms of number of elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/utils.h" line="95" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/utils.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <member refid="group__Copy_1ga18a265a5eb16da13a51f486fe5e3acb7" kind="function"><name>updateDevice</name></member>
      <member refid="group__Copy_1ga9c1498ebc5825f9e63a9de94ced042d5" kind="function"><name>updateHost</name></member>
      <member refid="group__Copy_1gaa01ba24b3370f4d1d62f0641a3245d80" kind="function"><name>copyAsync</name></member>
      <memberdef kind="function" id="utils_8h_1ad848c0845698b5d458479f8a32a0600d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t MLCommon::allocLengthForMatrix</definition>
        <argsstring>(size_t rows, size_t columns)</argsstring>
        <name>allocLengthForMatrix</name>
        <qualifiedname>MLCommon::allocLengthForMatrix</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to calculate need memory for allocate to store dense matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columns</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>need number of items to allocate via allocate() </para>
</simplesect>
<simplesect kind="see"><para>allocate() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/utils.h" line="134" column="15" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/utils.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a3fd711aaf35c8d997c07a4a1d2c91a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool MLCommon::is_aligned</definition>
        <argsstring>(Type *ptr, size_t alignment)</argsstring>
        <name>is_aligned</name>
        <qualifiedname>MLCommon::is_aligned</qualifiedname>
        <param>
          <type>Type *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to check alignment of pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>to be checked for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if address in bytes is a multiple of alignment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/utils.h" line="142" column="6" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/utils.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1af6ea85b6acb5a5dce8014ee2e2fa764c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
        </templateparamlist>
        <type>IntType</type>
        <definition>IntType MLCommon::gcd</definition>
        <argsstring>(IntType a, IntType b)</argsstring>
        <name>gcd</name>
        <qualifiedname>MLCommon::gcd</qualifiedname>
        <param>
          <type>IntType</type>
          <declname>a</declname>
        </param>
        <param>
          <type>IntType</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculate greatest common divisor of two numbers <emphasis>integer</emphasis> <bold>integer</bold> @ return gcd of a and b </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/utils.h" line="153" column="9" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/utils.h" bodystart="153" bodyend="161"/>
      </memberdef>
      <member refid="group__Debug_1ga1b48e66987008dad2ec1735461e7b493" kind="function"><name>myPrintHostVector</name></member>
      <member refid="group__Debug_1ga8c1f66ceb7c337287a596649ad1f9d5f" kind="function"><name>myPrintHostVector</name></member>
      <member refid="group__Debug_1ga6e879b962a3d64b12229d29affcc77c8" kind="function"><name>myPrintDevVector</name></member>
      <member refid="group__Debug_1ga20e91ba5a336edf93adc3bf154ee7c5f" kind="function"><name>myPrintDevVector</name></member>
      <memberdef kind="function" id="weak__cc_8cuh_1a3f93f20b33a67e0f36b1fe1f82fe2c5f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType1</type>
          </param>
          <param>
            <type>typename IntType2</type>
          </param>
        </templateparamlist>
        <type>constexpr __host__ __device__ IntType1</type>
        <definition>constexpr __host__ __device__ IntType1 MLCommon::ceildiv</definition>
        <argsstring>(IntType1 a, IntType2 b)</argsstring>
        <name>ceildiv</name>
        <qualifiedname>MLCommon::ceildiv</qualifiedname>
        <param>
          <type>IntType1</type>
          <declname>a</declname>
        </param>
        <param>
          <type>IntType2</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Provide a ceiling division operation ie. ceil(a / b) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IntType</parametername>
</parameternamelist>
<parameterdescription>
<para>supposed to be only integers for now! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/weak_cc.cuh" line="44" column="47" bodyfile="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/weak_cc.cuh" bodystart="44" bodyend="47"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/nfs/abarghi/cugraph6/cpp/src/components/legacy/utils.h" line="34" column="1"/>
  </compounddef>
</doxygen>
